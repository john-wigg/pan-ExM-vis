{"version":3,"sources":["ui/Toolbar.js","ui/Sidebar.js","ui/Overlay.js","ui/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Toolbar","fullscreenIcon","this","props","fullscreen","ButtonToolbar","className","ButtonGroup","Button","onClick","onToggleSidebar","onImportData","onToggleFullscreen","Component","Sidebar","handleSelectCompartmet","bind","handleChangeDisplaySegmentation","handleChangeDisplayProtein","index","onCompartmentSelection","e","onDisplaySegmentation","target","checked","onDisplayProtein","dropdownItems","Dropdown","Item","i","push","numCompartments","dropdownText","selection","Row","md","Col","Collapse","in","open","Card","Body","Form","Check","Input","displayProtein","disabled","onChange","Label","displaySegmentation","Range","Toggle","Menu","Overlay","children","Main","state","showSidebar","showImport","voxelSize","bufferDims","sdfBuffers","proteinBuffer","ready","compartmentIndex","globalHistogram","labelsHistogram","localHistogram","handleShowImport","handleToggleFullscreen","handleToggleSidebar","handleAbortImport","handleCompleteImport","handleCompartmentSelection","handleDisplaySegmentation","handleDisplayProtein","setState","hist","histLabels","document","exitFullscreen","webkitExitFullscreen","msExitFullscreen","elem","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","value","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d85630c8.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nclass Toolbar extends Component {\n\trender() {\n\t\tlet fullscreenIcon;\n\t\tif (this.props.fullscreen) fullscreenIcon = \"bi-fullscreen-exit\";\n\t\telse fullscreenIcon = \"bi-arrows-fullscreen\";\n\t\treturn (\n\t\t\t<ButtonToolbar className=\"justify-content-between\">\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleSidebar}\n\t\t\t\t><i className=\"bi-tools\"></i></Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onImportData}\n\t\t\t\t>Import Data</Button>\n\t\t\t</ButtonGroup>\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleFullscreen}\n\t\t\t\t><i className={fullscreenIcon}></i></Button>\n\t\t\t</ButtonGroup>\n\t\t\t</ButtonToolbar>\n\t\t)\n\t}\n}\n\nexport default Toolbar","import React, { Component } from 'react'\n\nimport Col from 'react-bootstrap/Col';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Card from 'react-bootstrap/Card';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\nclass Sidebar extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleSelectCompartmet = this.handleSelectCompartmet.bind(this);\n        this.handleChangeDisplaySegmentation = this.handleChangeDisplaySegmentation.bind(this);\n        this.handleChangeDisplayProtein = this.handleChangeDisplayProtein.bind(this);\n\t}\n\n    handleSelectCompartmet(index) {\n        this.props.onCompartmentSelection(index);\n    }\n\n    handleChangeDisplaySegmentation(e) {\n        this.props.onDisplaySegmentation(e.target.checked);\n    }\n\n    handleChangeDisplayProtein(e) {\n        this.props.onDisplayProtein(e.target.checked);\n    }\n\n\trender() {\n        let dropdownItems = [\n        <Dropdown.Item\n            onClick={() => this.handleSelectCompartmet(0)}\n        >All Compartments</Dropdown.Item>]\n        for (var i = 0; i < this.props.numCompartments-1; ++i) {\n            let index = i;\n            dropdownItems.push(\n            <Dropdown.Item\n                onClick={() => this.handleSelectCompartmet(index+1)}\n            >Compartment {index+1}</Dropdown.Item>);\n        }\n\n        let dropdownText = \"\";\n        if (this.props.numCompartments === 0) dropdownText = \"No Compartment Data\"\n        else if (this.props.selection === 0) dropdownText = \"All Compartments\";\n        else dropdownText = \"Compartment \" + this.props.selection;\n\t\treturn (\n            <Row md={3}>\n                <Col>\n                    <Collapse in={this.props.open}>\n                        <Card>\n                            <Card.Body>\n                                <Form>\n                                    <Form.Check className=\"form-switch\">\n                                        <Form.Check.Input\n                                            checked={this.props.displayProtein}\n                                            disabled={this.props.numCompartments===0}\n                                            onChange={this.handleChangeDisplayProtein}\n                                        />\n                                        <Form.Check.Label>Display Protein</Form.Check.Label>\n                                    </Form.Check>\n                                    <Form.Check className=\"form-switch\">\n                                        <Form.Check.Input\n                                            checked={this.props.displaySegmentation}\n                                            disabled={this.props.numCompartments===0}\n                                            onChange={this.handleChangeDisplaySegmentation}\n                                        />\n                                        <Form.Check.Label>Display Segmentation</Form.Check.Label>\n                                    </Form.Check>\n                                    <Form.Range\n                                        disabled={this.props.numCompartments===0}\n                                        \n                                    />\n                                    <Dropdown>\n                                        <Dropdown.Toggle disabled={this.props.numCompartments===0}>\n                                            {dropdownText}\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            {dropdownItems}\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </Form>\n                            </Card.Body>\n                        </Card>\n                    </Collapse>\n                </Col>\n            </Row>\n\t\t)\n\t}\n}\n\nexport default Sidebar;","const Overlay = (props) => {\n    return <div className=\"overlay d-grid gap-3\">\n        {props.children}\n    </div>\n}\n\nexport default Overlay","import React, { Component } from 'react'\n\n//import Import from './Import'\nimport Toolbar from './Toolbar';\nimport Sidebar from './Sidebar';\nimport Overlay from './Overlay';\n//import Views from './Views'\n\nclass Main extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tfullscreen: false,\n\t\t\tshowSidebar: false,\n\t\t\tshowImport: false,\n\t\t\tvoxelSize: [0, 0, 0],\n\t\t\tbufferDims: [0, 0, 0],\n\t\t\tsdfBuffers: [],\n\t\t\tproteinBuffer: \"\",\n\t\t\tready: false,\n\t\t\tcompartmentIndex: 0,\n\t\t\tdisplaySegmentation: true,\n\t\t\tdisplayProtein: true,\n\t\t\tglobalHistogram: [],\n\t\t\tlabelsHistogram: [],\n\t\t\tlocalHistogram: []\n\t\t}\n\t\t\n\t\tthis.handleShowImport = this.handleShowImport.bind(this);\n\t\tthis.handleToggleFullscreen = this.handleToggleFullscreen.bind(this);\n\t\tthis.handleToggleSidebar = this.handleToggleSidebar.bind(this);\n\t\tthis.handleAbortImport = this.handleAbortImport.bind(this);\n\t\tthis.handleCompleteImport = this.handleCompleteImport.bind(this);\n\t\tthis.handleCompartmentSelection = this.handleCompartmentSelection.bind(this);\n\t\tthis.handleDisplaySegmentation = this.handleDisplaySegmentation.bind(this);\n\t\tthis.handleDisplayProtein = this.handleDisplayProtein.bind(this);\n\t}\n\n\thandleShowImport() {\n\t\tthis.setState({\n\t\t\tshowImport: true\n\t\t});\n\t}\n\n\thandleAbortImport() {\n\t\tthis.setState({\n\t\t\tshowImport: false\n\t\t});\n\t}\n\n\thandleCompleteImport(sdfBuffers, proteinBuffer, bufferDims, voxelSize, hist, histLabels) {\n\t\tthis.setState({\n\t\t\tsdfBuffers: sdfBuffers,\n\t\t\tproteinBuffer: proteinBuffer,\n\t\t\tbufferDims: bufferDims,\n\t\t\tvoxelSize: voxelSize,\n\t\t\tshowImport: false,\n\t\t\tready: true,\n\t\t\tglobalHistogram: hist,\n\t\t\tlabelsHistogram: histLabels\n\t\t})\n\t}\n\n\thandleToggleFullscreen() {\n\t\tif (!this.state.fullscreen) {\n\t\t\tlet elem = document.documentElement;\n\t\t\tif (elem.requestFullscreen) {\n\t\t\t\telem.requestFullscreen();\n\t\t\t} else if (elem.webkitRequestFullscreen) {\n\t\t\t\telem.webkitRequestFullscreen();\n\t\t\t} else if (elem.msRequestFullscreen) {\n\t\t\t\telem.msRequestFullscreen();\n\t\t\t}\n\t\t} else {\n\t\t\tif (document.exitFullscreen) {\n\t\t\t\tdocument.exitFullscreen();\n\t\t\t} else if (document.webkitExitFullscreen) {\n\t\t\t\tdocument.webkitExitFullscreen();\n\t\t\t} else if (document.msExitFullscreen) {\n\t\t\t\tdocument.msExitFullscreen();\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfullscreen: !this.state.fullscreen\n\t\t})\n\t}\n\n\thandleToggleSidebar() {\n\t\tthis.setState({\n\t\t\tshowSidebar: !this.state.showSidebar\n\t\t})\n\t}\n\n\thandleCompartmentSelection(index) {\n\t\tthis.setState({\n\t\t\tcompartmentIndex: index\n\t\t})\n\t}\n\n\thandleDisplaySegmentation(value) {\n\t\tthis.setState({\n\t\t\tdisplaySegmentation: value\n\t\t})\n\t}\n\n\thandleDisplayProtein(value) {\n\t\tthis.setState({\n\t\t\tdisplayProtein: value\n\t\t})\n\t}\n\n\trender() {\n\t\t/*\n\t\tlet volumeSize = [\n\t\t\tthis.state.bufferDims[0] * this.state.voxelSize[0],\n\t\t\tthis.state.bufferDims[1] * this.state.voxelSize[1],\n\t\t\tthis.state.bufferDims[2] * this.state.voxelSize[2]\n\t\t]*/\n\n\t\t//let volumeSize = [0.0, 0.0, 0.0];\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{/*\n\t\t\t\t<Import\n\t\t\t\t\tshow={this.state.showImport}\n\t\t\t\t\tonAbort={this.handleAbortImport}\n\t\t\t\t\tonComplete={this.handleCompleteImport}\n\t\t\t\t/>\n\t\t\t\t*/}\n\t\t\t\t<Overlay>\n\t\t\t\t\t<Toolbar\n\t\t\t\t\t\tfullscreen={this.state.fullscreen}\n\t\t\t\t\t\tonImportData={this.handleShowImport}\n\t\t\t\t\t\tonToggleFullscreen={this.handleToggleFullscreen}\n\t\t\t\t\t\tonToggleSidebar={this.handleToggleSidebar}\n\t\t\t\t\t/>\n\t\t\t\t\t<Sidebar\n\t\t\t\t\t\topen={this.state.showSidebar}\n\t\t\t\t\t\tnumCompartments={this.state.sdfBuffers.length}\n\t\t\t\t\t\tonCompartmentSelection={this.handleCompartmentSelection}\n\t\t\t\t\t\tselection={this.state.compartmentIndex}\n\t\t\t\t\t\tonDisplaySegmentation={this.handleDisplaySegmentation}\n\t\t\t\t\t\tonDisplayProtein={this.handleDisplayProtein}\n\t\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\t/>\n\t\t\t\t</Overlay>\n\t\t\t\t{/*\n\t\t\t\t<Views\n\t\t\t\t\tsdf={{buffers: this.state.sdfBuffers, dims: this.state.bufferDims}}\n\t\t\t\t\tprotein={{buffer: this.state.proteinBuffer, dims: this.state.bufferDims}}\n\t\t\t\t\tvolumeSize={volumeSize}\n\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\tisovalue={0}\n\t\t\t\t\tcompartmentIndex={this.state.compartmentIndex}\n\t\t\t\t\tready={this.state.ready}\n\t\t\t\t\tonClickImport={this.handleShowImport}\n\t\t\t\t\tlocalHistogram={this.state.localHistogram}\n\t\t\t\t\tglobalHistogram={this.state.globalHistogram}\n\t\t\t\t\tlabelsHistogram={this.state.labelsHistogram}\n\t\t\t\t/>\n\t\t\t\t*/}\n\t\t\t</>\n\t\t)\n\t}\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\nimport Main from './ui/Main';\n\nfunction App() {\n  return(\n      <div className=\"App\">\n        <Main />\n     </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}