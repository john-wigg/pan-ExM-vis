{"version":3,"sources":["workers/sdf-worker.js","workers/tiff-worker.js","ui/Toolbar.js","ui/Sidebar.js","ui/Overlay.js","ui/Main.js","App.js","reportWebVitals.js","index.js","tiff.js","ui/Import.js","ui/InputVector.js","ui/ImportDialog.js","ui/LabeledProgressBar.js","ui/ImportProgress.js"],"names":["module","exports","Toolbar","fullscreenIcon","this","props","fullscreen","ButtonToolbar","className","ButtonGroup","Button","onClick","onToggleSidebar","onImportData","onToggleFullscreen","Component","Sidebar","handleSelectCompartmet","bind","handleChangeDisplaySegmentation","handleChangeDisplayProtein","index","onCompartmentSelection","e","onDisplaySegmentation","target","checked","onDisplayProtein","dropdownItems","Dropdown","Item","i","push","numCompartments","dropdownText","selection","Row","md","Col","Collapse","in","open","Card","Body","Form","Check","Input","displayProtein","disabled","onChange","Label","displaySegmentation","Range","Toggle","Menu","Overlay","children","Main","state","showSidebar","showImport","voxelSize","bufferDims","sdfBuffers","proteinBuffer","ready","compartmentIndex","globalHistogram","labelsHistogram","localHistogram","handleShowImport","handleToggleFullscreen","handleToggleSidebar","handleAbortImport","handleCompleteImport","handleCompartmentSelection","handleDisplaySegmentation","handleDisplayProtein","setState","hist","histLabels","document","exitFullscreen","webkitExitFullscreen","msExitFullscreen","elem","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","value","Import","show","onAbort","onComplete","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","Tiff","buffer","pixels","Uint8Array","width","height","depth","bits","file","a","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onload","readerEvent","result","onerror","_readerEvent","error","onabort","ifd","UTIF","Object","keys","Error","properties","t256","t257","t258","t277","sliceProperties","JSON","stringify","onError","onProgress","decodeTiffBuffer","Comlink","Worker","name","type","tiffProtein","tiffSegmentation","proteinProgress","segmentationProgress","sdfProgress","proteinError","segmentationError","sdfError","step","preImportError","handleImport","handleClose","onProteinProgress","onSegmentationProgress","onProteinError","onSegmentationError","onSdfProgress","onSdfError","progress","fileProtein","fileSegmentation","decode","reducer","accumulator","currentValue","Math","max","reduce","promises","Array","p","b","worker","sdf","all","Float32Array","area","parseFloat","x","y","z","onImport","onClose","InputVector","handleChangeX","handleChangeY","handleChangeZ","InputGroup","Text","Control","placeholder","ImportDialog","working","handleClickImport","handleChangeFileProtein","handleChangeFileSegmentation","handleChangeVoxelSize","files","formValid","alert","Alert","variant","Modal","onHide","Header","closeButton","Title","Group","Footer","LabeledProgressBar","animated","ProgressBar","style","clipPath","label","striped","now","ImportProgress","backdrop"],"mappings":"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","file":"static/js/main.0c2d32ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/js/sdf-worker.d19c0e83.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/tiff-worker.86009c6a.chunk.worker.js\"","import React, { Component } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nclass Toolbar extends Component {\n\trender() {\n\t\tlet fullscreenIcon;\n\t\tif (this.props.fullscreen) fullscreenIcon = \"bi-fullscreen-exit\";\n\t\telse fullscreenIcon = \"bi-arrows-fullscreen\";\n\t\treturn (\n\t\t\t<ButtonToolbar className=\"justify-content-between\">\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleSidebar}\n\t\t\t\t><i className=\"bi-tools\"></i></Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onImportData}\n\t\t\t\t>Import Data</Button>\n\t\t\t</ButtonGroup>\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleFullscreen}\n\t\t\t\t><i className={fullscreenIcon}></i></Button>\n\t\t\t</ButtonGroup>\n\t\t\t</ButtonToolbar>\n\t\t)\n\t}\n}\n\nexport default Toolbar","import React, { Component } from 'react'\n\nimport Col from 'react-bootstrap/Col';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Card from 'react-bootstrap/Card';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\nclass Sidebar extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleSelectCompartmet = this.handleSelectCompartmet.bind(this);\n        this.handleChangeDisplaySegmentation = this.handleChangeDisplaySegmentation.bind(this);\n        this.handleChangeDisplayProtein = this.handleChangeDisplayProtein.bind(this);\n\t}\n\n    handleSelectCompartmet(index) {\n        this.props.onCompartmentSelection(index);\n    }\n\n    handleChangeDisplaySegmentation(e) {\n        this.props.onDisplaySegmentation(e.target.checked);\n    }\n\n    handleChangeDisplayProtein(e) {\n        this.props.onDisplayProtein(e.target.checked);\n    }\n\n\trender() {\n        let dropdownItems = [\n        <Dropdown.Item\n            onClick={() => this.handleSelectCompartmet(0)}\n        >All Compartments</Dropdown.Item>]\n        for (var i = 0; i < this.props.numCompartments-1; ++i) {\n            let index = i;\n            dropdownItems.push(\n            <Dropdown.Item\n                onClick={() => this.handleSelectCompartmet(index+1)}\n            >Compartment {index+1}</Dropdown.Item>);\n        }\n\n        let dropdownText = \"\";\n        if (this.props.numCompartments === 0) dropdownText = \"No Compartment Data\"\n        else if (this.props.selection === 0) dropdownText = \"All Compartments\";\n        else dropdownText = \"Compartment \" + this.props.selection;\n\t\treturn (\n            <Row md={3}>\n                <Col>\n                    <Collapse in={this.props.open}>\n                        <Card>\n                            <Card.Body>\n                                <Form>\n                                    <Form.Check className=\"form-switch\">\n                                        <Form.Check.Input\n                                            checked={this.props.displayProtein}\n                                            disabled={this.props.numCompartments===0}\n                                            onChange={this.handleChangeDisplayProtein}\n                                        />\n                                        <Form.Check.Label>Display Protein</Form.Check.Label>\n                                    </Form.Check>\n                                    <Form.Check className=\"form-switch\">\n                                        <Form.Check.Input\n                                            checked={this.props.displaySegmentation}\n                                            disabled={this.props.numCompartments===0}\n                                            onChange={this.handleChangeDisplaySegmentation}\n                                        />\n                                        <Form.Check.Label>Display Segmentation</Form.Check.Label>\n                                    </Form.Check>\n                                    <Form.Range\n                                        disabled={this.props.numCompartments===0}\n                                        \n                                    />\n                                    <Dropdown>\n                                        <Dropdown.Toggle disabled={this.props.numCompartments===0}>\n                                            {dropdownText}\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            {dropdownItems}\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </Form>\n                            </Card.Body>\n                        </Card>\n                    </Collapse>\n                </Col>\n            </Row>\n\t\t)\n\t}\n}\n\nexport default Sidebar;","const Overlay = (props) => {\n    return <div className=\"overlay d-grid gap-3\">\n        {props.children}\n    </div>\n}\n\nexport default Overlay","import React, { Component } from 'react'\n\nimport Import from './Import'\nimport Toolbar from './Toolbar';\nimport Sidebar from './Sidebar';\nimport Overlay from './Overlay';\n//import Views from './Views'\n\nclass Main extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tfullscreen: false,\n\t\t\tshowSidebar: false,\n\t\t\tshowImport: false,\n\t\t\tvoxelSize: [0, 0, 0],\n\t\t\tbufferDims: [0, 0, 0],\n\t\t\tsdfBuffers: [],\n\t\t\tproteinBuffer: \"\",\n\t\t\tready: false,\n\t\t\tcompartmentIndex: 0,\n\t\t\tdisplaySegmentation: true,\n\t\t\tdisplayProtein: true,\n\t\t\tglobalHistogram: [],\n\t\t\tlabelsHistogram: [],\n\t\t\tlocalHistogram: []\n\t\t}\n\t\t\n\t\tthis.handleShowImport = this.handleShowImport.bind(this);\n\t\tthis.handleToggleFullscreen = this.handleToggleFullscreen.bind(this);\n\t\tthis.handleToggleSidebar = this.handleToggleSidebar.bind(this);\n\t\tthis.handleAbortImport = this.handleAbortImport.bind(this);\n\t\tthis.handleCompleteImport = this.handleCompleteImport.bind(this);\n\t\tthis.handleCompartmentSelection = this.handleCompartmentSelection.bind(this);\n\t\tthis.handleDisplaySegmentation = this.handleDisplaySegmentation.bind(this);\n\t\tthis.handleDisplayProtein = this.handleDisplayProtein.bind(this);\n\t}\n\n\thandleShowImport() {\n\t\tthis.setState({\n\t\t\tshowImport: true\n\t\t});\n\t}\n\n\thandleAbortImport() {\n\t\tthis.setState({\n\t\t\tshowImport: false\n\t\t});\n\t}\n\n\thandleCompleteImport(sdfBuffers, proteinBuffer, bufferDims, voxelSize, hist, histLabels) {\n\t\tthis.setState({\n\t\t\tsdfBuffers: sdfBuffers,\n\t\t\tproteinBuffer: proteinBuffer,\n\t\t\tbufferDims: bufferDims,\n\t\t\tvoxelSize: voxelSize,\n\t\t\tshowImport: false,\n\t\t\tready: true,\n\t\t\tglobalHistogram: hist,\n\t\t\tlabelsHistogram: histLabels\n\t\t})\n\t}\n\n\thandleToggleFullscreen() {\n\t\tif (!this.state.fullscreen) {\n\t\t\tlet elem = document.documentElement;\n\t\t\tif (elem.requestFullscreen) {\n\t\t\t\telem.requestFullscreen();\n\t\t\t} else if (elem.webkitRequestFullscreen) {\n\t\t\t\telem.webkitRequestFullscreen();\n\t\t\t} else if (elem.msRequestFullscreen) {\n\t\t\t\telem.msRequestFullscreen();\n\t\t\t}\n\t\t} else {\n\t\t\tif (document.exitFullscreen) {\n\t\t\t\tdocument.exitFullscreen();\n\t\t\t} else if (document.webkitExitFullscreen) {\n\t\t\t\tdocument.webkitExitFullscreen();\n\t\t\t} else if (document.msExitFullscreen) {\n\t\t\t\tdocument.msExitFullscreen();\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfullscreen: !this.state.fullscreen\n\t\t})\n\t}\n\n\thandleToggleSidebar() {\n\t\tthis.setState({\n\t\t\tshowSidebar: !this.state.showSidebar\n\t\t})\n\t}\n\n\thandleCompartmentSelection(index) {\n\t\tthis.setState({\n\t\t\tcompartmentIndex: index\n\t\t})\n\t}\n\n\thandleDisplaySegmentation(value) {\n\t\tthis.setState({\n\t\t\tdisplaySegmentation: value\n\t\t})\n\t}\n\n\thandleDisplayProtein(value) {\n\t\tthis.setState({\n\t\t\tdisplayProtein: value\n\t\t})\n\t}\n\n\trender() {\n\t\t/*\n\t\tlet volumeSize = [\n\t\t\tthis.state.bufferDims[0] * this.state.voxelSize[0],\n\t\t\tthis.state.bufferDims[1] * this.state.voxelSize[1],\n\t\t\tthis.state.bufferDims[2] * this.state.voxelSize[2]\n\t\t]*/\n\n\t\t//let volumeSize = [0.0, 0.0, 0.0];\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Import\n\t\t\t\t\tshow={this.state.showImport}\n\t\t\t\t\tonAbort={this.handleAbortImport}\n\t\t\t\t\tonComplete={this.handleCompleteImport}\n\t\t\t\t/>\n\t\t\t\t<Overlay>\n\t\t\t\t\t<Toolbar\n\t\t\t\t\t\tfullscreen={this.state.fullscreen}\n\t\t\t\t\t\tonImportData={this.handleShowImport}\n\t\t\t\t\t\tonToggleFullscreen={this.handleToggleFullscreen}\n\t\t\t\t\t\tonToggleSidebar={this.handleToggleSidebar}\n\t\t\t\t\t/>\n\t\t\t\t\t<Sidebar\n\t\t\t\t\t\topen={this.state.showSidebar}\n\t\t\t\t\t\tnumCompartments={this.state.sdfBuffers.length}\n\t\t\t\t\t\tonCompartmentSelection={this.handleCompartmentSelection}\n\t\t\t\t\t\tselection={this.state.compartmentIndex}\n\t\t\t\t\t\tonDisplaySegmentation={this.handleDisplaySegmentation}\n\t\t\t\t\t\tonDisplayProtein={this.handleDisplayProtein}\n\t\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\t/>\n\t\t\t\t</Overlay>\n\t\t\t\t{/*\n\t\t\t\t<Views\n\t\t\t\t\tsdf={{buffers: this.state.sdfBuffers, dims: this.state.bufferDims}}\n\t\t\t\t\tprotein={{buffer: this.state.proteinBuffer, dims: this.state.bufferDims}}\n\t\t\t\t\tvolumeSize={volumeSize}\n\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\tisovalue={0}\n\t\t\t\t\tcompartmentIndex={this.state.compartmentIndex}\n\t\t\t\t\tready={this.state.ready}\n\t\t\t\t\tonClickImport={this.handleShowImport}\n\t\t\t\t\tlocalHistogram={this.state.localHistogram}\n\t\t\t\t\tglobalHistogram={this.state.globalHistogram}\n\t\t\t\t\tlabelsHistogram={this.state.labelsHistogram}\n\t\t\t\t/>\n\t\t\t\t*/}\n\t\t\t</>\n\t\t)\n\t}\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\nimport Main from './ui/Main';\n\nfunction App() {\n  return(\n      <div className=\"App\">\n        <Main />\n     </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as UTIF from 'utif';\n\nimport * as Comlink from 'comlink';\n\nclass Tiff {\n    constructor() {\n        this.buffer = null;\n        this.pixels = new Uint8Array();\n        this.width = 0;\n        this.height = 0;\n        this.depth = 0;\n        this.bits = 0;\n    }\n\n    async open(file) {\n        let buffer = await (() => {\n            return new Promise(function(resolve, reject) {\n                var reader = new FileReader();\n                reader.readAsArrayBuffer(file)\n            \n                reader.onload = readerEvent => {\n                    resolve(readerEvent.target.result);\n                }\n        \n                reader.onerror = _readerEvent => {\n                    reject(reader.error);\n                }\n        \n                reader.onabort = _readerEvent => {\n                    reject(\"FileReader was aborted!\");\n                }\n            });\n        })();\n\n        let ifd = UTIF.decode(buffer);\n        if (Object.keys(ifd[0]).length === 0) {\n            throw new Error(\"Could not decode TIFF file!\");\n        }\n\n        let properties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[0]);\n    \n        if (properties.t277 !== 1) {\n            throw new Error(\"Only grayscale images are supported.\");\n        }\n    \n        if (properties.t258 !== 8) {\n            throw new Error(\"Only images with bit depth 8 are supported.\");\n        }\n    \n        for (var i = 0; i < ifd.length; ++i) {\n            let sliceProperties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[i]);\n    \n            if (JSON.stringify(properties) !== JSON.stringify(sliceProperties)) {\n                throw new Error(\"Slice \" + i + \" has incorrect dimensions or pixel depth.\");\n            }\n        }\n\n        this.buffer = buffer;\n        this.width = properties.t256[0];\n        this.height = properties.t257[0];\n        this.depth = ifd.length;\n        this.bits = properties.t258[0];\n    };\n\n    async decode(onError, onProgress) {\n        const decodeTiffBuffer = Comlink.wrap(new Worker('./workers/tiff-worker.js', {\n            name: 'tiff-worker',\n            type: 'module'\n          }));\n        this.pixels = await decodeTiffBuffer(this.buffer, Comlink.proxy(onError), Comlink.proxy(onProgress));\n    };\n}\n\nexport { Tiff };","import React, { Component } from 'react'\n\nimport ImportDialog from './ImportDialog';\nimport ImportProgress from './ImportProgress';\n\nimport * as Comlink from 'comlink';\n\nimport { Tiff } from '../tiff';\n\nclass Import extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tiffProtein: \"\",\n            tiffSegmentation: \"\",\n            voxelSize: \"\",\n            proteinProgress: 0,\n            segmentationProgress: 0,\n            sdfProgress: 0,\n            proteinError: \"\",\n            segmentationError: \"\",\n            sdfError: \"\",\n            step: \"dialog\",\n            preImportError: \"\"\n        }\n\n        this.handleImport = this.handleImport.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.onProteinProgress = this.onProteinProgress.bind(this);\n        this.onSegmentationProgress = this.onSegmentationProgress.bind(this);\n        this.onProteinError = this.onProteinError.bind(this);\n        this.onSegmentationError = this.onSegmentationError.bind(this);\n        this.onSdfProgress = this.onSdfProgress.bind(this);\n        this.onSdfError = this.onSdfError.bind(this);\n    }\n\n    onProteinProgress(progress) {\n        this.setState({\n            proteinProgress: progress\n        })\n    }\n\n    onSegmentationProgress(progress) {\n        this.setState({\n            segmentationProgress: progress\n        })\n    }\n\n    onProteinError(error) {\n        this.setState({\n            proteinError: error\n        })\n    }\n\n    onSegmentationError(error) {\n        this.setState({\n            segmentationError: error\n        })\n    }\n\n    onSdfProgress(progress) {\n        this.setState({\n            sdfProgress: progress\n        })\n    }\n\n    onSdfError(error) {\n        this.setState({\n            sdfError: error\n        })\n    }\n\n    async handleImport(fileProtein, fileSegmentation, voxelSize) {\n        let tiffProtein = new Tiff();\n        let tiffSegmentation = new Tiff();\n    \n        try {\n          await tiffProtein.open(fileProtein);\n          await tiffSegmentation.open(fileSegmentation);\n        } catch (e) {\n          this.setState({\n            preImportError: e\n          });\n          return;\n        }\n    \n        if (tiffProtein.width !== tiffSegmentation.width || tiffProtein.height !== tiffSegmentation.height || tiffProtein.depth !== tiffSegmentation.depth) {\n          this.setState({\n            preImportError: \"Please make sure the protein and the segmentation data have the same dimensions.\"\n          });\n          return;\n        }\n\n        this.setState({\n            step: \"import\",\n            voxelSize: voxelSize,\n            tiffProtein: tiffProtein,\n            tiffSegmentation: tiffSegmentation,\n            segmentationProgress: 0,\n            proteinProgress: 0,\n            sdfProgress: 0,\n            segmentationError: \"\",\n            proteinError: \"\",\n            sdfError: \"\"\n        });\n        \n        // We can decode the TIFFs in parallel.\n        await tiffProtein.decode(this.onProteinError, this.onProteinProgress);\n        await tiffSegmentation.decode(this.onSegmentationError, this.onSegmentationProgress);\n        const reducer = (accumulator, currentValue) => Math.max(accumulator, currentValue);\n        var numCompartments = tiffSegmentation.pixels.reduce(reducer);\n\n        let promises = [];\n        let progress = new Array(numCompartments+1);\n\n        for (var i = 0; i < numCompartments+1; ++i) {\n            const target = i;\n            const onProgress = (p) => {\n                progress[target] = p * 100;\n                this.onSdfProgress(progress.reduce((a, b) => a + b, 0) / (numCompartments + 1));\n            }\n            promises.push(new Promise(function(resolve, reject) {\n                const worker = new Worker('../workers/sdf-worker.js', {\n                    name: 'sdf-worker',\n                    type: 'module'\n                });\n                const sdf = Comlink.wrap(worker);\n                let result = sdf(tiffSegmentation, voxelSize, target, Comlink.proxy(onProgress));\n                resolve(result);\n            }));\n        }\n\n        const sdfBuffers = await Promise.all(promises);\n        this.onSdfProgress(100);\n\n        // Compute global histogram.\n        const bitDepth = 8;\n        let hist = new Float32Array(2**bitDepth);\n        let area = new Float32Array(2**bitDepth);\n    \n        for (let i = 0; i < sdfBuffers[0].length; ++i) {\n            hist[sdfBuffers[0][i]] += tiffProtein.pixels[i];\n            area[sdfBuffers[0][i]] += 1.0;\n    \n        }\n    \n        for (let i = 0; i < hist.length; ++i) {\n            hist[i] = hist[i]/area[i];\n        }\n\n        let histLabels = [];\n        for (let i = 0; i < 256; ++i) {\n            histLabels.push(i / 10.0 - 5.0);\n        }\n    \n        this.setState({\n            step: \"dialog\"\n        });\n\n        this.props.onComplete(sdfBuffers, tiffProtein.pixels, [tiffProtein.width, tiffProtein.height, tiffProtein.depth],\n                              [parseFloat(voxelSize.x), parseFloat(voxelSize.y), parseFloat(voxelSize.z)],\n                              hist, histLabels);\n    }\n\n    handleClose() {\n        this.props.onAbort();\n    }\n\n    render() {\n        return (\n            <>\n                <ImportDialog\n                    show={this.state.step === \"dialog\" && this.props.show}\n                    error={this.state.preImportError}\n                    onImport={this.handleImport}\n                    onClose={this.handleClose}\n                />\n                <ImportProgress\n                    show={this.state.step === \"import\" && this.props.show}\n                    proteinProgress={this.state.proteinProgress}\n                    segmentationProgress={this.state.segmentationProgress}\n                    sdfProgress={this.state.sdfProgress}\n                    proteinError={this.state.proteinError}\n                    segmentationError={this.state.segmentationError}\n                    sdfError={this.state.sdfError}\n                />\n            </>\n        )\n    }\n}\n\nexport default Import","import React, {Component} from 'react'\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nclass InputVector extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n        this.handleChangeX = this.handleChangeX.bind(this);\n        this.handleChangeY = this.handleChangeY.bind(this);\n        this.handleChangeZ = this.handleChangeZ.bind(this);\n\t}\n\n    handleChangeX(e) {\n        this.props.onChange({\n            x: e.target.value,\n            y: this.props.value.y,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeY(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: e.target.value,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeZ(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: this.props.value.y,\n            z: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Text>Voxel Size</InputGroup.Text>\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"x\"\n                    value={this.props.value.x}\n                    onChange={this.handleChangeX}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"y\"\n                    value={this.props.value.y}\n                    onChange={this.handleChangeY}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"z\"\n                    value={this.props.value.z}\n                    onChange={this.handleChangeZ}\n                />\n            </InputGroup>\n        )\n    }\n}\n\nexport default InputVector","import React, {Component} from 'react'\n\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\nimport InputVector from './InputVector'\n\nclass ImportDialog extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\n    this.state = {\n      fileProtein: \"\",\n      fileSegmentation: \"\",\n      voxelSize: {x: \"\", y: \"\", z: \"\"},\n      working: false\n    }\n\n    this.handleClickImport = this.handleClickImport.bind(this);\n\n    this.handleChangeFileProtein = this.handleChangeFileProtein.bind(this);\n    this.handleChangeFileSegmentation = this.handleChangeFileSegmentation.bind(this);\n    this.handleChangeVoxelSize = this.handleChangeVoxelSize.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\t}\n\n  handleChangeFileProtein(e) {\n    this.setState({\n      fileProtein: e.target.files[0]\n    })\n  }\n\n  handleChangeFileSegmentation(e) {\n    this.setState({\n      fileSegmentation: e.target.files[0]\n    })\n  }\n\n  handleChangeVoxelSize(value) {\n    this.setState({\n      voxelSize: value\n    })\n  }\n\n  async handleClickImport(e) {\n    this.setState({\n      working: true\n    })\n\n    this.props.onImport(this.state.fileProtein, this.state.fileSegmentation, this.state.voxelSize);\n\n    this.setState({\n      working: false\n    })\n  }\n\n  handleClose(e) {\n    this.props.onClose();\n  }\n\n  render() {\n    let formValid;\n    if (this.state.fileProtein\n        && this.state.fileSegmentation\n        && this.state.voxelSize.x\n        && this.state.voxelSize.y\n        && this.state.voxelSize.z\n        && !this.state.working) formValid = true;\n    else formValid = false;\n\n    let alert;\n    if (this.props.error) {\n      alert = <Alert variant=\"danger\">{this.props.error}</Alert>\n    }\n\n    return (\n        <Modal show={this.props.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Import Data</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Protein Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileProtein}\n                    />\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Segmentation Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileSegmentation}\n                    />\n                </Form.Group>\n                <InputVector\n                  value={this.state.voxelSize}\n                  onChange={this.handleChangeVoxelSize}\n                />\n            </Form>\n            {alert}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              disabled={!formValid}\n              onClick={this.handleClickImport}\n            >\n              Import\n            </Button>\n          </Modal.Footer>\n        </Modal>\n    )\n  }\n}\n\nexport default ImportDialog","import React, {Component} from 'react';\n\nimport \"../App.css\";\n\nimport Alert from 'react-bootstrap/Alert';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nclass LabeledProgressBar extends Component {\n\trender() {\n\t\tlet variant = \"\"\n\t\tif (this.props.progress >= 100) variant = \"success\";\n\t\tif (this.props.error) variant = \"danger\";\n\n\t\tlet animated = (this.props.progress < 100 && !this.props.error);\n\n\t\tlet alert;\n\t\tif (this.props.error) {\n\t\t\talert = <Alert variant=\"danger\">{this.props.error}</Alert>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"labeled-progress-bar\">\n\t\t\t\t<ProgressBar>\n\t\t\t\t\t<div className=\"label-front\" style={{clipPath: `inset(0 ${100-this.props.progress}% 0 0)`}}>{this.props.label}</div>\n\t\t\t\t\t<div className=\"label-back\">{this.props.label}</div>\n\t\t\t\t\t<ProgressBar striped variant={variant} animated={animated} now={this.props.progress} />\n\t\t\t\t</ProgressBar>\n\t\t\t\t{alert}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default LabeledProgressBar;","import React, {Component} from 'react'\n\nimport Modal from 'react-bootstrap/Modal';\n\nimport LabeledProgressBar from './LabeledProgressBar';\n\nclass ImportProgress extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// TODO: Add all data here as state.\n\t\tthis.state = {\n\t\t\tproteinProgress: 0,\n\t\t\tsegmentationProgress: 0,\n\t\t\tsdfProgress: 0,\n\t\t\tproteinError: \"\",\n\t\t\tsegmentationError: \"\",\n\t\t\tsdfError: \"\"\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n  \n\tcomponentWillUnmount() {\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal backdrop=\"static\" show={this.props.show}>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>Importing Data...</Modal.Title>\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Body>\n\t\t\t\t<div className=\"d-grid gap-3\">\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.proteinProgress}\n\t\t\t\t\t\terror={this.props.proteinError}\n\t\t\t\t\t\tlabel=\"Decode Protein TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.segmentationProgress}\n\t\t\t\t\t\terror={this.props.segmentationError}\n\t\t\t\t\t\tlabel=\"Decode Segmentation TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.sdfProgress}\n\t\t\t\t\t\terror={this.props.sdfError}\n\t\t\t\t\t\tlabel=\"Compute Distance Fields...\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nexport default ImportProgress"],"sourceRoot":""}