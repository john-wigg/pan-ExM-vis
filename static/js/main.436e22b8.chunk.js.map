{"version":3,"sources":["tiff.js","renderers/volume/default/shaders/volume_renderer_vert.glsl","ui/Import.js","ui/InputVector.js","ui/ImportDialog.js","ui/LabeledProgressBar.js","ui/ImportProgress.js","workers/sdf-worker.js","workers/tiff-worker.js","renderers/volume/default/shaders/volume_renderer_frag.glsl","renderers/volume/default/shaders/post_vert.glsl","renderers/volume/default/shaders/post_frag.glsl","renderers/map/shaders/mip_vert.glsl","renderers/map/shaders/mip_frag.glsl","renderers/map/shaders/selection_vert.glsl","renderers/map/shaders/selection_frag.glsl","renderers/map/shaders/map_vert.glsl","renderers/map/shaders/map_frag.glsl","ui/Toolbar.js","ui/Sidebar.js","ui/Overlay.js","renderers/volume/default/volume_renderer_default.js","renderers/renderer.js","ui/Canvas.js","ui/Plots.js","ui/Views.js","ui/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Tiff","this","buffer","pixels","Uint8Array","width","height","depth","bits","file","a","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onload","readerEvent","target","result","onerror","_readerEvent","error","onabort","ifd","UTIF","Object","keys","length","Error","properties","t256","t257","t258","t277","i","sliceProperties","JSON","stringify","onError","onProgress","decodeTiffBuffer","Comlink","Worker","name","type","module","exports","Import","props","state","tiffProtein","tiffSegmentation","voxelSize","proteinProgress","segmentationProgress","sdfProgress","proteinError","segmentationError","sdfError","step","preImportError","handleImport","bind","handleClose","onProteinProgress","onSegmentationProgress","onProteinError","onSegmentationError","onSdfProgress","onSdfError","progress","setState","fileProtein","fileSegmentation","open","decode","reducer","accumulator","currentValue","Math","max","numCompartments","reduce","promises","Array","p","b","push","worker","sdf","all","sdfBuffers","hist","Float32Array","area","histLabels","onComplete","parseFloat","x","y","z","onAbort","show","onImport","onClose","Component","InputVector","handleChangeX","handleChangeY","handleChangeZ","e","onChange","value","InputGroup","className","Text","Form","Control","placeholder","ImportDialog","working","handleClickImport","handleChangeFileProtein","handleChangeFileSegmentation","handleChangeVoxelSize","files","formValid","alert","Alert","variant","Modal","onHide","Header","closeButton","Title","Body","Group","Label","Footer","Button","disabled","onClick","LabeledProgressBar","animated","ProgressBar","style","clipPath","label","striped","now","ImportProgress","backdrop","Toolbar","fullscreenIcon","fullscreen","ButtonToolbar","ButtonGroup","onToggleSidebar","onImportData","onToggleFullscreen","Sidebar","handleSelectCompartmet","handleChangeDisplaySegmentation","handleChangeDisplayProtein","index","onCompartmentSelection","onDisplaySegmentation","checked","onDisplayProtein","dropdownItems","Dropdown","Item","dropdownText","selection","Row","md","Col","Collapse","in","Card","Check","Input","displayProtein","displaySegmentation","Range","Toggle","Menu","Overlay","children","THREE","DefaultUp","stats","Stats","showPanel","document","body","appendChild","dom","volumeRenderer","mapRenderer","Canvas","canvasRef","useRef","useEffect","mainView","mapView","ready","arrays","dims","textures","tex","format","minFilter","magFilter","unpackAlignment","setDistanceData","Renderer","buffers","array","texture","setProteinData","protein","size","volumeSize","setVolumeSize","setDisplayProtein","setDisplayCompartments","isovalue","setIsovalue","compartmentIndex","setCompartmentIndex","ref","Plots","data","labels","labelsHistogram","datasets","backgroundColor","borderColor","globalHistogram","localHistogram","options","scales","yAxes","ticks","beginAtZero","maintainAspectRatio","Views","mainRef","mapRef","useState","setMainView","setMapView","current","importPrompt","onClickImport","Main","showSidebar","showImport","bufferDims","proteinBuffer","handleShowImport","handleToggleFullscreen","handleToggleSidebar","handleAbortImport","handleCompleteImport","handleCompartmentSelection","handleDisplaySegmentation","handleDisplayProtein","exitFullscreen","webkitExitFullscreen","msExitFullscreen","elem","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.436e22b8.chunk.js","sourcesContent":["import * as UTIF from 'utif';\n\nimport * as Comlink from 'comlink';\n\nclass Tiff {\n    constructor() {\n        this.buffer = null;\n        this.pixels = new Uint8Array();\n        this.width = 0;\n        this.height = 0;\n        this.depth = 0;\n        this.bits = 0;\n    }\n\n    async open(file) {\n        let buffer = await (() => {\n            return new Promise(function(resolve, reject) {\n                var reader = new FileReader();\n                reader.readAsArrayBuffer(file)\n            \n                reader.onload = readerEvent => {\n                    resolve(readerEvent.target.result);\n                }\n        \n                reader.onerror = _readerEvent => {\n                    reject(reader.error);\n                }\n        \n                reader.onabort = _readerEvent => {\n                    reject(\"FileReader was aborted!\");\n                }\n            });\n        })();\n\n        let ifd = UTIF.decode(buffer);\n        if (Object.keys(ifd[0]).length === 0) {\n            throw new Error(\"Could not decode TIFF file!\");\n        }\n\n        let properties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[0]);\n    \n        if (properties.t277 !== 1) {\n            throw new Error(\"Only grayscale images are supported.\");\n        }\n    \n        if (properties.t258 !== 8) {\n            throw new Error(\"Only images with bit depth 8 are supported.\");\n        }\n    \n        for (var i = 0; i < ifd.length; ++i) {\n            let sliceProperties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[i]);\n    \n            if (JSON.stringify(properties) !== JSON.stringify(sliceProperties)) {\n                throw new Error(\"Slice \" + i + \" has incorrect dimensions or pixel depth.\");\n            }\n        }\n\n        this.buffer = buffer;\n        this.width = properties.t256[0];\n        this.height = properties.t257[0];\n        this.depth = ifd.length;\n        this.bits = properties.t258[0];\n    };\n\n    async decode(onError, onProgress) {\n        const decodeTiffBuffer = Comlink.wrap(new Worker('./workers/tiff-worker.js', {\n            name: 'tiff-worker',\n            type: 'module'\n          }));\n        this.pixels = await decodeTiffBuffer(this.buffer, Comlink.proxy(onError), Comlink.proxy(onProgress));\n    };\n}\n\nexport { Tiff };","module.exports = \"in vec4 position;\\nuniform mat4 modelview;\\nuniform mat4 proj;\\nuniform vec3 cameraPos;\\nout vec3 vOrigin;\\nout vec3 vDirection;\\n\\nvoid main() {\\n    vOrigin = vec3( inverse( modelview ) * vec4( 0.0, 0.0, 0.0, 1.0 ) ).xyz;\\n    vDirection = position.xyz - vOrigin;\\n    gl_Position = proj * modelview * position;\\n}\"","import React, { Component } from 'react'\n\nimport ImportDialog from './ImportDialog';\nimport ImportProgress from './ImportProgress';\n\nimport * as Comlink from 'comlink';\n\nimport { Tiff } from '../tiff';\n\nclass Import extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tiffProtein: \"\",\n            tiffSegmentation: \"\",\n            voxelSize: \"\",\n            proteinProgress: 0,\n            segmentationProgress: 0,\n            sdfProgress: 0,\n            proteinError: \"\",\n            segmentationError: \"\",\n            sdfError: \"\",\n            step: \"dialog\",\n            preImportError: \"\"\n        }\n\n        this.handleImport = this.handleImport.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.onProteinProgress = this.onProteinProgress.bind(this);\n        this.onSegmentationProgress = this.onSegmentationProgress.bind(this);\n        this.onProteinError = this.onProteinError.bind(this);\n        this.onSegmentationError = this.onSegmentationError.bind(this);\n        this.onSdfProgress = this.onSdfProgress.bind(this);\n        this.onSdfError = this.onSdfError.bind(this);\n    }\n\n    onProteinProgress(progress) {\n        this.setState({\n            proteinProgress: progress\n        })\n    }\n\n    onSegmentationProgress(progress) {\n        this.setState({\n            segmentationProgress: progress\n        })\n    }\n\n    onProteinError(error) {\n        this.setState({\n            proteinError: error\n        })\n    }\n\n    onSegmentationError(error) {\n        this.setState({\n            segmentationError: error\n        })\n    }\n\n    onSdfProgress(progress) {\n        this.setState({\n            sdfProgress: progress\n        })\n    }\n\n    onSdfError(error) {\n        this.setState({\n            sdfError: error\n        })\n    }\n\n    async handleImport(fileProtein, fileSegmentation, voxelSize) {\n        let tiffProtein = new Tiff();\n        let tiffSegmentation = new Tiff();\n    \n        try {\n          await tiffProtein.open(fileProtein);\n          await tiffSegmentation.open(fileSegmentation);\n        } catch (e) {\n          this.setState({\n            preImportError: e\n          });\n          return;\n        }\n    \n        if (tiffProtein.width !== tiffSegmentation.width || tiffProtein.height !== tiffSegmentation.height || tiffProtein.depth !== tiffSegmentation.depth) {\n          this.setState({\n            preImportError: \"Please make sure the protein and the segmentation data have the same dimensions.\"\n          });\n          return;\n        }\n\n        this.setState({\n            step: \"import\",\n            voxelSize: voxelSize,\n            tiffProtein: tiffProtein,\n            tiffSegmentation: tiffSegmentation,\n            segmentationProgress: 0,\n            proteinProgress: 0,\n            sdfProgress: 0,\n            segmentationError: \"\",\n            proteinError: \"\",\n            sdfError: \"\"\n        });\n        \n        // We can decode the TIFFs in parallel.\n        await tiffProtein.decode(this.onProteinError, this.onProteinProgress);\n        await tiffSegmentation.decode(this.onSegmentationError, this.onSegmentationProgress);\n        const reducer = (accumulator, currentValue) => Math.max(accumulator, currentValue);\n        var numCompartments = tiffSegmentation.pixels.reduce(reducer);\n\n        let promises = [];\n        let progress = new Array(numCompartments+1);\n\n        for (var i = 0; i < numCompartments+1; ++i) {\n            const target = i;\n            const onProgress = (p) => {\n                progress[target] = p * 100;\n                this.onSdfProgress(progress.reduce((a, b) => a + b, 0) / (numCompartments + 1));\n            }\n            promises.push(new Promise(function(resolve, reject) {\n                const worker = new Worker('../workers/sdf-worker.js', {\n                    name: 'sdf-worker',\n                    type: 'module'\n                });\n                const sdf = Comlink.wrap(worker);\n                let result = sdf(tiffSegmentation, voxelSize, target, Comlink.proxy(onProgress));\n                resolve(result);\n            }));\n        }\n\n        const sdfBuffers = await Promise.all(promises);\n        this.onSdfProgress(100);\n\n        // Compute global histogram.\n        const bitDepth = 8;\n        let hist = new Float32Array(2**bitDepth);\n        let area = new Float32Array(2**bitDepth);\n    \n        for (let i = 0; i < sdfBuffers[0].length; ++i) {\n            hist[sdfBuffers[0][i]] += tiffProtein.pixels[i];\n            area[sdfBuffers[0][i]] += 1.0;\n    \n        }\n    \n        for (let i = 0; i < hist.length; ++i) {\n            hist[i] = hist[i]/area[i];\n        }\n\n        let histLabels = [];\n        for (let i = 0; i < 256; ++i) {\n            histLabels.push(i / 10.0 - 5.0);\n        }\n    \n        this.setState({\n            step: \"dialog\"\n        });\n\n        this.props.onComplete(sdfBuffers, tiffProtein.pixels, [tiffProtein.width, tiffProtein.height, tiffProtein.depth],\n                              [parseFloat(voxelSize.x), parseFloat(voxelSize.y), parseFloat(voxelSize.z)],\n                              hist, histLabels);\n    }\n\n    handleClose() {\n        this.props.onAbort();\n    }\n\n    render() {\n        return (\n            <>\n                <ImportDialog\n                    show={this.state.step === \"dialog\" && this.props.show}\n                    error={this.state.preImportError}\n                    onImport={this.handleImport}\n                    onClose={this.handleClose}\n                />\n                <ImportProgress\n                    show={this.state.step === \"import\" && this.props.show}\n                    proteinProgress={this.state.proteinProgress}\n                    segmentationProgress={this.state.segmentationProgress}\n                    sdfProgress={this.state.sdfProgress}\n                    proteinError={this.state.proteinError}\n                    segmentationError={this.state.segmentationError}\n                    sdfError={this.state.sdfError}\n                />\n            </>\n        )\n    }\n}\n\nexport default Import","import React, {Component} from 'react'\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nclass InputVector extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n        this.handleChangeX = this.handleChangeX.bind(this);\n        this.handleChangeY = this.handleChangeY.bind(this);\n        this.handleChangeZ = this.handleChangeZ.bind(this);\n\t}\n\n    handleChangeX(e) {\n        this.props.onChange({\n            x: e.target.value,\n            y: this.props.value.y,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeY(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: e.target.value,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeZ(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: this.props.value.y,\n            z: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Text>Voxel Size</InputGroup.Text>\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"x\"\n                    value={this.props.value.x}\n                    onChange={this.handleChangeX}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"y\"\n                    value={this.props.value.y}\n                    onChange={this.handleChangeY}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"z\"\n                    value={this.props.value.z}\n                    onChange={this.handleChangeZ}\n                />\n            </InputGroup>\n        )\n    }\n}\n\nexport default InputVector","import React, {Component} from 'react'\n\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\nimport InputVector from './InputVector'\n\nclass ImportDialog extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\n    this.state = {\n      fileProtein: \"\",\n      fileSegmentation: \"\",\n      voxelSize: {x: \"\", y: \"\", z: \"\"},\n      working: false\n    }\n\n    this.handleClickImport = this.handleClickImport.bind(this);\n\n    this.handleChangeFileProtein = this.handleChangeFileProtein.bind(this);\n    this.handleChangeFileSegmentation = this.handleChangeFileSegmentation.bind(this);\n    this.handleChangeVoxelSize = this.handleChangeVoxelSize.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\t}\n\n  handleChangeFileProtein(e) {\n    this.setState({\n      fileProtein: e.target.files[0]\n    })\n  }\n\n  handleChangeFileSegmentation(e) {\n    this.setState({\n      fileSegmentation: e.target.files[0]\n    })\n  }\n\n  handleChangeVoxelSize(value) {\n    this.setState({\n      voxelSize: value\n    })\n  }\n\n  async handleClickImport(e) {\n    this.setState({\n      working: true\n    })\n\n    this.props.onImport(this.state.fileProtein, this.state.fileSegmentation, this.state.voxelSize);\n\n    this.setState({\n      working: false\n    })\n  }\n\n  handleClose(e) {\n    this.props.onClose();\n  }\n\n  render() {\n    let formValid;\n    if (this.state.fileProtein\n        && this.state.fileSegmentation\n        && this.state.voxelSize.x\n        && this.state.voxelSize.y\n        && this.state.voxelSize.z\n        && !this.state.working) formValid = true;\n    else formValid = false;\n\n    let alert;\n    if (this.props.error) {\n      alert = <Alert variant=\"danger\">{this.props.error}</Alert>\n    }\n\n    return (\n        <Modal show={this.props.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Import Data</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Protein Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileProtein}\n                    />\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Segmentation Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileSegmentation}\n                    />\n                </Form.Group>\n                <InputVector\n                  value={this.state.voxelSize}\n                  onChange={this.handleChangeVoxelSize}\n                />\n            </Form>\n            {alert}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              disabled={!formValid}\n              onClick={this.handleClickImport}\n            >\n              Import\n            </Button>\n          </Modal.Footer>\n        </Modal>\n    )\n  }\n}\n\nexport default ImportDialog","import React, {Component} from 'react';\n\nimport \"../App.css\";\n\nimport Alert from 'react-bootstrap/Alert';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nclass LabeledProgressBar extends Component {\n\trender() {\n\t\tlet variant = \"\"\n\t\tif (this.props.progress >= 100) variant = \"success\";\n\t\tif (this.props.error) variant = \"danger\";\n\n\t\tlet animated = (this.props.progress < 100 && !this.props.error);\n\n\t\tlet alert;\n\t\tif (this.props.error) {\n\t\t\talert = <Alert variant=\"danger\">{this.props.error}</Alert>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"labeled-progress-bar\">\n\t\t\t\t<ProgressBar>\n\t\t\t\t\t<div className=\"label-front\" style={{clipPath: `inset(0 ${100-this.props.progress}% 0 0)`}}>{this.props.label}</div>\n\t\t\t\t\t<div className=\"label-back\">{this.props.label}</div>\n\t\t\t\t\t<ProgressBar striped variant={variant} animated={animated} now={this.props.progress} />\n\t\t\t\t</ProgressBar>\n\t\t\t\t{alert}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default LabeledProgressBar;","import React, {Component} from 'react'\n\nimport Modal from 'react-bootstrap/Modal';\n\nimport LabeledProgressBar from './LabeledProgressBar';\n\nclass ImportProgress extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// TODO: Add all data here as state.\n\t\tthis.state = {\n\t\t\tproteinProgress: 0,\n\t\t\tsegmentationProgress: 0,\n\t\t\tsdfProgress: 0,\n\t\t\tproteinError: \"\",\n\t\t\tsegmentationError: \"\",\n\t\t\tsdfError: \"\"\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n  \n\tcomponentWillUnmount() {\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal backdrop=\"static\" show={this.props.show}>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>Importing Data...</Modal.Title>\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Body>\n\t\t\t\t<div className=\"d-grid gap-3\">\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.proteinProgress}\n\t\t\t\t\t\terror={this.props.proteinError}\n\t\t\t\t\t\tlabel=\"Decode Protein TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.segmentationProgress}\n\t\t\t\t\t\terror={this.props.segmentationError}\n\t\t\t\t\t\tlabel=\"Decode Segmentation TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.sdfProgress}\n\t\t\t\t\t\terror={this.props.sdfError}\n\t\t\t\t\t\tlabel=\"Compute Distance Fields...\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nexport default ImportProgress","module.exports = __webpack_public_path__ + \"static/js/sdf-worker.d19c0e83.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/tiff-worker.86009c6a.chunk.worker.js\"","module.exports = \"precision highp float;\\nprecision highp sampler3D;\\n\\nout vec4 FragColor;\\n\\nuniform sampler3D volume;\\nuniform sampler3D sdf;\\n\\nuniform sampler2D texDepth;\\n\\nuniform sampler2D selection;\\nuniform sampler2D projection;\\n\\nuniform mat4 modelview;\\nuniform mat4 proj;\\n\\nuniform vec3 volumeSize;\\nuniform vec2 resolution;\\n\\nuniform float isovalue;\\n\\nuniform bool displayProtein;\\nuniform bool displayCompartments;\\n\\nin vec3 vOrigin;\\nin vec3 vDirection;\\n\\nvec2 rayBoxDst(vec3 bmin, vec3 bmax, vec3 p, vec3 d) {\\n    vec3 t0 = (bmin - p) / d;\\n    vec3 t1 = (bmax - p) / d;\\n    vec3 tmin = min(t0, t1);\\n    vec3 tmax = max(t0, t1);\\n\\n    float dstA = max(max(tmin.x, tmin.y), tmin.z);\\n    float dstB = min(tmax.x, min(tmax.y, tmax.z));\\n\\n    float dstToBox = max(0.0, dstA);\\n    float dstInsideBox = max(0.0, dstB - dstToBox);\\n    return vec2(dstToBox, dstInsideBox);\\n}\\n\\n// https://github.com/kbinani/colormap-shaders/blob/master/shaders/glsl/MATLAB_summer.frag\\nvec3 colormap(float x) {\\n    return vec3(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4);\\n}\\n\\nvec3 matlab_spring(float x) {\\n    return vec3(1.0, clamp(x, 0.0, 1.0), clamp(1.0 - x, 0.0, 1.0));\\n}\\n\\n// Sample the protein channel, local coordinates.\\nfloat sampleProtein(vec3 p) {\\n    return texture(volume, p/volumeSize + 0.5).r;\\n}\\n\\nfloat sampleSdf(vec3 p) {\\n    return texture(sdf, p/volumeSize + 0.5).r * 255.0 / 10.0 - 5.0;;\\n}\\n\\nvoid calcNormalAndCurv(vec3 p, out vec3 normal, out float curv) {\\n    float h = 0.01; \\n    vec2 k = h * vec2(1., 0.);\\n\\n    float t1 = sampleSdf(p + volumeSize*k.xyy); float t2 = sampleSdf(p - volumeSize*k.xyy);\\n    float t3 = sampleSdf(p + volumeSize*k.yxy); float t4 = sampleSdf(p - volumeSize*k.yxy);\\n    float t5 = sampleSdf(p + volumeSize*k.yxx); float t6 = sampleSdf(p - volumeSize*k.yxx);\\n\\n    curv = (t1+t2+t3+t4+t5+t6-6.0*sampleSdf(p))/(h*h);\\n    normal = normalize(k.xyy * (t1-t2) + k.yxy * (t3-t4) + k.yyx * (t5-t6));\\n}\\n\\n\\nvoid main()\\n{\\n    float normalizedDepth = texture(texDepth, gl_FragCoord.xy / resolution).r;\\n    vec4 ndc = vec4(gl_FragCoord.xy / resolution * 2.0 - 1.0,\\n                    normalizedDepth * 2.0 - 1.0, 1.0f);\\n    vec4 vcoords = inverse(proj) * ndc;\\n    vcoords /= vcoords.w;\\n    float depth = -vcoords.z;\\n\\n    vec3 rayDir = normalize( vDirection );\\n    vec2 boxDst = rayBoxDst(-0.5 * volumeSize, 0.5 * volumeSize, vOrigin, rayDir);\\n\\n    // Render render isosurface\\n    vec4 surfaceColor = vec4(0.0f);\\n    if (displayCompartments) {\\n        vec3 rayPos = vOrigin + boxDst.x * rayDir;\\n        float dist = 0.0;\\n        while (dist < boxDst.y) {\\n            if (dist + boxDst.x > depth) break;\\n            // Simple sphere tracer.            \\n            float sdfVal = sampleSdf(rayPos);\\n            \\n            if (sdfVal < 0.01) {\\n                float curv;\\n                vec3 normal;\\n                calcNormalAndCurv(rayPos, normal, curv);\\n                float ldn = dot(normal, vec3(1.0, 0.0, 0.0));\\n                surfaceColor = mix(vec4(0.0, 0.0, 0.0, 1.0), vec4(colormap(abs(0.00001*curv)), 1.0), 0.5 + 0.5 * ldn);\\n                break;\\n            }\\n\\n            dist += sdfVal;\\n            rayPos += sdfVal * rayDir;\\n        }\\n        depth = min(depth, boxDst.x + dist);\\n    }\\n\\n    // Render volume.\\n    vec4 proteinColor = vec4(0.0f);\\n    if (displayProtein) {\\n        bool inProximity = false;\\n        vec3 rayPos = vOrigin + boxDst.x * rayDir;\\n\\n        float stepSize = 0.5;\\n        float dist = 0.0;\\n        while (dist < boxDst.y) {\\n            float sdfVal = sampleSdf(rayPos) - isovalue;\\n            \\n            if (!inProximity) {\\n                if (sdfVal < 0.01) {\\n                    inProximity = true;\\n                } else {\\n                    dist += sdfVal;\\n                    rayPos += sdfVal * rayDir;\\n                }\\n            } else {\\n                if (sdfVal > 0.01) {\\n                    inProximity = false;\\n                    dist += sdfVal;\\n                    rayPos += sdfVal * rayDir;\\n                } else {\\n                    float density = sampleProtein(rayPos);\\n                    vec3 color = colormap(density);\\n\\n                    vec3 uvw = rayPos / volumeSize + 0.5;\\n                    float distanceToMaximum = clamp(1.0 - abs(uvw.z - texture(projection, uvw.xy).g) / 0.025, 0.0, 1.0);\\n                    float selectionMask = texture(selection, uvw.xy).r;\\n\\n                    float highlight = distanceToMaximum * selectionMask;\\n                    color = mix(color, 3.0 * matlab_spring(density), highlight);\\n\\n                    proteinColor.rgb += density * (1.0 - proteinColor.a) * color;\\n                    proteinColor.a += density * (1.0 - proteinColor.a);\\n                    dist += stepSize;\\n                    rayPos += stepSize * rayDir;\\n                }\\n            }\\n            if (dist + boxDst.x > depth) break;\\n        }\\n    }\\n\\n    FragColor.rgb = mix(surfaceColor.rgb, proteinColor.rgb, proteinColor.a);\\n    FragColor.a = max(surfaceColor.a, proteinColor.a);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"\\nvarying vec2 vUv;\\n\\nuniform sampler2D texGrid;\\nuniform sampler2D texVolume;\\n\\nvoid main() {\\n    gl_FragColor = vec4(mix(texture(texGrid, vUv).rgb, texture(texVolume, vUv).rgb, texture(texVolume, vUv).a), 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform highp sampler3D volume;\\nuniform highp sampler3D sdf;\\nuniform float isovalue;\\n\\nvoid main() {\\n    vec3 uv = vec3(vUv, 0.0);\\n    int col = textureSize(volume, 0).z;\\n\\n    // Maximum projection.\\n    float maxDensity = 0.0;\\n    float maxPos = 0.0;\\n    for (float i = 0.0; i < float(col); i += 1.0) {\\n        uv.z = i / float(col);\\n        float sdfVal = texture(sdf, uv).r * 255.0 / 10.0 - 5.0 - isovalue;\\n        if (sdfVal <= 0.01) {\\n            float density = texture(volume, uv).r;\\n            if (density > maxDensity) {\\n                maxDensity = density;\\n                maxPos = uv.z;\\n            }\\n        }\\n    }\\n\\n    gl_FragColor = vec4(maxDensity, maxPos, 0.0, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform bool clear;\\nuniform vec2 lastPosition;\\nuniform vec2 position;\\nuniform bool depressed;\\n\\n// https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\\n{\\n    vec2 pa = p-a, ba = b-a;\\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\\n    return length( pa - ba*h );\\n}\\n\\nvoid main()\\n{\\n    if (clear) {\\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n        return;\\n    }\\n\\n    if (sdSegment(vUv, position, lastPosition) < 0.015 && depressed) {\\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\n    } else {\\n        discard;\\n    }\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform highp sampler2D projection;\\nuniform highp sampler2D selection;\\n\\n// https://github.com/kbinani/colormap-shaders/blob/master/shaders/glsl/MATLAB_summer.frag\\nvec4 colormap(float x) {\\n    return vec4(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4, 1.0);\\n}\\n\\nvoid main() {\\n    vec4 c1 = colormap(texture(projection, vUv).r);\\n    vec4 c2 = texture(selection, vUv);\\n\\n    gl_FragColor = mix(0.5*c1, c1, c2.r);\\n}\"","import React, { Component } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nclass Toolbar extends Component {\n\trender() {\n\t\tlet fullscreenIcon;\n\t\tif (this.props.fullscreen) fullscreenIcon = \"bi-fullscreen-exit\";\n\t\telse fullscreenIcon = \"bi-arrows-fullscreen\";\n\t\treturn (\n\t\t\t<ButtonToolbar className=\"justify-content-between\">\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleSidebar}\n\t\t\t\t><i className=\"bi-tools\"></i></Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onImportData}\n\t\t\t\t>Import Data</Button>\n\t\t\t</ButtonGroup>\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleFullscreen}\n\t\t\t\t><i className={fullscreenIcon}></i></Button>\n\t\t\t</ButtonGroup>\n\t\t\t</ButtonToolbar>\n\t\t)\n\t}\n}\n\nexport default Toolbar","import React, { Component } from 'react'\n\nimport Col from 'react-bootstrap/Col';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Card from 'react-bootstrap/Card';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\nclass Sidebar extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleSelectCompartmet = this.handleSelectCompartmet.bind(this);\n        this.handleChangeDisplaySegmentation = this.handleChangeDisplaySegmentation.bind(this);\n        this.handleChangeDisplayProtein = this.handleChangeDisplayProtein.bind(this);\n\t}\n\n    handleSelectCompartmet(index) {\n        this.props.onCompartmentSelection(index);\n    }\n\n    handleChangeDisplaySegmentation(e) {\n        this.props.onDisplaySegmentation(e.target.checked);\n    }\n\n    handleChangeDisplayProtein(e) {\n        this.props.onDisplayProtein(e.target.checked);\n    }\n\n\trender() {\n        let dropdownItems = [\n        <Dropdown.Item\n            onClick={() => this.handleSelectCompartmet(0)}\n        >All Compartments</Dropdown.Item>]\n        for (var i = 0; i < this.props.numCompartments-1; ++i) {\n            let index = i;\n            dropdownItems.push(\n            <Dropdown.Item\n                onClick={() => this.handleSelectCompartmet(index+1)}\n            >Compartment {index+1}</Dropdown.Item>);\n        }\n\n        let dropdownText = \"\";\n        if (this.props.numCompartments === 0) dropdownText = \"No Compartment Data\"\n        else if (this.props.selection === 0) dropdownText = \"All Compartments\";\n        else dropdownText = \"Compartment \" + this.props.selection;\n\t\treturn (\n            <Row md={3}>\n                <Col>\n                    <Collapse in={this.props.open}>\n                        <Card>\n                            <Card.Body>\n                                <Form>\n                                    <Form.Check className=\"form-switch\">\n                                        <Form.Check.Input\n                                            checked={this.props.displayProtein}\n                                            disabled={this.props.numCompartments===0}\n                                            onChange={this.handleChangeDisplayProtein}\n                                        />\n                                        <Form.Check.Label>Display Protein</Form.Check.Label>\n                                    </Form.Check>\n                                    <Form.Check className=\"form-switch\">\n                                        <Form.Check.Input\n                                            checked={this.props.displaySegmentation}\n                                            disabled={this.props.numCompartments===0}\n                                            onChange={this.handleChangeDisplaySegmentation}\n                                        />\n                                        <Form.Check.Label>Display Segmentation</Form.Check.Label>\n                                    </Form.Check>\n                                    <Form.Range\n                                        disabled={this.props.numCompartments===0}\n                                        \n                                    />\n                                    <Dropdown>\n                                        <Dropdown.Toggle disabled={this.props.numCompartments===0}>\n                                            {dropdownText}\n                                        </Dropdown.Toggle>\n\n                                        <Dropdown.Menu>\n                                            {dropdownItems}\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </Form>\n                            </Card.Body>\n                        </Card>\n                    </Collapse>\n                </Col>\n            </Row>\n\t\t)\n\t}\n}\n\nexport default Sidebar;","const Overlay = (props) => {\n    return <div className=\"overlay d-grid gap-3\">\n        {props.children}\n    </div>\n}\n\nexport default Overlay","import { VolumeRenderer } from '../volume_renderer.js'\n\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1);\n\nclass VolumeRendererDefault extends VolumeRenderer {\n\tvolumeTexture\n\tsdfTextures\n\n\tdom;\n\trenderer;\n\n\tvolumeSize;\n\n\trenderTargetGrid;\n\trenderTargetVolume;\n\n\tcamera;\n\tcontrols;\n\n\tcameraCompose;\n\n\tbox;\n\tgrid;\n\n\tmaterialMarchVolume;\n\tmaterialCompose;\n\n\tsceneGrid;\n\tsceneVolume;\n\tsceneCompose;\n\n\tvolumeDirty;\n\n\tconstructor(renderer, dom) {\n\t\tsuper();\n\t\tconsole.log(dom);\n\t\tthis.dom = dom;\n\t\tthis.renderer = renderer;\n\n\t\tthis.camera = new THREE.PerspectiveCamera( 75, dom.clientWidth/dom.clientHeight, 0.1, 5000 );\n\t\tthis.camera.position.z = 5;\n\n\t\tthis.controls = new OrbitControls(this.camera, dom);\n\n\t\tconsole.log(require('./shaders/volume_renderer_vert.glsl'));\n\n\t\tthis.materialMarchVolume = new THREE.RawShaderMaterial( {\n\t\t\tglslVersion: THREE.GLSL3,\n\t\t\tuniforms: {\n\t\t\t\tmodelview: { value: this.camera.matrixWorldInverse },\n\t\t\t\tproj: {value: this.camera.projectionMatrix },\n\t\t\t\tresolution: { value: new THREE.Vector2(0, 0) },\n\t\t\t\tvolume: { value: null },\n\t\t\t\tvolumeSize: { value: null },\n\t\t\t\ttexDepth: { value: null },\n\t\t\t\tsdf: { value: null },\n\t\t\t\tisovalue: { value: null },\n\t\t\t\tdisplayProtein: { value: false },\n\t\t\t\tdisplayCompartments: { value: false },\n\t\t\t\tselection: { value: false },\n\t\t\t\tprojection: { value: false }\n\t\t\t},\n\t\t\tvertexShader: require('./shaders/volume_renderer_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/volume_renderer_frag.glsl'),\n\t\t\tside: THREE.BackSide,\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialCompose = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/post_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/post_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\ttexGrid: { value: null },\n\t\t\t\ttexVolume: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.sceneGrid = new THREE.Scene();\n\t\tconst size = 10;\n\t\tconst divisions = 10;\n\t\tthis.grid = new THREE.GridHelper( size, divisions );\n\t\tthis.grid.rotateX(0.5*Math.PI);\n\t\tthis.sceneGrid.add(this.grid);\n\t\t\n\t\tthis.grid.onBeforeRender = ( renderer, scene, camera, geometry, material, group ) => {\n\t\t\tvar pos = this.controls.target;\n\t\t\tthis.grid.position.x = pos.x;\n\t\t\tthis.grid.position.y = pos.y;\n\t\t\tthis.grid.position.z = pos.z;\n\t\t\tthis.grid.updateMatrixWorld();\n\t\t};\n\n\t\tconst geometry = new THREE.BoxGeometry();\n\t\tthis.sceneVolume = new THREE.Scene();\n\t\tthis.box = new THREE.Mesh(geometry, this.materialMarchVolume)\n\t\tthis.sceneVolume.add(this.box);\n\n\t\tthis.sceneCompose = new THREE.Scene();\n\t\tthis.cameraCompose = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialCompose);\n\t\tthis.sceneCompose.add(quad);\n\n\t\tthis.renderTargetVolume = new THREE.WebGLRenderTarget(0, 0);\n\t\tthis.renderTargetGrid = new THREE.WebGLRenderTarget(0, 0);\n\t\tthis.renderTargetGrid.depthTexture = new THREE.DepthTexture();\n\n\t\t\n\t\tthis.materialMarchVolume.uniforms.texDepth.value = this.renderTargetGrid.depthTexture;\n\t\tthis.materialCompose.uniforms.texGrid.value = this.renderTargetGrid.texture;\n\t\tthis.materialCompose.uniforms.texVolume.value = this.renderTargetVolume.texture;\n\n\t\tthis.volumeDirty = true;\n\n\t\tthis.controls.addEventListener('change', () => {\n\t\t\tthis.volumeDirty = true;\n\t\t} );\n\t\t\n\t\twindow.addEventListener('resize', () => {\n\t\t\tthis.resizeCallback();\n\t\t});\n\t\tthis.resizeCallback();\n\t};\n\n\t// Renders the volume.\n\trender() {\n\t\tif (!this.volumeTexture) return;\n\t\tif (!this.sdfTextures) return;\n\t\tif (!this.volumeDirty) return;\n\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\tconst left   = rect.left;\n\t\tconst bottom = window.innerHeight - rect.bottom;\n\n\t\tthis.renderer.setViewport(left, bottom, width, height);\n\t\tthis.renderer.setScissor(left, bottom, width, height);\n\t\tthis.renderer.setScissorTest(true);\n\t\t\n\t\tthis.controls.update();\n\n\t\tlet gl = this.renderer.getContext();\n\t\tthis.renderer.setRenderTarget(this.renderTargetGrid);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneGrid, this.camera);\n\n\t\tthis.renderer.setRenderTarget(this.renderTargetVolume);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneVolume, this.camera);\n\n\t\tthis.renderer.setRenderTarget(null);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneCompose, this.cameraCompose);\n\n\t\tthis.volumeDirty = false;\n\t};\n\n\tselectionUpdated() {\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetVolumeSize(width, height, depth) { \n\t\tthis.volumeSize = new THREE.Vector3(width, height, depth);\n\t\tthis.box.geometry = new THREE.BoxGeometry(this.volumeSize.x, this.volumeSize.y, this.volumeSize.z);\n\t\tthis.materialMarchVolume.uniforms.volumeSize.value = this.volumeSize;\n\t\tthis.volumeDirty = true;\n\t };\n\n\t// Set the protein data.\n\tsetProteinData(texture) {\n\t\tthis.volumeTexture = texture;\n\t\tthis.materialMarchVolume.uniforms.volume.value = this.volumeTexture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDistanceData(textures, dims) {\n\t\tthis.sdfTextures = textures;\n\t\tthis.materialMarchVolume.uniforms.sdf.value = this.sdfTextures[0];\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetIsovalue(value) {\n\t\tthis.materialMarchVolume.uniforms.isovalue.value = value;\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetCompartmentIndex(value) {\n\t\tthis.materialMarchVolume.uniforms.sdf.value = this.sdfTextures[value];\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDisplayCompartments(value) {\n\t\tthis.materialMarchVolume.uniforms.displayCompartments.value = value;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDisplayProtein(value) {\n\t\tthis.materialMarchVolume.uniforms.displayProtein.value = value;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetSelectionTexture(texture) {\n\t\tthis.materialMarchVolume.uniforms.selection.value = texture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetProjectionTexture(texture) {\n\t\tthis.materialMarchVolume.uniforms.projection.value = texture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tresizeCallback() {\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\t//const left   = rect.left;\n\t\t//const bottom = window.innerHeight - rect.bottom;\n\t\t\n\t\tthis.camera.aspect = width/height;\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderTargetVolume.setSize(width, height);\n\t\tthis.renderTargetGrid.setSize(width, height);\n\t\tthis.materialMarchVolume.uniforms.resolution.value = new THREE.Vector2(width, height);\n\n\t\tthis.renderTargetGrid.depthTexture = new THREE.DepthTexture();\n\t\tthis.materialMarchVolume.uniforms.texDepth.value = this.renderTargetGrid.depthTexture;\n\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetSkeleton(vec) {\n\t\tvar geom = new THREE.BufferGeometry();\n\n\t\tgeom.setAttribute( 'position', new THREE.BufferAttribute( vec, 3 ) );\n\n\t\tvar points = new THREE.Points(geom);\n\n\t\tpoints.position.x = -0.5*this.volumeSize.x;\n\t\tpoints.position.y = -0.5*this.volumeSize.y;\n\t\tpoints.position.z = -0.5*this.volumeSize.z;\n\n\t\tthis.sceneGrid.add(points);\n\t}\n}\n\nexport { VolumeRendererDefault };","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n//import { VolumeRendererReprojected } from './volume/reprojected/volume_renderer_reprojected.js'\nimport { VolumeRendererDefault} from './volume/default/volume_renderer_default.js'\nimport { MapRenderer } from \"./map/map_renderer.js\"\n\nvar stats = new Stats();\nstats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\ndocument.body.appendChild( stats.dom );\n\nvar canvas;\nvar mainView;\nvar mapView;\n\nvar renderer;\n\nvar volumeRenderer = null;\nvar mapRenderer = null;\n// Configure coordinate system to use Z as up.\n\nasync function main(initCanvas, initMainView, initMapView) {\n\tcanvas = initCanvas;\n\tmainView = initMainView;\n\tmapView = initMapView;\n\trenderer = new THREE.WebGLRenderer({canvas: canvas, preserveDrawingBuffer: true});\n\trenderer.autoClearColor = false;\n\tawait init();\n\tanimate();\n}\n\nfunction setVolumeSize(size) {\n\tvolumeRenderer.setVolumeSize(size[0], size[1], size[2]);\n}\n\nfunction setProteinData(array, dims) {\n\tconst texture = new THREE.DataTexture3D(array, dims[0], dims[1], dims[2]);\n\ttexture.format = THREE.RedFormat;\n\ttexture.minFilter = THREE.LinearFilter;\n\ttexture.magFilter = THREE.LinearFilter;\n\ttexture.unpackAlignment = 1;\n\t\n\tvolumeRenderer.setProteinData(texture);\n\tmapRenderer.setProteinData(texture);\n}\n\nfunction setDistanceFieldData(arrays, dims) {\n\tlet textures = [];\n\tfor (var i = 0; i < arrays.length; ++i) {\n\t\tconst tex = new THREE.DataTexture3D(arrays[i], dims[0], dims[1], dims[2]);\n\t\ttex.format = THREE.RedFormat;\n\t\ttex.minFilter = THREE.LinearFilter;\n\t\ttex.magFilter = THREE.LinearFilter;\n\t\ttex.unpackAlignment = 1;\n\n\t\ttextures.push(tex);\n\t}\n\tvolumeRenderer.setDistanceData(textures);\n\tmapRenderer.setDistanceData(textures);\n}\n\nasync function init() {\n\tvolumeRenderer = new VolumeRendererDefault(renderer, mainView);\n\tmapRenderer = new MapRenderer(renderer, mapView, handleSelectionUpdated);\n\n\tvolumeRenderer.setSelectionTexture(mapRenderer.getSeletionTexture());\n\tvolumeRenderer.setProjectionTexture(mapRenderer.getProjectionTexture());\n}\n\nfunction animate() {\n\trequestAnimationFrame( animate );\n\tstats.begin();\n\n\tvolumeRenderer.render();\n\tmapRenderer.render();\n\n\tstats.end();\n}\n\nfunction handleSelectionUpdated() {\n\tconsole.log(\"UUUPS\");\n\tvolumeRenderer.selectionUpdated();\n}\n\nfunction setIsovalue(value) {\n\tvolumeRenderer.setIsovalue(value);\n\tmapRenderer.setIsovalue(value);\n}\n\nfunction setDisplayProtein(value) {\n\tvolumeRenderer.setDisplayProtein(value);\n}\n\nfunction setDisplayCompartment(value) {\n\tvolumeRenderer.setDisplayCompartments(value);\n}\n\nfunction setCompartmentIndex(index) {\n\tvolumeRenderer.setCompartmentIndex(index);\n\tmapRenderer.setCompartmentIndex(index);\n}\n\nfunction setSkeleton(vec) {\n\tvolumeRenderer.setSkeleton(vec);\n}\n\nfunction deleteSelection() {\n\tmapRenderer.deleteSelection();\n}\n\nfunction getMapSelectionPixels() {\n\treturn mapRenderer.getSelectionPixels();\n}\n\nfunction getMapProjectionPixels() {\n\treturn mapRenderer.getProjectionPixels();\n}\n\nexport { main, setDistanceFieldData, setProteinData, setIsovalue, setDisplayProtein, setDisplayCompartment, setCompartmentIndex, setVolumeSize, deleteSelection, setSkeleton, getMapSelectionPixels, getMapProjectionPixels};","import React, { useRef, useEffect } from 'react'\n\nimport * as Renderer from '../renderers/renderer.js'\n\nconst Canvas = props => {\n\tconst canvasRef = useRef(null)\n\n\tuseEffect(() => {\n\t\t/*\n\t\tif (props.mainView && props.mapView) {\n\t\t\tRenderer.main(canvasRef.current, props.mainView, props.mapView);\n\t\t}\n\t\t*/\n\t}, [props.mainView, props.mapView])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setDistanceFieldData(props.sdf.buffers, props.sdf.dims);\n\t\t}\n\t}, [props.sdf, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setProteinData(props.protein.buffer, props.protein.dims);\n\t\t}\n\t}, [props.protein, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setVolumeSize(props.volumeSize);\n\t\t}\n\t}, [props.volumeSize, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setDisplayProtein(props.displayProtein);\n\t\t}\n\t}, [props.displayProtein, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setDisplayCompartment(props.displaySegmentation);\n\t\t}\n\t}, [props.displaySegmentation, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.isovalue) {\n\t\t\tRenderer.setIsovalue(props.isovalue);\n\t\t}\n\t}, [props.isovalue, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setCompartmentIndex(props.compartmentIndex);\n\t\t}\n\t}, [props.compartmentIndex, props.ready])\n\n\treturn (\n\t\t<canvas className=\"renderer\" ref={canvasRef} {...props} />\n\t);\n}\n\nexport default Canvas","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nconst Plots = props => {\n    const data = {\n        labels: props.labelsHistogram,\n        datasets: [{\n            backgroundColor: 'rgb(255, 99, 132)',\n            borderColor: 'rgb(255, 99, 132)',\n            data: props.globalHistogram,\n            label: 'Global Histogram',\n        },\n        {\n            backgroundColor: 'rgb(0, 255, 132)',\n            borderColor: 'rgb(0, 255, 132)',\n            data: props.localHistogram,\n            label: 'Local Histogram',\n        }]\n    };\n\n    const options = {\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        beginAtZero: true,\n                    },\n                },\n            ],\n        },\n        maintainAspectRatio: false\n    };\n\n    return (\n        <>\n            <Bar\n                className=\"plots\"\n                data={data}\n                options={options}\n            />\n        </>\n    );\n};\n\nexport default Plots;","import React, { useState, useRef, useEffect } from 'react'\n\nimport Button from 'react-bootstrap/Button'\n\nimport Canvas from './Canvas';\nimport Plots from './Plots'\n\nconst Views= props => {\n    const mainRef = useRef(null);\n    const mapRef = useRef(null);\n\n    const [mainView, setMainView] = useState();\n    const [mapView, setMapView] = useState();\n\n    useEffect(() => {\n        setMainView(mainRef.current);\n        setMapView(mapRef.current);\n    }, []);\n\n    const handleClickImport = () => {\n        props.onClickImport();\n    }\n\n    let importPrompt;\n    if (!props.ready) importPrompt = (\n        <div className=\"text-secondary h-100 d-flex justify-content-center align-items-center\">\n            <Button\n                variant=\"primary\"\n                size=\"lg\"\n                onClick={handleClickImport}\n            >\n                <i className=\"bi-plus-square\"></i>&nbsp;&nbsp;Import Data\n            </Button>\n        </div>\n    );\n    return(\n        <>\n        <Canvas\n            mainView={mainView}\n            mapView={mapView}\n            sdf={props.sdf}\n            protein={props.protein}\n            volumeSize={props.volumeSize}\n            displayProtein={props.displayProtein}\n            displaySegmentation={props.displaySegmentation}\n            isovalue={props.isovalue}\n            compartmentIndex={props.compartmentIndex}\n            ready={props.ready}\n        />\n        <div className=\"views d-flex flex-col\">\n            <div className=\"flex-fill d-flex flex-row\">\n                <div ref={mainRef} className=\"flex-fill\">\n                    {importPrompt}\n                </div>\n                <div className=\"v-divider\"></div>\n                <div className=\"flex-fill d-flex flex-column\">\n                    <div ref={mapRef} className=\"flex-fill\"></div>\n                    <div className=\"h-divider\"></div>\n                    <div className=\"flex-fill\">\n                        <Plots\n                            localHistogram={props.localHistogram}\n                            globalHistogram={props.globalHistogram}\n                            labelsHistogram={props.labelsHistogram}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n        </>)\n    ;\n}\n\nexport default Views","import React, { Component } from 'react'\n\nimport Import from './Import'\nimport Toolbar from './Toolbar';\nimport Sidebar from './Sidebar';\nimport Overlay from './Overlay';\nimport Views from './Views'\n\nclass Main extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tfullscreen: false,\n\t\t\tshowSidebar: false,\n\t\t\tshowImport: false,\n\t\t\tvoxelSize: [0, 0, 0],\n\t\t\tbufferDims: [0, 0, 0],\n\t\t\tsdfBuffers: [],\n\t\t\tproteinBuffer: \"\",\n\t\t\tready: false,\n\t\t\tcompartmentIndex: 0,\n\t\t\tdisplaySegmentation: true,\n\t\t\tdisplayProtein: true,\n\t\t\tglobalHistogram: [],\n\t\t\tlabelsHistogram: [],\n\t\t\tlocalHistogram: []\n\t\t}\n\t\t\n\t\tthis.handleShowImport = this.handleShowImport.bind(this);\n\t\tthis.handleToggleFullscreen = this.handleToggleFullscreen.bind(this);\n\t\tthis.handleToggleSidebar = this.handleToggleSidebar.bind(this);\n\t\tthis.handleAbortImport = this.handleAbortImport.bind(this);\n\t\tthis.handleCompleteImport = this.handleCompleteImport.bind(this);\n\t\tthis.handleCompartmentSelection = this.handleCompartmentSelection.bind(this);\n\t\tthis.handleDisplaySegmentation = this.handleDisplaySegmentation.bind(this);\n\t\tthis.handleDisplayProtein = this.handleDisplayProtein.bind(this);\n\t}\n\n\thandleShowImport() {\n\t\tthis.setState({\n\t\t\tshowImport: true\n\t\t});\n\t}\n\n\thandleAbortImport() {\n\t\tthis.setState({\n\t\t\tshowImport: false\n\t\t});\n\t}\n\n\thandleCompleteImport(sdfBuffers, proteinBuffer, bufferDims, voxelSize, hist, histLabels) {\n\t\tthis.setState({\n\t\t\tsdfBuffers: sdfBuffers,\n\t\t\tproteinBuffer: proteinBuffer,\n\t\t\tbufferDims: bufferDims,\n\t\t\tvoxelSize: voxelSize,\n\t\t\tshowImport: false,\n\t\t\tready: true,\n\t\t\tglobalHistogram: hist,\n\t\t\tlabelsHistogram: histLabels\n\t\t})\n\t}\n\n\thandleToggleFullscreen() {\n\t\tif (!this.state.fullscreen) {\n\t\t\tlet elem = document.documentElement;\n\t\t\tif (elem.requestFullscreen) {\n\t\t\t\telem.requestFullscreen();\n\t\t\t} else if (elem.webkitRequestFullscreen) {\n\t\t\t\telem.webkitRequestFullscreen();\n\t\t\t} else if (elem.msRequestFullscreen) {\n\t\t\t\telem.msRequestFullscreen();\n\t\t\t}\n\t\t} else {\n\t\t\tif (document.exitFullscreen) {\n\t\t\t\tdocument.exitFullscreen();\n\t\t\t} else if (document.webkitExitFullscreen) {\n\t\t\t\tdocument.webkitExitFullscreen();\n\t\t\t} else if (document.msExitFullscreen) {\n\t\t\t\tdocument.msExitFullscreen();\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfullscreen: !this.state.fullscreen\n\t\t})\n\t}\n\n\thandleToggleSidebar() {\n\t\tthis.setState({\n\t\t\tshowSidebar: !this.state.showSidebar\n\t\t})\n\t}\n\n\thandleCompartmentSelection(index) {\n\t\tthis.setState({\n\t\t\tcompartmentIndex: index\n\t\t})\n\t}\n\n\thandleDisplaySegmentation(value) {\n\t\tthis.setState({\n\t\t\tdisplaySegmentation: value\n\t\t})\n\t}\n\n\thandleDisplayProtein(value) {\n\t\tthis.setState({\n\t\t\tdisplayProtein: value\n\t\t})\n\t}\n\n\trender() {\n\t\tlet volumeSize = [\n\t\t\tthis.state.bufferDims[0] * this.state.voxelSize[0],\n\t\t\tthis.state.bufferDims[1] * this.state.voxelSize[1],\n\t\t\tthis.state.bufferDims[2] * this.state.voxelSize[2]\n\t\t]\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Import\n\t\t\t\t\tshow={this.state.showImport}\n\t\t\t\t\tonAbort={this.handleAbortImport}\n\t\t\t\t\tonComplete={this.handleCompleteImport}\n\t\t\t\t/>\n\t\t\t\t<Overlay>\n\t\t\t\t\t<Toolbar\n\t\t\t\t\t\tfullscreen={this.state.fullscreen}\n\t\t\t\t\t\tonImportData={this.handleShowImport}\n\t\t\t\t\t\tonToggleFullscreen={this.handleToggleFullscreen}\n\t\t\t\t\t\tonToggleSidebar={this.handleToggleSidebar}\n\t\t\t\t\t/>\n\t\t\t\t\t<Sidebar\n\t\t\t\t\t\topen={this.state.showSidebar}\n\t\t\t\t\t\tnumCompartments={this.state.sdfBuffers.length}\n\t\t\t\t\t\tonCompartmentSelection={this.handleCompartmentSelection}\n\t\t\t\t\t\tselection={this.state.compartmentIndex}\n\t\t\t\t\t\tonDisplaySegmentation={this.handleDisplaySegmentation}\n\t\t\t\t\t\tonDisplayProtein={this.handleDisplayProtein}\n\t\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\t/>\n\t\t\t\t</Overlay>\n\t\t\t\t<Views\n\t\t\t\t\tsdf={{buffers: this.state.sdfBuffers, dims: this.state.bufferDims}}\n\t\t\t\t\tprotein={{buffer: this.state.proteinBuffer, dims: this.state.bufferDims}}\n\t\t\t\t\tvolumeSize={volumeSize}\n\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\tisovalue={0}\n\t\t\t\t\tcompartmentIndex={this.state.compartmentIndex}\n\t\t\t\t\tready={this.state.ready}\n\t\t\t\t\tonClickImport={this.handleShowImport}\n\t\t\t\t\tlocalHistogram={this.state.localHistogram}\n\t\t\t\t\tglobalHistogram={this.state.globalHistogram}\n\t\t\t\t\tlabelsHistogram={this.state.labelsHistogram}\n\t\t\t\t/>\n\t\t\t</>\n\t\t)\n\t}\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\nimport Main from './ui/Main';\n\nfunction App() {\n  return(\n      <div className=\"App\">\n        <Main />\n     </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}