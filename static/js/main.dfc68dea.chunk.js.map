{"version":3,"sources":["tiff.js","ui/Import.js","ui/InputVector.js","ui/ImportDialog.js","ui/LabeledProgressBar.js","ui/ImportProgress.js","workers/sdf-worker.js","workers/tiff-worker.js","renderers/volume/default/shaders/volume_renderer_vert.glsl","renderers/volume/default/shaders/volume_renderer_frag.glsl","renderers/volume/default/shaders/post_vert.glsl","renderers/volume/default/shaders/post_frag.glsl","renderers/map/shaders/mip_vert.glsl","renderers/map/shaders/mip_frag.glsl","renderers/map/shaders/selection_vert.glsl","renderers/map/shaders/selection_frag.glsl","renderers/map/shaders/map_vert.glsl","renderers/map/shaders/map_frag.glsl","ui/Toolbar.js","ui/Sidebar.js","ui/Overlay.js","renderers/volume/volume_renderer.js","renderers/volume/default/volume_renderer_default.js","renderers/renderer.js","renderers/map/map_renderer.js","ui/Canvas.js","ui/Plots.js","ui/StoreItem.js","ui/MapTools.js","ui/Views.js","ui/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Tiff","this","buffer","pixels","Uint8Array","width","height","depth","bits","file","a","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onload","readerEvent","target","result","onerror","_readerEvent","error","onabort","ifd","UTIF","Object","keys","length","Error","properties","t256","t257","t258","t277","i","sliceProperties","JSON","stringify","onError","onProgress","worker","Worker","name","type","decodeTiffBuffer","Comlink","terminate","Import","props","state","tiffProtein","tiffSegmentation","voxelSize","proteinProgress","segmentationProgress","sdfProgress","proteinError","segmentationError","sdfError","step","preImportError","handleImport","bind","handleClose","onProteinProgress","onSegmentationProgress","onProteinError","onSegmentationError","onSdfProgress","onSdfError","progress","setState","fileProtein","fileSegmentation","open","message","decode","reducer","accumulator","currentValue","Math","max","numCompartments","reduce","promises","workers","Array","p","b","push","sdf","sdfBuffers","pyramid","w","h","d","level0","j","k","pw","ph","pd","ceil","plevel","level","pi","pj","pk","floor","min","hist","Float32Array","area","histLabels","onComplete","parseFloat","x","y","z","onAbort","show","onImport","onClose","Component","InputVector","handleChangeX","handleChangeY","handleChangeZ","e","onChange","value","InputGroup","className","Text","Form","Control","placeholder","ImportDialog","working","handleClickImport","handleChangeFileProtein","handleChangeFileSegmentation","handleChangeVoxelSize","files","formValid","alert","Alert","variant","Modal","onHide","Header","closeButton","Title","Body","Group","Label","Footer","Button","disabled","onClick","LabeledProgressBar","animated","ProgressBar","style","clipPath","label","striped","now","ImportProgress","backdrop","module","exports","Toolbar","fullscreenIcon","fullscreen","ButtonToolbar","ButtonGroup","onToggleSidebar","onImportData","onToggleFullscreen","Sidebar","handleSelectCompartmet","index","onCompartmentSelection","dropdownItems","Dropdown","Item","dropdownText","selection","Row","md","Col","Collapse","in","Card","Check","Input","checked","displayProtein","onDisplayProtein","displaySegmentation","onDisplaySegmentation","Range","onIsovalue","Toggle","Menu","debugSamples","onDebugSamples","useLod","onUseLod","Overlay","children","VolumeRenderer","texture","textures","vec","THREE","DefaultUp","canvas","mainView","mapView","renderer","VolumeRendererDefault","dom","camera","clientWidth","clientHeight","controls","OrbitControls","position","update","materialMarchVolume","glslVersion","uniforms","modelview","matrixWorldInverse","proj","projectionMatrix","resolution","volume0","volume1","volume2","volume3","volume4","volume5","volume6","volume7","volume8","volume9","volumeSize","texDepth","isovalue","displayCompartments","projection","vertexShader","require","fragmentShader","side","transparent","materialCompose","texGrid","texVolume","sceneGrid","grid","rotateX","PI","add","onBeforeRender","scene","geometry","material","group","pos","updateMatrixWorld","sceneVolume","box","sceneCompose","cameraCompose","plane","quad","renderTargetVolume","renderTargetGrid","depthTexture","volumeDirty","addEventListener","window","resizeCallback","volumeTexture","sdfTextures","rect","getBoundingClientRect","right","left","bottom","top","innerHeight","setViewport","setScissor","setScissorTest","gl","getContext","setRenderTarget","clear","COLOR_BUFFER_BIT","render","dims","setSize","innerWidth","aspect","updateProjectionMatrix","geom","setAttribute","points","MapRenderer","onSelectionUpdated","materialProjection","volume","materialSelection","lastPosition","depressed","penMode","penSize","restore","doRestore","materialMap","renderTargetSelection","renderTargetProjection","enableRotate","cameraProjection","sceneProjection","planeMap","cameraSelection","sceneSelection","sceneMap","projectionDirty","selectionDirty","mouseMove","mouseDown","mouseUp","mouseOut","raycaster","mouse","clientX","clientY","setFromCamera","clone","intersects","intersectObject","uv","getMousePosition","renderSelection","renderProjection","renderMap","mode","readRenderTargetPixels","stats","Stats","showPanel","document","body","appendChild","volumeRenderer","mapRenderer","initCanvas","initMainView","initMapView","preserveDrawingBuffer","autoClearColor","init","animate","handleSelectionUpdated","setSelectionTexture","getSeletionTexture","setProjectionTexture","getProjectionTexture","requestAnimationFrame","selectionUpdated","Canvas","canvasRef","useRef","useEffect","ready","Renderer","current","arrays","tex","format","minFilter","magFilter","unpackAlignment","setDistanceData","buffers","internalFormat","generateMipmaps","setProteinData","protein","size","setVolumeSize","setDisplayProtein","setDisplayCompartments","compartmentIndex","setCompartmentIndex","setDebugSamples","setUseLod","setIsovalue","ref","Plots","data","labels","labelsHistogram","datasets","backgroundColor","borderColor","globalHistogram","localHistogram","options","scales","yAxes","ticks","beginAtZero","maintainAspectRatio","MapTools","labelRef","useState","edit","setEdit","editText","setEditText","blurred","setBlurred","focus","buttonOrForm","handleEdit","doEdit","FormControl","marginLeft","onKeyPress","key","onLabel","onBlur","onExport","onDelete","storeData","localforage","createInstance","storeName","description","setPenSize","setPenMode","uuids","setUuids","reloadStore","handlePenMode","handlePenSize","pt","list","iterate","iterationNumber","then","handleLoad","uuid","getItem","setSelectionFromTexture","storeList","StoreItem","removeItem","item","setItem","handleLabelStore","console","log","png","UPNG","blob","Blob","url","URL","createObjectURL","fileLink","createElement","href","download","click","entries","overflowY","flexDirection","vertical","deleteSelection","selectionPixels","getSelectionPixels","input","onchange","replace","filename","img","Views","mainRef","mapRef","setMainView","setMapView","importPrompt","onClickImport","Main","showSidebar","showImport","handleShowImport","handleToggleFullscreen","handleToggleSidebar","handleAbortImport","handleCompleteImport","handleCompartmentSelection","handleDisplaySegmentation","handleDisplayProtein","handleDebugSamples","handleUseLod","handleIsovalue","proteinBuffers","bufferDims","exitFullscreen","webkitExitFullscreen","msExitFullscreen","elem","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dfc68dea.chunk.js","sourcesContent":["import * as UTIF from 'utif';\n\nimport * as Comlink from 'comlink';\n\nclass Tiff {\n    constructor() {\n        this.buffer = null;\n        this.pixels = new Uint8Array();\n        this.width = 0;\n        this.height = 0;\n        this.depth = 0;\n        this.bits = 0;\n    }\n\n    async open(file) {\n        let buffer = await (() => {\n            return new Promise(function(resolve, reject) {\n                var reader = new FileReader();\n                reader.readAsArrayBuffer(file)\n            \n                reader.onload = readerEvent => {\n                    resolve(readerEvent.target.result);\n                }\n        \n                reader.onerror = _readerEvent => {\n                    reject(reader.error);\n                }\n        \n                reader.onabort = _readerEvent => {\n                    reject(\"FileReader was aborted!\");\n                }\n            });\n        })();\n\n        let ifd = UTIF.decode(buffer);\n        if (Object.keys(ifd[0]).length === 0) {\n            throw new Error(\"Could not decode TIFF file!\");\n        }\n\n        let properties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[0]);\n\n        if (properties.t277[0] !== 1) {\n            throw new Error(\"Only grayscale images are supported.\");\n        }\n    \n        if (properties.t258[0] !== 8) {\n            throw new Error(\"Only images with bit depth 8 are supported.\");\n        }\n    \n        for (var i = 0; i < ifd.length; ++i) {\n            let sliceProperties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[i]);\n    \n            if (JSON.stringify(properties) !== JSON.stringify(sliceProperties)) {\n                throw new Error(\"Slice \" + i + \" has incorrect dimensions or pixel depth.\");\n            }\n        }\n\n        this.buffer = buffer;\n        this.width = properties.t256[0];\n        this.height = properties.t257[0];\n        this.depth = ifd.length;\n        this.bits = properties.t258[0];\n    };\n\n    async decode(onError, onProgress) {\n        const worker = new Worker('./workers/tiff-worker.js', {\n            name: 'tiff-worker',\n            type: 'module'\n          });\n        const decodeTiffBuffer = Comlink.wrap(worker);\n        this.pixels = await decodeTiffBuffer(this.buffer, Comlink.proxy(onError), Comlink.proxy(onProgress));\n        worker.terminate();\n    };\n}\n\nexport { Tiff };","import React, { Component } from 'react'\n\nimport ImportDialog from './ImportDialog';\nimport ImportProgress from './ImportProgress';\n\nimport * as Comlink from 'comlink';\n\nimport { Tiff } from '../tiff';\n\nclass Import extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tiffProtein: \"\",\n            tiffSegmentation: \"\",\n            voxelSize: \"\",\n            proteinProgress: 0,\n            segmentationProgress: 0,\n            sdfProgress: 0,\n            proteinError: \"\",\n            segmentationError: \"\",\n            sdfError: \"\",\n            step: \"dialog\",\n            preImportError: \"\"\n        }\n\n        this.handleImport = this.handleImport.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.onProteinProgress = this.onProteinProgress.bind(this);\n        this.onSegmentationProgress = this.onSegmentationProgress.bind(this);\n        this.onProteinError = this.onProteinError.bind(this);\n        this.onSegmentationError = this.onSegmentationError.bind(this);\n        this.onSdfProgress = this.onSdfProgress.bind(this);\n        this.onSdfError = this.onSdfError.bind(this);\n    }\n\n    onProteinProgress(progress) {\n        this.setState({\n            proteinProgress: progress\n        })\n    }\n\n    onSegmentationProgress(progress) {\n        this.setState({\n            segmentationProgress: progress\n        })\n    }\n\n    onProteinError(error) {\n        this.setState({\n            proteinError: error\n        })\n    }\n\n    onSegmentationError(error) {\n        this.setState({\n            segmentationError: error\n        })\n    }\n\n    onSdfProgress(progress) {\n        this.setState({\n            sdfProgress: progress\n        })\n    }\n\n    onSdfError(error) {\n        this.setState({\n            sdfError: error\n        })\n    }\n\n    async handleImport(fileProtein, fileSegmentation, voxelSize) {\n        let tiffProtein = new Tiff();\n        let tiffSegmentation = new Tiff();\n    \n        try {\n          await tiffProtein.open(fileProtein);\n          await tiffSegmentation.open(fileSegmentation);\n        } catch (e) {\n          this.setState({\n            preImportError: e.message\n          });\n          return;\n        }\n    \n        if (tiffProtein.width !== tiffSegmentation.width || tiffProtein.height !== tiffSegmentation.height || tiffProtein.depth !== tiffSegmentation.depth) {\n          this.setState({\n            preImportError: \"Please make sure the protein and the segmentation data have the same dimensions.\"\n          });\n          return;\n        }\n\n        this.setState({\n            step: \"import\",\n            voxelSize: voxelSize,\n            tiffProtein: tiffProtein,\n            tiffSegmentation: tiffSegmentation,\n            segmentationProgress: 0,\n            proteinProgress: 0,\n            sdfProgress: 0,\n            segmentationError: \"\",\n            proteinError: \"\",\n            sdfError: \"\"\n        });\n        \n        // We can decode the TIFFs in parallel.\n        await tiffProtein.decode(this.onProteinError, this.onProteinProgress);\n        await tiffSegmentation.decode(this.onSegmentationError, this.onSegmentationProgress);\n        const reducer = (accumulator, currentValue) => Math.max(accumulator, currentValue);\n        var numCompartments = tiffSegmentation.pixels.reduce(reducer);\n\n        let promises = [];\n        let workers = [];\n        let progress = new Array(numCompartments+1);\n\n        for (let i = 0; i < numCompartments+1; ++i) {\n            const target = i;\n            const onProgress = (p) => {\n                progress[target] = p * 100;\n                this.onSdfProgress(progress.reduce((a, b) => a + b, 0) / (numCompartments + 1));\n            }\n            promises.push(new Promise(function(resolve, reject) {\n                const worker = new Worker('../workers/sdf-worker.js', {\n                    name: 'sdf-worker',\n                    type: 'module'\n                });\n                workers.push(worker);\n                const sdf = Comlink.wrap(worker);\n                let result = sdf(tiffSegmentation, voxelSize, target, Comlink.proxy(onProgress));\n                resolve(result);\n            }));\n        }\n\n        //const sdfBuffers = await Promise.all(promises); // This needs too much memory for some reason?\n        let sdfBuffers = [];\n        for (let i = 0; i < promises.length; ++i) {\n            sdfBuffers.push(await promises[i]);\n        }\n        for (let i = 0; i < workers.length; ++i) {\n            workers[i].terminate();\n        }\n        this.onSdfProgress(100);\n\n        // Compute pyramid.\n        let pyramid = [];\n        let w = tiffProtein.width;\n        let h = tiffProtein.height;\n        let d = tiffProtein.depth;\n\n        let level0 = new Uint8Array(2*w*h*d);\n        for (let i = 0; i < w; ++i) {\n            for (let j = 0; j < h; ++j) {\n                for (let k = 0; k < d; ++k) {\n                    level0[2*(k*w*h+j*w+i)] = tiffProtein.pixels[k*w*h+j*w+i];\n                    level0[2*(k*w*h+j*w+i)+1] = level0[2*(k*w*h+j*w)+i];\n                }\n            }\n        }\n        pyramid.push(level0);\n\n        while (true) {\n            let pw = w;\n            let ph = h;\n            let pd = d;\n            w = Math.ceil(w / 2.0);\n            h = Math.ceil(h / 2.0);\n            d = Math.ceil(d / 2.0);\n\n            let plevel = pyramid[pyramid.length - 1];\n            let level = new Uint8Array(2*w*h*d);\n            for (let pi = 0; pi < pw; ++pi) {\n                for (let pj = 0; pj < ph; ++pj) {\n                    for (let pk = 0; pk < pd; ++pk) {\n                        let i = Math.floor(pi/2.0);\n                        let j = Math.floor(pj/2.0);\n                        let k = Math.floor(pk/2.0);\n                        level[2*(k*w*h+j*w+i)] = Math.max(level[2*(k*w*h+j*w+i)], plevel[2*(pk*pw*ph+pj*pw+pi)]);\n                        level[2*(k*w*h+j*w+i)+1] = Math.min(level[2*(k*w*h+j*w+i)+1], plevel[2*(pk*pw*ph+pj*pw+pi)+1]);\n                    }\n                }\n            }\n            pyramid.push(level);\n\n            if (w <= 1 || h <= 1 || d <= 1) break;\n        }\n\n        // Compute global histogram.\n        const bitDepth = 8;\n        let hist = new Float32Array(2**bitDepth);\n        let area = new Float32Array(2**bitDepth);\n    \n        for (let i = 0; i < sdfBuffers[0].length; ++i) {\n            hist[sdfBuffers[0][i]] += tiffProtein.pixels[i];\n            area[sdfBuffers[0][i]] += 1.0;\n    \n        }\n    \n        for (let i = 0; i < hist.length; ++i) {\n            hist[i] = hist[i]/area[i];\n        }\n\n        let histLabels = [];\n        for (let i = 0; i < 256; ++i) {\n            histLabels.push(i / 10.0 - 5.0);\n        }\n    \n        this.setState({\n            step: \"dialog\"\n        });\n\n        this.props.onComplete(sdfBuffers, pyramid, [tiffProtein.width, tiffProtein.height, tiffProtein.depth],\n                              [parseFloat(voxelSize.x), parseFloat(voxelSize.y), parseFloat(voxelSize.z)],\n                              hist, histLabels);\n    }\n\n    handleClose() {\n        this.props.onAbort();\n    }\n\n    render() {\n        return (\n            <>\n                <ImportDialog\n                    show={this.state.step === \"dialog\" && this.props.show}\n                    error={this.state.preImportError}\n                    onImport={this.handleImport}\n                    onClose={this.handleClose}\n                />\n                <ImportProgress\n                    show={this.state.step === \"import\" && this.props.show}\n                    proteinProgress={this.state.proteinProgress}\n                    segmentationProgress={this.state.segmentationProgress}\n                    sdfProgress={this.state.sdfProgress}\n                    proteinError={this.state.proteinError}\n                    segmentationError={this.state.segmentationError}\n                    sdfError={this.state.sdfError}\n                />\n            </>\n        )\n    }\n}\n\nexport default Import","import React, {Component} from 'react'\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nclass InputVector extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n        this.handleChangeX = this.handleChangeX.bind(this);\n        this.handleChangeY = this.handleChangeY.bind(this);\n        this.handleChangeZ = this.handleChangeZ.bind(this);\n\t}\n\n    handleChangeX(e) {\n        this.props.onChange({\n            x: e.target.value,\n            y: this.props.value.y,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeY(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: e.target.value,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeZ(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: this.props.value.y,\n            z: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Text>Voxel Size</InputGroup.Text>\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"x\"\n                    value={this.props.value.x}\n                    onChange={this.handleChangeX}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"y\"\n                    value={this.props.value.y}\n                    onChange={this.handleChangeY}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"z\"\n                    value={this.props.value.z}\n                    onChange={this.handleChangeZ}\n                />\n            </InputGroup>\n        )\n    }\n}\n\nexport default InputVector","import React, {Component} from 'react'\n\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\nimport InputVector from './InputVector'\n\nclass ImportDialog extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\n    this.state = {\n      fileProtein: \"\",\n      fileSegmentation: \"\",\n      voxelSize: {x: \"\", y: \"\", z: \"\"},\n      working: false\n    }\n\n    this.handleClickImport = this.handleClickImport.bind(this);\n\n    this.handleChangeFileProtein = this.handleChangeFileProtein.bind(this);\n    this.handleChangeFileSegmentation = this.handleChangeFileSegmentation.bind(this);\n    this.handleChangeVoxelSize = this.handleChangeVoxelSize.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\t}\n\n  handleChangeFileProtein(e) {\n    this.setState({\n      fileProtein: e.target.files[0]\n    })\n  }\n\n  handleChangeFileSegmentation(e) {\n    this.setState({\n      fileSegmentation: e.target.files[0]\n    })\n  }\n\n  handleChangeVoxelSize(value) {\n    this.setState({\n      voxelSize: value\n    })\n  }\n\n  async handleClickImport(e) {\n    this.setState({\n      working: true\n    })\n\n    this.props.onImport(this.state.fileProtein, this.state.fileSegmentation, this.state.voxelSize);\n\n    this.setState({\n      working: false\n    })\n  }\n\n  handleClose(e) {\n    this.props.onClose();\n  }\n\n  render() {\n    let formValid;\n    if (this.state.fileProtein\n        && this.state.fileSegmentation\n        && this.state.voxelSize.x\n        && this.state.voxelSize.y\n        && this.state.voxelSize.z\n        && !this.state.working) formValid = true;\n    else formValid = false;\n\n    let alert;\n    if (this.props.error) {\n      alert = <Alert variant=\"danger\">{this.props.error}</Alert>\n    }\n\n    return (\n        <Modal show={this.props.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Import Data</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Protein Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileProtein}\n                    />\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Segmentation Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileSegmentation}\n                    />\n                </Form.Group>\n                <InputVector\n                  value={this.state.voxelSize}\n                  onChange={this.handleChangeVoxelSize}\n                />\n            </Form>\n            {alert}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              disabled={!formValid}\n              onClick={this.handleClickImport}\n            >\n              Import\n            </Button>\n          </Modal.Footer>\n        </Modal>\n    )\n  }\n}\n\nexport default ImportDialog","import React, {Component} from 'react';\n\nimport \"../App.css\";\n\nimport Alert from 'react-bootstrap/Alert';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nclass LabeledProgressBar extends Component {\n\trender() {\n\t\tlet variant = \"\"\n\t\tif (this.props.progress >= 100) variant = \"success\";\n\t\tif (this.props.error) variant = \"danger\";\n\n\t\tlet animated = (this.props.progress < 100 && !this.props.error);\n\n\t\tlet alert;\n\t\tif (this.props.error) {\n\t\t\talert = <Alert variant=\"danger\">{this.props.error}</Alert>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"labeled-progress-bar\">\n\t\t\t\t<ProgressBar>\n\t\t\t\t\t<div className=\"label-front\" style={{clipPath: `inset(0 ${100-this.props.progress}% 0 0)`}}>{this.props.label}</div>\n\t\t\t\t\t<div className=\"label-back\">{this.props.label}</div>\n\t\t\t\t\t<ProgressBar striped variant={variant} animated={animated} now={this.props.progress} />\n\t\t\t\t</ProgressBar>\n\t\t\t\t{alert}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default LabeledProgressBar;","import React, {Component} from 'react'\n\nimport Modal from 'react-bootstrap/Modal';\n\nimport LabeledProgressBar from './LabeledProgressBar';\n\nclass ImportProgress extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// TODO: Add all data here as state.\n\t\tthis.state = {\n\t\t\tproteinProgress: 0,\n\t\t\tsegmentationProgress: 0,\n\t\t\tsdfProgress: 0,\n\t\t\tproteinError: \"\",\n\t\t\tsegmentationError: \"\",\n\t\t\tsdfError: \"\"\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n  \n\tcomponentWillUnmount() {\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal backdrop=\"static\" show={this.props.show}>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>Importing Data...</Modal.Title>\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Body>\n\t\t\t\t<div className=\"d-grid gap-3\">\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.proteinProgress}\n\t\t\t\t\t\terror={this.props.proteinError}\n\t\t\t\t\t\tlabel=\"Decode Protein TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.segmentationProgress}\n\t\t\t\t\t\terror={this.props.segmentationError}\n\t\t\t\t\t\tlabel=\"Decode Segmentation TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.sdfProgress}\n\t\t\t\t\t\terror={this.props.sdfError}\n\t\t\t\t\t\tlabel=\"Compute Distance Fields...\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nexport default ImportProgress","module.exports = __webpack_public_path__ + \"static/js/sdf-worker.d17a835f.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/tiff-worker.a6adfe81.chunk.worker.js\"","module.exports = \"in vec4 position;\\nuniform mat4 modelview;\\nuniform mat4 proj;\\nuniform vec3 cameraPos;\\nout vec3 vOrigin;\\nout vec3 vDirection;\\n\\nvoid main() {\\n    vOrigin = vec3( inverse( modelview ) * vec4( 0.0, 0.0, 0.0, 1.0 ) ).xyz;\\n    vDirection = position.xyz - vOrigin;\\n    gl_Position = proj * modelview * position;\\n}\"","module.exports = \"precision highp float;\\nprecision highp sampler3D;\\n\\nout vec4 FragColor;\\n\\nuniform sampler3D volume0;\\nuniform sampler3D volume1;\\nuniform sampler3D volume2;\\nuniform sampler3D volume3;\\nuniform sampler3D volume4;\\nuniform sampler3D volume5;\\nuniform sampler3D volume6;\\nuniform sampler3D volume7;\\nuniform sampler3D volume8;\\nuniform sampler3D volume9;\\n\\nuniform sampler3D sdf;\\n\\nuniform sampler2D texDepth;\\n\\nuniform sampler2D selection;\\nuniform sampler2D projection;\\n\\nuniform mat4 modelview;\\nuniform mat4 proj;\\n\\nuniform vec3 volumeSize;\\nuniform vec2 resolution;\\n\\nuniform float isovalue;\\n\\nuniform bool displayProtein;\\nuniform bool displayCompartments;\\nuniform bool useLod;\\n\\nuniform bool debugSamples;\\n\\nin vec3 vOrigin;\\nin vec3 vDirection;\\n\\nvec2 rayBoxDst(vec3 bmin, vec3 bmax, vec3 p, vec3 d) {\\n    vec3 t0 = (bmin - p) / d;\\n    vec3 t1 = (bmax - p) / d;\\n    vec3 tmin = min(t0, t1);\\n    vec3 tmax = max(t0, t1);\\n\\n    float dstA = max(max(tmin.x, tmin.y), tmin.z);\\n    float dstB = min(tmax.x, min(tmax.y, tmax.z));\\n\\n    float dstToBox = max(0.0, dstA);\\n    float dstInsideBox = max(0.0, dstB - dstToBox);\\n    return vec2(dstToBox, dstInsideBox);\\n}\\n\\n// https://github.com/kbinani/colormap-shaders/blob/master/shaders/glsl/MATLAB_summer.frag\\nvec3 colormap(float x) {\\n    return vec3(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4);\\n}\\n\\nvec3 matlab_spring(float x) {\\n    return vec3(1.0, clamp(x, 0.0, 1.0), clamp(1.0 - x, 0.0, 1.0));\\n}\\n\\n// Sample the protein channel, local coordinates.\\nvec2 sampleProtein(vec3 p, int lod) {\\n    if (lod == 0) {\\n        return texture(volume0, p/volumeSize + 0.5).rg;\\n    } else if (lod == 1) {\\n        return texture(volume1, p/volumeSize + 0.5).rg;\\n    } else if (lod == 2) {\\n        return texture(volume2, p/volumeSize + 0.5).rg;\\n    } else if (lod == 3) {\\n        return texture(volume3, p/volumeSize + 0.5).rg;\\n    } else if (lod == 4) {\\n        return texture(volume4, p/volumeSize + 0.5).rg;\\n    } else if (lod == 5) {\\n        return texture(volume5, p/volumeSize + 0.5).rg;\\n    } else if (lod == 6) {\\n        return texture(volume6, p/volumeSize + 0.5).rg;\\n    } else if (lod == 7) {\\n        return texture(volume7, p/volumeSize + 0.5).rg;\\n    } else if (lod == 8) {\\n        return texture(volume8, p/volumeSize + 0.5).rg;\\n    } else {\\n        return texture(volume9, p/volumeSize + 0.5).rg;\\n    }\\n}\\n\\nfloat sampleSdf(vec3 p) {\\n    return texture(sdf, p/volumeSize + 0.5).r * 255.0 / 10.0 - 5.0;;\\n}\\n\\nvoid calcNormalAndCurv(vec3 p, out vec3 normal, out float curv) {\\n    float h = 0.01; \\n    vec2 k = h * vec2(1., 0.);\\n\\n    float t1 = sampleSdf(p + volumeSize*k.xyy); float t2 = sampleSdf(p - volumeSize*k.xyy);\\n    float t3 = sampleSdf(p + volumeSize*k.yxy); float t4 = sampleSdf(p - volumeSize*k.yxy);\\n    float t5 = sampleSdf(p + volumeSize*k.yxx); float t6 = sampleSdf(p - volumeSize*k.yxx);\\n\\n    curv = (t1+t2+t3+t4+t5+t6-6.0*sampleSdf(p))/(h*h);\\n    normal = normalize(k.xyy * (t1-t2) + k.yxy * (t3-t4) + k.yyx * (t5-t6));\\n}\\n\\n\\nvoid main()\\n{\\n    float normalizedDepth = texture(texDepth, gl_FragCoord.xy / resolution).r;\\n    vec4 ndc = vec4(gl_FragCoord.xy / resolution * 2.0 - 1.0,\\n                    normalizedDepth * 2.0 - 1.0, 1.0f);\\n\\n    vec4 vcoords = inverse(proj) * ndc;\\n    vcoords /= vcoords.w;\\n    float depth = -vcoords.z;\\n\\n    vec3 rayDir = normalize( vDirection );\\n    vec2 boxDst = rayBoxDst(-0.5 * volumeSize, 0.5 * volumeSize, vOrigin, rayDir);\\n\\n    // Render render isosurface\\n    vec4 surfaceColor = vec4(0.0f);\\n    vec4 proteinColor = vec4(0.0f);\\n    \\n    if (displayCompartments) {\\n        vec3 rayPos = vOrigin + boxDst.x * rayDir;\\n        float dist = 0.0;\\n        while (dist < boxDst.y) {\\n            if (dist + boxDst.x > depth) break;\\n            // Simple sphere tracer.            \\n            float sdfVal = sampleSdf(rayPos);\\n            \\n            if (sdfVal < 0.01) {\\n                float curv;\\n                vec3 normal;\\n                calcNormalAndCurv(rayPos, normal, curv);\\n                float ldn = dot(normal, vec3(1.0, 0.0, 0.0));\\n                surfaceColor = mix(vec4(0.0, 0.0, 0.0, 1.0), vec4(colormap(abs(0.00001*curv)), 1.0), 0.5 + 0.5 * ldn);\\n                break;\\n            }\\n\\n            dist += sdfVal;\\n            rayPos += sdfVal * rayDir;\\n        }\\n        depth = min(depth, boxDst.x + dist);\\n    }\\n\\n    // Render volume.\\n    float steps = 0.0;\\n    vec3 rayPos = vOrigin + boxDst.x * rayDir;\\n\\n    float baseStepSize = 0.25;\\n    float dist = 0.0;\\n\\n    // This works better than an if statement for some reason (at least on Intel GPUs)\\n    float dstToMarch = float(displayProtein)*boxDst.y;\\n\\n    while (dist < dstToMarch) {\\n        float sdfVal = sampleSdf(rayPos);\\n\\n        float stepSize = baseStepSize;\\n        if (sdfVal < isovalue) {\\n            int lod = 0;\\n            \\n            if (useLod) {\\n                if (dist + boxDst.x < 40.0) {\\n                    lod = 0;\\n                    stepSize = baseStepSize;\\n                } else if (dist + boxDst.x < 80.0) {\\n                    lod = 1;\\n                    stepSize = baseStepSize * 2.0;\\n                } else if (dist + boxDst.x < 160.0) {\\n                    lod = 2;\\n                    stepSize = baseStepSize * 4.0;\\n                } else {\\n                    lod = 3;\\n                    stepSize = baseStepSize * 8.0;\\n                }\\n            }\\n\\n            float density = 0.75 * sampleProtein(rayPos, lod).r;\\n            vec3 color = colormap(density);\\n\\n            vec3 uvw = rayPos / volumeSize + 0.5;\\n            float distanceToMaximum = clamp(1.0 - abs(uvw.z - texture(projection, uvw.xy).g) / 0.025, 0.0, 1.0);\\n            float selectionMask = texture(selection, uvw.xy).r;\\n\\n            float highlight = distanceToMaximum * selectionMask;\\n            color = mix(color, 3.0 * matlab_spring(density), highlight);\\n\\n            proteinColor.rgb += density * (1.0 - proteinColor.a) * color;\\n            proteinColor.a += density * (1.0 - proteinColor.a);\\n        }\\n\\n        dist += stepSize;\\n        rayPos += stepSize * rayDir;\\n\\n        steps += 1.0;\\n\\n        if (proteinColor.a > 0.99f) break;\\n        if (dist + boxDst.x > depth) break;\\n    }\\n\\n    if (debugSamples) {\\n        FragColor.rgb = matlab_spring(steps / 500.0);\\n        FragColor.a = 1.0;\\n    } else {\\n        FragColor.rgb = mix(surfaceColor.rgb, proteinColor.rgb, proteinColor.a);\\n        FragColor.a = max(surfaceColor.a, proteinColor.a);\\n    }\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"\\nvarying vec2 vUv;\\n\\nuniform sampler2D texGrid;\\nuniform sampler2D texVolume;\\n\\nvoid main() {\\n    gl_FragColor = vec4(mix(texture(texGrid, vUv).rgb, texture(texVolume, vUv).rgb, texture(texVolume, vUv).a), 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform highp sampler3D volume;\\nuniform highp sampler3D sdf;\\nuniform float isovalue;\\n\\nvoid main() {\\n    vec3 uv = vec3(vUv, 0.0);\\n    int col = textureSize(volume, 0).z;\\n\\n    // Maximum projection.\\n    float maxDensity = 0.0;\\n    float maxPos = 0.0;\\n    for (float i = 0.0; i < float(col); i += 1.0) {\\n        uv.z = i / float(col);\\n        float sdfVal = texture(sdf, uv).r * 255.0 / 10.0 - 5.0 - isovalue;\\n        if (sdfVal <= 0.01) {\\n            float density = texture(volume, uv).r;\\n            if (density > maxDensity) {\\n                maxDensity = density;\\n                maxPos = uv.z;\\n            }\\n        }\\n    }\\n\\n    gl_FragColor = vec4(maxDensity, maxPos, 0.0, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform bool clear;\\nuniform vec2 lastPosition;\\nuniform vec2 position;\\nuniform bool depressed;\\nuniform float resolution;\\nuniform int penMode;\\nuniform float penSize;\\nuniform sampler2D restore;\\nuniform bool doRestore;\\n\\n// https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\\n{\\n    vec2 pa = p-a, ba = b-a;\\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\\n    return length( pa - ba*h );\\n}\\n\\nvoid drawPixel() {\\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\n}\\n\\nvoid erasePixel() {\\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n\\nvoid main()\\n{\\n    if (clear) {\\n        erasePixel();\\n        return;\\n    }\\n\\n    if (doRestore) {\\n        gl_FragColor = texture(restore, vUv);\\n        return;\\n    }\\n\\n    if (sdSegment(vUv, position, lastPosition) < penSize/resolution && depressed) {\\n        if (penMode == 0) {\\n            drawPixel();\\n        } else {\\n            erasePixel();\\n        }\\n    } else {\\n        discard;\\n    }\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform highp sampler2D projection;\\nuniform highp sampler2D selection;\\n\\n// https://github.com/kbinani/colormap-shaders/blob/master/shaders/glsl/MATLAB_summer.frag\\nvec4 colormap(float x) {\\n    return vec4(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4, 1.0);\\n}\\n\\nvoid main() {\\n    vec4 c1 = colormap(texture(projection, vUv).r);\\n    vec4 c2 = texture(selection, vUv);\\n\\n    gl_FragColor = mix(0.5*c1, c1, c2.r);\\n    //gl_FragColor = vec4(vUv.x, vUv.y, 0.0, 1.0);\\n}\"","import React, { Component } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nclass Toolbar extends Component {\n\trender() {\n\t\tlet fullscreenIcon;\n\t\tif (this.props.fullscreen) fullscreenIcon = \"bi-fullscreen-exit\";\n\t\telse fullscreenIcon = \"bi-arrows-fullscreen\";\n\t\treturn (\n\t\t\t<ButtonToolbar className=\"justify-content-between\">\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleSidebar}\n\t\t\t\t><i className=\"bi-tools\"></i></Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onImportData}\n\t\t\t\t>Import Data</Button>\n\t\t\t</ButtonGroup>\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleFullscreen}\n\t\t\t\t><i className={fullscreenIcon}></i></Button>\n\t\t\t</ButtonGroup>\n\t\t\t</ButtonToolbar>\n\t\t)\n\t}\n}\n\nexport default Toolbar","import React from 'react'\n\nimport Col from 'react-bootstrap/Col';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Card from 'react-bootstrap/Card';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\nconst Sidebar = props => {\n\n    const handleSelectCompartmet = (index) => {\n        props.onCompartmentSelection(index);\n    }\n\n    const handleChangeDisplaySegmentation = (e) => {\n        props.onDisplaySegmentation(e.target.checked);\n    }\n\n    const handleChangeDisplayProtein = (e) => {\n        props.onDisplayProtein(e.target.checked);\n    }\n\n    const handleChangeDebugSamples = (e) => {\n        props.onDebugSamples(e.target.checked);\n    }\n\n    const handleChangeUseLod = (e) => {\n        props.onUseLod(e.target.checked);\n    }\n\n    const handleChangeIsovalue = (e) => {\n        props.onIsovalue(e.target.value);\n    }\n\n    let dropdownItems = [\n    <Dropdown.Item\n        onClick={() => handleSelectCompartmet(0)}\n    >All Compartments</Dropdown.Item>]\n    for (var i = 0; i < props.numCompartments-1; ++i) {\n        let index = i;\n        dropdownItems.push(\n        <Dropdown.Item\n            onClick={() => handleSelectCompartmet(index+1)}\n        >Compartment {index+1}</Dropdown.Item>);\n    }\n\n    let dropdownText = \"\";\n    if (props.numCompartments === 0) dropdownText = \"No Compartment Data\"\n    else if (props.selection === 0) dropdownText = \"All Compartments\";\n    else dropdownText = \"Compartment \" + props.selection;\n    return (\n        <Row md={3}>\n            <Col>\n                <Collapse in={props.open}>\n                    <Card>\n                        <Card.Body>\n                            <Form>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.displayProtein}\n                                        disabled={props.numCompartments===0}\n                                        onChange={handleChangeDisplayProtein}\n                                    />\n                                    <Form.Check.Label>Display Protein</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.displaySegmentation}\n                                        disabled={props.numCompartments===0}\n                                        onChange={handleChangeDisplaySegmentation}\n                                    />\n                                    <Form.Check.Label>Display Segmentation</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Range\n                                    disabled={props.numCompartments===0}\n                                    onChange={handleChangeIsovalue}\n                                />\n                                <Dropdown>\n                                    <Dropdown.Toggle disabled={props.numCompartments===0}>\n                                        {dropdownText}\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        {dropdownItems}\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                                Debug Options\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.debugSamples}\n                                        onChange={handleChangeDebugSamples}\n                                    />\n                                    <Form.Check.Label>Display Texture Samples</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.useLod}\n                                        onChange={handleChangeUseLod}\n                                    />\n                                    <Form.Check.Label>Use LoD</Form.Check.Label>\n                                </Form.Check>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </Collapse>\n            </Col>\n        </Row>\n    );\n}\n\nexport default Sidebar;","const Overlay = (props) => {\n    return <div className=\"overlay fill-screen d-grid gap-3\">\n        {props.children}\n    </div>\n}\n\nexport default Overlay","// \"Abstract\" class for the volume renderer.\n\nclass VolumeRenderer {\n\t// Renders the volume.\n\trender() { };\n\n\tsetVolumeSize(width, height, depth) { };\n\n\t// Set the protein data.\n\tsetProteinData(texture) { };\n\n\tsetDistanceData(textures) { };\n\n\tsetIsovalue(value) { };\n\n\tsetCompartmentIndex(value) { };\n\t\n\tsetDisplayCompartments(value) { };\n\n\tsetDisplayProtein(value) { };\n\n\tresizeCallback() { };\n\t\n\tsetSkeleton(vec) { };\n\n\tselectionUpdated() { };\n\n\tsetDebugSamples(value) { };\n\n\tsetUseLod(value) { };\n}\n\nexport { VolumeRenderer };","import { VolumeRenderer } from '../volume_renderer.js'\n\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1);\n\nclass VolumeRendererDefault extends VolumeRenderer {\n\tvolumeTexture\n\tsdfTextures\n\n\tdom;\n\trenderer;\n\n\tvolumeSize;\n\n\trenderTargetGrid;\n\trenderTargetVolume;\n\n\tcamera;\n\tcontrols;\n\n\tcameraCompose;\n\n\tbox;\n\tgrid;\n\n\tmaterialMarchVolume;\n\tmaterialCompose;\n\n\tsceneGrid;\n\tsceneVolume;\n\tsceneCompose;\n\n\tvolumeDirty;\n\n\tconstructor(renderer, dom) {\n\t\tsuper();\n\t\tthis.dom = dom;\n\t\tthis.renderer = renderer;\n\n\t\tthis.camera = new THREE.PerspectiveCamera( 75, dom.clientWidth/dom.clientHeight, 0.1, 5000 );\n\t\t\n\t\tthis.controls = new OrbitControls(this.camera, dom);\n\t\tthis.camera.position.y = -85;\n\t\tthis.controls.update();\n\n\t\tthis.materialMarchVolume = new THREE.RawShaderMaterial( {\n\t\t\tglslVersion: THREE.GLSL3,\n\t\t\tuniforms: {\n\t\t\t\tmodelview: { value: this.camera.matrixWorldInverse },\n\t\t\t\tproj: {value: this.camera.projectionMatrix },\n\t\t\t\tresolution: { value: new THREE.Vector2(0, 0) },\n\t\t\t\tvolume0: { value:null },\n\t\t\t\tvolume1: { value:null },\n\t\t\t\tvolume2: { value:null },\n\t\t\t\tvolume3: { value:null },\n\t\t\t\tvolume4: { value:null },\n\t\t\t\tvolume5: { value:null },\n\t\t\t\tvolume6: { value:null },\n\t\t\t\tvolume7: { value:null },\n\t\t\t\tvolume8: { value:null },\n\t\t\t\tvolume9: { value:null },\n\t\t\t\tvolumeSize: { value: null },\n\t\t\t\ttexDepth: { value: null },\n\t\t\t\tsdf: { value: null },\n\t\t\t\tisovalue: { value: null },\n\t\t\t\tdisplayProtein: { value: false },\n\t\t\t\tdisplayCompartments: { value: false },\n\t\t\t\tselection: { value: false },\n\t\t\t\tprojection: { value: false },\n\t\t\t\tdebugSamples: { value: false },\n\t\t\t\tuseLod: { value: true }\n\t\t\t},\n\t\t\tvertexShader: require('./shaders/volume_renderer_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/volume_renderer_frag.glsl'),\n\t\t\tside: THREE.BackSide,\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialCompose = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/post_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/post_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\ttexGrid: { value: null },\n\t\t\t\ttexVolume: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.sceneGrid = new THREE.Scene();\n\t\tconst size = 10;\n\t\tconst divisions = 10;\n\t\tthis.grid = new THREE.GridHelper( size, divisions );\n\t\tthis.grid.rotateX(0.5*Math.PI);\n\t\tthis.sceneGrid.add(this.grid);\n\t\t\n\t\tthis.grid.onBeforeRender = ( renderer, scene, camera, geometry, material, group ) => {\n\t\t\tvar pos = this.controls.target;\n\t\t\tthis.grid.position.x = pos.x;\n\t\t\tthis.grid.position.y = pos.y;\n\t\t\tthis.grid.position.z = pos.z;\n\t\t\tthis.grid.updateMatrixWorld();\n\t\t};\n\n\t\tconst geometry = new THREE.BoxGeometry();\n\t\tthis.sceneVolume = new THREE.Scene();\n\t\tthis.box = new THREE.Mesh(geometry, this.materialMarchVolume)\n\t\tthis.sceneVolume.add(this.box);\n\n\t\tthis.sceneCompose = new THREE.Scene();\n\t\tthis.cameraCompose = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialCompose);\n\t\tthis.sceneCompose.add(quad);\n\n\t\tthis.renderTargetVolume = new THREE.WebGLRenderTarget(0, 0);\n\t\tthis.renderTargetGrid = new THREE.WebGLRenderTarget(0, 0);\n\t\tthis.renderTargetGrid.depthTexture = new THREE.DepthTexture();\n\n\t\t\n\t\tthis.materialMarchVolume.uniforms.texDepth.value = this.renderTargetGrid.depthTexture;\n\t\tthis.materialCompose.uniforms.texGrid.value = this.renderTargetGrid.texture;\n\t\tthis.materialCompose.uniforms.texVolume.value = this.renderTargetVolume.texture;\n\n\t\tthis.volumeDirty = true;\n\n\t\tthis.controls.addEventListener('change', () => {\n\t\t\tthis.volumeDirty = true;\n\t\t} );\n\t\t\n\t\twindow.addEventListener('resize', () => {\n\t\t\tthis.resizeCallback();\n\t\t});\n\t\tthis.resizeCallback();\n\t};\n\n\t// Renders the volume.\n\trender() {\n\t\tif (!this.volumeTexture) return;\n\t\tif (!this.sdfTextures) return;\n\t\tif (!this.volumeDirty) return;\n\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\tconst left   = rect.left;\n\t\tconst bottom = window.innerHeight - rect.bottom;\n\n\t\tthis.renderer.setViewport(left, bottom, width, height);\n\t\tthis.renderer.setScissor(left, bottom, width, height);\n\t\tthis.renderer.setScissorTest(true);\n\t\t\n\t\tthis.controls.update();\n\n\t\tlet gl = this.renderer.getContext();\n\t\tthis.renderer.setRenderTarget(this.renderTargetGrid);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneGrid, this.camera);\n\n\t\tthis.renderer.setRenderTarget(this.renderTargetVolume);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneVolume, this.camera);\n\n\t\tthis.renderer.setRenderTarget(null);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneCompose, this.cameraCompose);\n\n\t\tthis.volumeDirty = false;\n\t};\n\n\tselectionUpdated() {\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetVolumeSize(width, height, depth) { \n\t\tthis.volumeSize = new THREE.Vector3(width, height, depth);\n\t\tthis.box.geometry = new THREE.BoxGeometry(this.volumeSize.x, this.volumeSize.y, this.volumeSize.z);\n\t\tthis.materialMarchVolume.uniforms.volumeSize.value = this.volumeSize;\n\t\tthis.volumeDirty = true;\n\t };\n\n\t// Set the protein data.\n\tsetProteinData(texture) {\n\t\tthis.volumeTexture = texture;\n\t\t\n\t\tfor (let i = 0; i < 9; ++i) {\n\t\t\tthis.materialMarchVolume.uniforms[\"volume\" + i].value = this.volumeTexture[i];\n\t\t}\n\t\t\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDistanceData(textures, dims) {\n\t\tthis.sdfTextures = textures;\n\t\tthis.materialMarchVolume.uniforms.sdf.value = this.sdfTextures[0];\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetIsovalue(value) {\n\t\tthis.materialMarchVolume.uniforms.isovalue.value = value;\n\t\t//this.volumeDirty = true;\n\t}\n\n\tsetCompartmentIndex(value) {\n\t\tthis.materialMarchVolume.uniforms.sdf.value = this.sdfTextures[value];\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDisplayCompartments(value) {\n\t\tthis.materialMarchVolume.uniforms.displayCompartments.value = value;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDisplayProtein(value) {\n\t\tthis.materialMarchVolume.uniforms.displayProtein.value = value;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetSelectionTexture(texture) {\n\t\tthis.materialMarchVolume.uniforms.selection.value = texture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetProjectionTexture(texture) {\n\t\tthis.materialMarchVolume.uniforms.projection.value = texture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tresizeCallback() {\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\t//const left   = rect.left;\n\t\t//const bottom = window.innerHeight - rect.bottom;\n\t\t\n\t\tthis.camera.aspect = width/height;\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderTargetVolume.setSize(width, height);\n\t\tthis.renderTargetGrid.setSize(width, height);\n\t\tthis.materialMarchVolume.uniforms.resolution.value = new THREE.Vector2(width, height);\n\n\t\tthis.renderTargetGrid.depthTexture = new THREE.DepthTexture();\n\t\tthis.materialMarchVolume.uniforms.texDepth.value = this.renderTargetGrid.depthTexture;\n\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetSkeleton(vec) {\n\t\tvar geom = new THREE.BufferGeometry();\n\n\t\tgeom.setAttribute( 'position', new THREE.BufferAttribute( vec, 3 ) );\n\n\t\tvar points = new THREE.Points(geom);\n\n\t\tpoints.position.x = -0.5*this.volumeSize.x;\n\t\tpoints.position.y = -0.5*this.volumeSize.y;\n\t\tpoints.position.z = -0.5*this.volumeSize.z;\n\n\t\tthis.sceneGrid.add(points);\n\t}\n\n\tsetDebugSamples(value) {\n\t\tthis.materialMarchVolume.uniforms.debugSamples.value = value;\n\t}\n\n\tsetUseLod(value) {\n\t\tthis.materialMarchVolume.uniforms.useLod.value = value;\n\t}\n}\n\nexport { VolumeRendererDefault };","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n//import { VolumeRendererReprojected } from './volume/reprojected/volume_renderer_reprojected.js'\nimport { VolumeRendererDefault} from './volume/default/volume_renderer_default.js'\nimport { MapRenderer } from \"./map/map_renderer.js\"\n\nvar stats = new Stats();\nstats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\ndocument.body.appendChild( stats.dom );\n\nvar canvas;\nvar mainView;\nvar mapView;\n\nvar renderer;\n\nvar volumeRenderer = null;\nvar mapRenderer = null;\n// Configure coordinate system to use Z as up.\n\nasync function main(initCanvas, initMainView, initMapView) {\n\tcanvas = initCanvas;\n\tmainView = initMainView;\n\tmapView = initMapView;\n\trenderer = new THREE.WebGLRenderer({canvas: canvas, preserveDrawingBuffer: true});\n\trenderer.autoClearColor = false;\n\tawait init();\n\tanimate();\n}\n\nfunction setVolumeSize(size) {\n\tvolumeRenderer.setVolumeSize(size[0], size[1], size[2]);\n}\n\nfunction setProteinData(pyramid, dims) {\n\tlet textures = []\n\tlet w = dims[0];\n\tlet h = dims[1];\n\tlet d = dims[2];\n\tfor (let i = 0; i < pyramid.length; ++i) {\n\t\tconst texture = new THREE.DataTexture3D(pyramid[i], w, h, d);\n\t\ttexture.format = THREE.RGFormat;\n\t\ttexture.type = THREE.UnsignedByteType;\n\t\ttexture.internalFormat = 'RG8';\n\t\ttexture.minFilter = THREE.LinearFilter;\n\t\ttexture.magFilter = THREE.LinearFilter;\n\t\ttexture.generateMipmaps = false;\n\t\ttexture.unpackAlignment = 1;\n\n\t\tw = Math.ceil(w/2.0);\n\t\th = Math.ceil(h/2.0);\n\t\td = Math.ceil(d/2.0);\n\n\t\ttextures.push(texture);\n\t}\n\n\t\n\tvolumeRenderer.setProteinData(textures);\n\tmapRenderer.setProteinData(textures[0]);\n}\n\nfunction setDistanceFieldData(arrays, dims) {\n\tlet textures = [];\n\tfor (var i = 0; i < arrays.length; ++i) {\n\t\tconst tex = new THREE.DataTexture3D(arrays[i], dims[0], dims[1], dims[2]);\n\t\ttex.format = THREE.RedFormat;\n\t\ttex.minFilter = THREE.LinearFilter;\n\t\ttex.magFilter = THREE.LinearFilter;\n\t\ttex.unpackAlignment = 1;\n\n\t\ttextures.push(tex);\n\t}\n\tvolumeRenderer.setDistanceData(textures);\n\tmapRenderer.setDistanceData(textures);\n}\n\nasync function init() {\n\tvolumeRenderer = new VolumeRendererDefault(renderer, mainView);\n\tmapRenderer = new MapRenderer(renderer, mapView, handleSelectionUpdated);\n\n\tvolumeRenderer.setSelectionTexture(mapRenderer.getSeletionTexture());\n\tvolumeRenderer.setProjectionTexture(mapRenderer.getProjectionTexture());\n}\n\nfunction animate() {\n\trequestAnimationFrame( animate );\n\t\n\tvolumeRenderer.render();\n\tmapRenderer.render();\n\n\tstats.update();\n}\n\nfunction handleSelectionUpdated() {\n\tvolumeRenderer.selectionUpdated();\n}\n\nfunction setIsovalue(value) {\n\tvolumeRenderer.setIsovalue(value);\n\tmapRenderer.setIsovalue(value);\n}\n\nfunction setDisplayProtein(value) {\n\tvolumeRenderer.setDisplayProtein(value);\n}\n\nfunction setDisplayCompartment(value) {\n\tvolumeRenderer.setDisplayCompartments(value);\n}\n\nfunction setCompartmentIndex(index) {\n\tvolumeRenderer.setCompartmentIndex(index);\n\tmapRenderer.setCompartmentIndex(index);\n}\n\nfunction setSkeleton(vec) {\n\tvolumeRenderer.setSkeleton(vec);\n}\n\nfunction deleteSelection() {\n\tif (mapRenderer) {\n\t\tmapRenderer.deleteSelection();\n\t}\n}\n\nfunction getMapSelectionPixels() {\n\treturn mapRenderer.getSelectionPixels();\n}\n\nfunction getMapProjectionPixels() {\n\treturn mapRenderer.getProjectionPixels();\n}\n\nfunction setMapSelectionPixels(pixels, width, height) {\n\tconst texture = new THREE.DataTexture( pixels, width, height, THREE.RGBAFormat );\n\tmapRenderer.setSelectionFromTexture(texture);\n}\n\nfunction setDebugSamples(value) {\n\tvolumeRenderer.setDebugSamples(value);\n}\n\nfunction setUseLod(value) {\n\tvolumeRenderer.setUseLod(value);\n}\n\nfunction setPenMode(mode) {\n\tif (mapRenderer) {\n\t\tmapRenderer.setPenMode(mode);\n\t}\n}\n\nfunction setPenSize(value) {\n\tif (mapRenderer) {\n\t\tmapRenderer.setPenSize(value);\n\t}\n}\n\nexport { main, setDistanceFieldData, setProteinData, setIsovalue, setDisplayProtein, setDisplayCompartment, setCompartmentIndex, setVolumeSize, deleteSelection, setSkeleton, setMapSelectionPixels, getMapSelectionPixels, getMapProjectionPixels, setDebugSamples, setUseLod, setPenMode, setPenSize};","import * as THREE from 'three';\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nclass MapRenderer {\n    dom;\n    renderer;\n\n    camera;\n\n    sceneSelection;\n    materialSelection;\n\n\tsceneProjection;\n\tmaterialProjection;\n\n\tsceneMap;\n\tmaterialMap;\n\n\tplaneMap;\n\n\tvolumeTexture;\n\tsdfTextures;\n\n\trenderTargetSelection;\n\trenderTargetProjection;\n\n\tprojectionDirty;\n\tselectionDirty;\n\n\tconstructor(renderer, dom, onSelectionUpdated) {\n\t\tthis.dom = dom;\n\t\tthis.renderer = renderer;\n\n\t\tthis.onSelectionUpdated = onSelectionUpdated;\n\n        this.materialProjection = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/mip_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/mip_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tvolume: { value: null },\n\t\t\t\tsdf: { value: null },\n\t\t\t\tisovalue: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialSelection = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/selection_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/selection_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tclear: { value: true },\n\t\t\t\tlastPosition: { value: new THREE.Vector2(0.0, 0.0) },\n\t\t\t\tposition: { value: new THREE.Vector2(0.0, 0.0) },\n\t\t\t\tdepressed: { value: false },\n\t\t\t\tpenMode: {value: 0 },\n\t\t\t\tpenSize: {value: 8.0 },\n\t\t\t\tresolution: {value: 1024},\n\t\t\t\trestore: {value: null },\n\t\t\t\tdoRestore: { value: false }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialMap = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/map_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/map_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tselection: { value: null },\n\t\t\t\tprojection: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.renderTargetSelection = new THREE.WebGLRenderTarget(1024, 1024);\n\t\tthis.renderTargetProjection = new THREE.WebGLRenderTarget(1024, 1024);\n\n\t\tconst aspect = dom.clientWidth/dom.clientHeight\n\n\t\tthis.camera = new THREE.OrthographicCamera( -aspect, aspect, 1, - 1, 0, 2 );\n\t\tthis.controls = new OrbitControls(this.camera, dom);\n\t\tthis.camera.position.z = 1.0;\n\t\tthis.controls.enableRotate = false;\n\t\tthis.controls.update();\n\n\t\t{\n\t\tthis.cameraProjection = new THREE.OrthographicCamera(-1, 1, 1, - 1, 0, 2 );\n\t\tthis.sceneProjection = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialProjection);\n\t\tthis.planeMap = quad;\n\t\tthis.sceneProjection.add(quad);\n\t\t}\n\n\t\t{\n\t\tthis.cameraSelection = new THREE.OrthographicCamera(-1, 1, 1, - 1, 0, 2 );\n\t\tthis.sceneSelection = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialSelection);\n\t\tthis.sceneSelection.add(quad);\n\t\t}\n\n\t\t{\n\t\tthis.sceneMap = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialMap);\n\t\tthis.sceneMap.add(quad);\n\t\tthis.sceneMap.add(this.camera);\n\t\t}\n\n\t\tthis.materialMap.uniforms.projection.value = this.renderTargetProjection.texture;\n\t\tthis.materialMap.uniforms.selection.value = this.renderTargetSelection.texture;\n\n\t\tthis.projectionDirty = false;\n\t\tthis.selectionDirty = false;\n\n\t\tthis.dom.addEventListener('mousemove', e => { this.mouseMove(e); });\n\t\tthis.dom.addEventListener('mousedown', e => { this.mouseDown(e);});\n\t\tthis.dom.addEventListener('mouseup', e => { this.mouseUp(e);});\n\t\tthis.dom.addEventListener('mouseout', e => { this.mouseOut(e);});\n\t\t\t\n\t\twindow.addEventListener('resize', () => {\n\t\t\tthis.resizeCallback();\n\t\t});\n\t\tthis.resizeCallback();\n    };\n\n\tgetMousePosition(e) {\n\t\tconst raycaster = new THREE.Raycaster();\n\t\tconst mouse = new THREE.Vector2();\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\tmouse.x = (e.clientX - rect.left) / (rect.right - rect.left) * 2.0 - 1.0; //x position within the element.\n\t\tmouse.y = 1.0 - (e.clientY - rect.top) / (rect.bottom - rect.top) * 2.0; //y position within the element.\n\t\traycaster.setFromCamera( mouse.clone(), this.camera );\n\t\tconst intersects = raycaster.intersectObject(this.planeMap);\n\n\t\tif (intersects.length > 0) {\n\t\t\treturn intersects[0].uv;\n\t\t}\n\t\treturn null;\n\t}\n\n\tmouseDown(e) {\n\t\tconst mouse = this.getMousePosition(e);\n\t\tif (mouse) {\n\t\t\tthis.materialSelection.uniforms.position.value = mouse;\n\t\t\tthis.materialSelection.uniforms.lastPosition.value = this.materialSelection.uniforms.position.value;\n\t\t\tthis.selectionDirty = true;\n\t\t\tthis.materialSelection.uniforms.depressed.value = true;\n\t\t}\n\t}\n\n\tmouseMove(e) {\n\t\tif (this.materialSelection.uniforms.depressed.value) {\n\t\t\tconst mouse = this.getMousePosition(e);\n\t\t\tif (mouse) {\n\t\t\t\tthis.materialSelection.uniforms.lastPosition.value = this.materialSelection.uniforms.position.value;\n\t\t\t\tthis.materialSelection.uniforms.position.value = mouse;\n\t\t\t\tthis.selectionDirty = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tmouseOut(e) {\n\t\tthis.materialSelection.uniforms.depressed.value = false;\n\t}\n\n\tmouseUp(e) {\n\t\tthis.materialSelection.uniforms.depressed.value = false;\n\t}\n\n\trenderProjection() {\n\t\tthis.renderer.setViewport(0, 0, 1024, 1024);\n\t\tthis.renderer.setScissorTest(false);\n\t\tthis.renderer.setRenderTarget(this.renderTargetProjection);\n\t\tthis.renderer.render(this.sceneProjection, this.cameraProjection);\n\t\tthis.projectionDirty = false;\n\t}\n\n\trenderSelection() {\n\t\tthis.renderer.setViewport(0, 0, 1024, 1024);\n\t\tthis.renderer.setScissorTest(false);\n\t\tthis.renderer.setRenderTarget(this.renderTargetSelection);\n\t\tthis.renderer.render(this.sceneSelection, this.cameraSelection);\n\t\tif (this.materialSelection.uniforms.clear.value) {\n\t\t\tthis.materialSelection.uniforms.clear.value = false;\n\t\t}\n\n\t\tif (this.materialSelection.uniforms.doRestore.value) {\n\t\t\tthis.materialSelection.uniforms.doRestore.value = false;\n\t\t}\n\t\tthis.onSelectionUpdated();\n\t\tthis.selectionDirty = false;\n\t\t//$(document).trigger(\"selectionUpdated\");\n\t}\n\n\trenderMap() {\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\tconst left   = rect.left;\n\t\tconst bottom = window.innerHeight - rect.bottom;\n\t\t\n\t\tthis.renderer.setViewport(left, bottom, width, height);\n\t\tthis.renderer.setScissor(left, bottom, width, height);\n\t\tthis.renderer.setScissorTest(true);\n\n\t\tthis.renderer.setRenderTarget(null);\n\t\tlet gl = this.renderer.getContext();\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneMap, this.camera);\n\t}\n\n\t// Renders the volume.\n\trender() {\n\t\tif (this.selectionDirty) this.renderSelection();\n\t\tif (this.projectionDirty) this.renderProjection();\n\n\t\tthis.renderMap();\n\t};\n\n\tsetVolumeSize(width, height, depth) { };\n\n\t// Set the protein data.\n\tsetProteinData(texture) {\n\t\tthis.volumeTexture = texture;\n\t\tthis.materialProjection.uniforms.volume.value = this.volumeTexture;\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetDistanceData(textures) {\n\t\tthis.sdfTextures = textures;\n\t\tthis.materialProjection.uniforms.sdf.value = this.sdfTextures[0];\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetIsovalue(value) {\n\t\tthis.materialProjection.uniforms.isovalue.value = value;\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetCompartmentIndex(value) {\n\t\tthis.materialProjection.uniforms.sdf.value = this.sdfTextures[value];\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetPenSize(value) {\n\t\tthis.materialSelection.uniforms.penSize.value = value;\n\t};\n\n\tsetPenMode(mode) {\n\t\tif (mode === \"draw\") {\n\t\t\tthis.materialSelection.uniforms.penMode.value = 0;\n\t\t} else {\n\t\t\tthis.materialSelection.uniforms.penMode.value = 1;\n\t\t}\n\t}\n\n\tgetSeletionTexture() {\n\t\treturn this.renderTargetSelection.texture;\n\t};\n\n\tgetSelectionPixels() {\n\t\tvar pixels = {\n\t\t\twidth: this.renderTargetSelection.width,\n\t\t\theight: this.renderTargetSelection.height,\n\t\t\tbuffer: new Uint8Array(this.renderTargetSelection.width*this.renderTargetSelection.width*4)\n\t\t}\n\t\tthis.renderer.readRenderTargetPixels(this.renderTargetSelection, 0, 0, pixels.width, pixels.height, pixels.buffer);\n\t\treturn pixels;\n\t};\n\n\tsetSelectionFromTexture(texture) {\n\t\tthis.materialSelection.uniforms.doRestore.value = true;\n\t\tthis.materialSelection.uniforms.restore.value = texture;\n\t\tthis.selectionDirty = true;\n\t}\n\n\tgetProjectionPixels() {\n\t\tvar pixels = {\n\t\t\twidth: this.renderTargetProjection.width,\n\t\t\theight: this.renderTargetProjection.height,\n\t\t\tbuffer: new Uint8Array(this.renderTargetProjection.width*this.renderTargetProjection.width*4)\n\t\t}\n\t\tthis.renderer.readRenderTargetPixels(this.renderTargetProjection, 0, 0, pixels.width, pixels.height, pixels.buffer);\n\t\treturn pixels;\n\t}\n\n\tgetProjectionTexture() {\n\t\treturn this.renderTargetProjection.texture;\n\t}\n\n\tdeleteSelection() {\n\t\tthis.materialSelection.uniforms.clear.value = true;\n\t\tthis.selectionDirty = true;\n\t}\n\n\tresizeCallback() {\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\n\t\tconst aspect = this.dom.clientWidth/this.dom.clientHeight\n\t\t\n\t\tthis.camera.left = -aspect;\n\t\tthis.camera.right = aspect;\n\t\tthis.camera.updateProjectionMatrix();\n\t};\n}\n\nexport { MapRenderer };","import React, { useRef, useEffect } from 'react'\n\nimport * as Renderer from '../renderers/renderer.js'\n\nconst Canvas = props => {\n\tconst canvasRef = useRef(null)\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.main(canvasRef.current, props.mainView, props.mapView);\n\t\t}\n\t}, [props.mainView, props.mapView, props.ready])\n\n\t\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setDistanceFieldData(props.sdf.buffers, props.sdf.dims);\n\t\t}\n\t}, [props.sdf, props.ready])\n\t\n\t\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setProteinData(props.protein.buffer, props.protein.dims);\n\t\t}\n\t}, [props.protein, props.ready])\n\n\t\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setVolumeSize(props.volumeSize);\n\t\t}\n\t}, [props.volumeSize, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setDisplayProtein(props.displayProtein);\n\t\t}\n\t}, [props.displayProtein, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setDisplayCompartment(props.displaySegmentation);\n\t\t}\n\t}, [props.displaySegmentation, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setCompartmentIndex(props.compartmentIndex);\n\t\t}\n\t}, [props.compartmentIndex, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setDebugSamples(props.debugSamples);\n\t\t}\t\n\t}, [props.debugSamples, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setUseLod(props.useLod);\n\t\t}\n\t}, [props.useLod, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready) {\n\t\t\tRenderer.setIsovalue(props.isovalue);\n\t\t}\n\t}, [props.isovalue, props.ready])\n\n\treturn (\n\t\t<canvas className=\"renderer\" ref={canvasRef}/>\n\t);\n}\n\nexport default Canvas","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nconst Plots = props => {\n    const data = {\n        labels: props.labelsHistogram,\n        datasets: [{\n            backgroundColor: 'rgb(255, 99, 132)',\n            borderColor: 'rgb(255, 99, 132)',\n            data: props.globalHistogram,\n            label: 'Global Histogram',\n        },\n        {\n            backgroundColor: 'rgb(0, 255, 132)',\n            borderColor: 'rgb(0, 255, 132)',\n            data: props.localHistogram,\n            label: 'Local Histogram',\n        }]\n    };\n\n    const options = {\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        beginAtZero: true,\n                    },\n                },\n            ],\n        },\n        maintainAspectRatio: false\n    };\n\n    return (\n        <>\n            <Bar\n                className=\"plots\"\n                data={data}\n                options={options}\n            />\n        </>\n    );\n};\n\nexport default Plots;","import React, { useEffect, useRef, useState } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nconst MapTools = props => {\n    const labelRef = useRef();\n\n    const [edit, setEdit] = useState(false);\n    const [editText, setEditText] = useState(\"\");\n    const [blurred, setBlurred] = useState(false);\n\n    useEffect(() => {\n        if (labelRef.current && edit) {\n            labelRef.current.focus();\n            labelRef.current.value = editText;\n        }\n    }, [edit, editText, labelRef])\n\n    const handleBlur = () => {\n        setBlurred(true);\n        handleEdit(false);\n    }\n\n    const handleClickEdit = () => {\n        if (blurred) {\n            // Prevents double trigger with blur event.\n            setBlurred(false);\n        } else {\n            handleEdit(true);\n        }\n    }\n\n    const handleEdit = (doEdit) => {;\n        setEdit(doEdit);\n        setEditText(props.label);\n    }\n\n    const handleChange = (e) => {\n        props.onLabel(e.target.value);\n    }\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleEdit();\n        }\n    }\n\n    let buttonOrForm;\n    if (edit === true) {\n        buttonOrForm = <FormControl\n            style={{marginLeft: \"auto\"}}\n            onKeyPress={handleKeyPress}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            ref={labelRef}\n        />\n    } else {\n        buttonOrForm = <Button\n                            style={{marginLeft: \"auto\"}}\n                            onClick={props.onClick}\n                        >{props.label}</Button>\n    }\n\n    return(\n        <InputGroup>\n        {buttonOrForm}\n        <Button\n            onClick={handleClickEdit}\n        ><i className=\"bi-tag-fill\"></i></Button>\n        <Button\n            onClick={props.onExport}\n        ><i className=\"bi-download\"></i></Button>\n        <Button\n            onClick={props.onDelete}\n        ><i className=\"bi-trash-fill\"></i></Button>\n        </InputGroup>\n    );\n}\n\nexport default MapTools","import React, { useState, useEffect } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nimport StoreItem from './StoreItem';\n\nimport * as Renderer from '../renderers/renderer.js'\nimport localforage from 'localforage';\n\nimport * as UPNG from 'upng-js';\n\nimport { v4 as uuid } from 'uuid';\n\nconst dbName = 'selectionStore';\n\n// Create table 2 in databaseName\nvar storeData = localforage.createInstance({\n    name        : dbName,\n    storeName   : 'storeData',\n    description : '...'\n});\n\nconst MapTools = props => {\n\n    const [penSize, setPenSize] = useState(20);\n    const [penMode, setPenMode] = useState(\"draw\");\n    const [uuids, setUuids] = useState([]);\n\n    useEffect(() => {\n        reloadStore();\n    }, []);\n\n    const handleDelete = () => {\n        Renderer.deleteSelection();\n    };\n\n    const handlePenMode = (mode) => {\n        setPenMode(mode);\n        Renderer.setPenMode(mode);\n    }\n\n    const handlePenSize = (pt) => {\n        setPenSize(pt);\n        Renderer.setPenSize(pt);\n    };\n\n    const reloadStore = () => {\n        let list = {};\n        storeData.iterate(function(value, key, iterationNumber) {\n            list[key] = value.name;\n        }).then(() => {setUuids(list)})\n    }\n\n    const handleLoad = (uuid) => {\n        storeData.getItem(uuid).then((value) => {\n            Renderer.setMapSelectionPixels(value.data, value.width, value.height);\n        })\n    }\n\n    const handleDeleteStore = (uuid) => {\n        storeData.removeItem(uuid).then(reloadStore);\n    }\n\n    const handleSave = () => {\n        const selectionPixels = Renderer.getMapSelectionPixels();\n        storeData.setItem(uuid(), {name: \"New Selection\", \n                                   width: selectionPixels.width,\n                                   height: selectionPixels.height,\n                                   data: selectionPixels.buffer}).then(reloadStore);\n    }\n\n    const handleImport = () => {\n        let input = document.createElement('input');\n        input.type = 'file';\n\n        input.onchange = e => { \n            var file = e.target.files[0]; \n            new Promise(function(resolve, reject) {\n                var reader = new FileReader();\n                reader.readAsArrayBuffer(file)\n            \n                reader.onload = readerEvent => {\n                    resolve([readerEvent.target.result, file.name.replace('.png','')]);\n                }\n        \n                reader.onerror = _readerEvent => {\n                    reject(reader.error);\n                }\n        \n                reader.onabort = _readerEvent => {\n                    reject(\"FileReader was aborted!\");\n                }\n            }).then(([buffer, filename]) => {\n                let img = UPNG.decode(buffer);\n                let pixels = new Uint8Array(UPNG.toRGBA8(img)[0]);\n                storeData.setItem(uuid(), {name: filename, \n                    width: img.width,\n                    height: img.height,\n                    data: pixels}).then(reloadStore);\n            })\n        }\n\n        input.click();\n    }\n\n    const handleLabelStore = (uuid, label) => {\n        storeData.getItem(uuid).then((item) => {\n            item.name = label;\n            storeData.setItem(uuid, item).then(reloadStore);\n        })\n    }\n\n    const handleExportStore = (uuid) => {\n        storeData.getItem(uuid).then((item) => {\n            console.log(item.data);\n            let png = UPNG.encode([item.data.buffer], item.width, item.height, 0)\n            let blob = new Blob([png], {type: \"image/png\"});\n            let url = URL.createObjectURL(blob); \n            let fileLink = document.createElement('a');\n            fileLink.href = url;\n            fileLink.download = item.name;\n            fileLink.click();\n        })\n    }\n    \n    let storeList = []\n    for (const [key, value] of Object.entries(uuids)) {\n        storeList.push(\n            <StoreItem\n                label={value}\n                onClick={() => handleLoad(key)}\n                onDelete={()=> handleDeleteStore(key)}\n                onLabel={(label) => handleLabelStore(key, label)}\n                onExport={() => handleExportStore(key)}\n            />\n        )\n    }\n\n    return(\n        <div className=\"stack no-pointer-events\" style={{position: \"relative\"}}>\n            <div className=\"overlay d-flex flex-column-reverse pointer-events\" style={{overflowY: \"overlay\", height: \"80%\", right: 0, bottom: 0}}>\n                <div className=\"align-self-end d-grid gap-2\">\n                {storeList}\n                </div>\n            </div>\n            <div  className=\"overlay\">\n            <ButtonToolbar style={{flexDirection: \"column\", width: \"20pt\"}}>\n            <ButtonGroup vertical>\n                <Button\n                    onClick={handleDelete}\n                ><i className=\"bi-trash-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                <Button\n                    disabled={penMode===\"draw\"}\n                    onClick={() => {handlePenMode(\"draw\")}}\n                ><i className=\"bi-pencil-fill\"></i></Button>\n                <Button\n                    disabled={penMode===\"erase\"}\n                    onClick={() => {handlePenMode(\"erase\")}}\n                ><i className=\"bi-eraser-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                <Button\n                    disabled={penSize===40}\n                    onClick={() => {handlePenSize(40)}}\n                ><i style={{\"fontSize\": \"8pt\"}} className=\"bi-circle-fill\"></i></Button>\n                <Button\n                    disabled={penSize===20}\n                    onClick={() => {handlePenSize(20)}}\n                ><i style={{\"fontSize\": \"6pt\"}} className=\"bi-circle-fill\"></i></Button>\n                <Button\n                    disabled={penSize===10}\n                    onClick={() => {handlePenSize(10)}}\n                ><i style={{\"fontSize\": \"4pt\"}} className=\"bi-circle-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                    <Button\n                        onClick={handleSave}\n                    ><i className=\"fas fa-save\"></i></Button>\n                    <Button\n                        onClick={handleImport}\n                    ><i className=\"bi-upload\"></i></Button>\n            </ButtonGroup>\n            </ButtonToolbar>\n            </div>\n        </div>\n    );\n}\n\nexport default MapTools","import React, { useState, useRef, useEffect } from 'react'\n\nimport Button from 'react-bootstrap/Button'\n\nimport Canvas from './Canvas';\nimport Plots from './Plots'\nimport MapTools from './MapTools'\n\nconst Views= props => {\n    const mainRef = useRef(null);\n    const mapRef = useRef(null);\n\n    const [mainView, setMainView] = useState();\n    const [mapView, setMapView] = useState();\n\n    useEffect(() => {\n        setMainView(mainRef.current);\n        setMapView(mapRef.current);\n    }, []);\n\n    const handleClickImport = () => {\n        props.onClickImport();\n    }\n\n    let importPrompt;\n    if (!props.ready) importPrompt = (\n        <div className=\"pointer-events text-secondary h-100 d-flex justify-content-center align-items-center\">\n            <Button\n                variant=\"primary\"\n                size=\"lg\"\n                onClick={handleClickImport}\n            >\n                <i className=\"bi-plus-square\"></i>&nbsp;&nbsp;Import Data\n            </Button>\n        </div>\n    );\n    return(\n        <>\n\n        <div className=\"views d-flex flex-col\">\n            <div className=\"flex-fill d-flex flex-row\">\n                <div className=\"flex-fill stack-base\">\n                    <div className=\"stack\" ref={mainRef}></div>\n                    <div className=\"stack no-pointer-events\">{importPrompt}</div>\n                </div>\n                <div className=\"v-divider\"></div>\n                <div className=\"flex-fill d-flex flex-column\">\n                    <div className=\"flex-fill stack-base\">\n                        <div className=\"stack\"ref={mapRef}></div>\n                        <MapTools />\n                    </div>\n                    <div className=\"h-divider\"></div>\n                    <div className=\"flex-fill\">\n                        <Plots\n                            localHistogram={props.localHistogram}\n                            globalHistogram={props.globalHistogram}\n                            labelsHistogram={props.labelsHistogram}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n        <Canvas\n            mainView={mainView}\n            mapView={mapView}\n            sdf={props.sdf}\n            protein={props.protein}\n            volumeSize={props.volumeSize}\n            displayProtein={props.displayProtein}\n            displaySegmentation={props.displaySegmentation}\n            compartmentIndex={props.compartmentIndex}\n            ready={props.ready}\n            debugSamples={props.debugSamples}\n            useLod={props.useLod}\n            isovalue={props.isovalue}\n        />\n        </>\n    );\n}\n\nexport default Views","import React, { Component } from 'react'\n\nimport Import from './Import'\nimport Toolbar from './Toolbar';\nimport Sidebar from './Sidebar';\nimport Overlay from './Overlay';\nimport Views from './Views'\n\nclass Main extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tfullscreen: false,\n\t\t\tshowSidebar: false,\n\t\t\tshowImport: false,\n\t\t\tvoxelSize: [0, 0, 0],\n\t\t\tsdf: {buffers: [], dims: [0, 0, 0]},\n\t\t\tprotein: {buffer: [], dims: [0, 0, 0]},\n\t\t\tready: false,\n\t\t\tcompartmentIndex: 0,\n\t\t\tdisplaySegmentation: true,\n\t\t\tdisplayProtein: true,\n\t\t\tisovalue: 0,\n\t\t\tglobalHistogram: [],\n\t\t\tlabelsHistogram: [],\n\t\t\tlocalHistogram: [],\n\t\t\t// Debug variables\n\t\t\tdebugSamples: false,\n\t\t\tuseLod: true\n\t\t}\n\t\t\n\t\tthis.handleShowImport = this.handleShowImport.bind(this);\n\t\tthis.handleToggleFullscreen = this.handleToggleFullscreen.bind(this);\n\t\tthis.handleToggleSidebar = this.handleToggleSidebar.bind(this);\n\t\tthis.handleAbortImport = this.handleAbortImport.bind(this);\n\t\tthis.handleCompleteImport = this.handleCompleteImport.bind(this);\n\t\tthis.handleCompartmentSelection = this.handleCompartmentSelection.bind(this);\n\t\tthis.handleDisplaySegmentation = this.handleDisplaySegmentation.bind(this);\n\t\tthis.handleDisplayProtein = this.handleDisplayProtein.bind(this);\n\t\tthis.handleDebugSamples = this.handleDebugSamples.bind(this);\n\t\tthis.handleUseLod = this.handleUseLod.bind(this);\n\t\tthis.handleIsovalue = this.handleIsovalue.bind(this);\n\t}\n\n\thandleShowImport() {\n\t\tthis.setState({\n\t\t\tshowImport: true\n\t\t});\n\t}\n\n\thandleAbortImport() {\n\t\tthis.setState({\n\t\t\tshowImport: false\n\t\t});\n\t}\n\n\thandleCompleteImport(sdfBuffers, proteinBuffers, bufferDims, voxelSize, hist, histLabels) {\n\t\tthis.setState({\n\t\t\tsdf: {buffers: sdfBuffers, dims: bufferDims},\n\t\t\tprotein: {buffer: proteinBuffers, dims: bufferDims},\n\t\t\tvoxelSize: voxelSize,\n\t\t\tshowImport: false,\n\t\t\tready: true,\n\t\t\tglobalHistogram: hist,\n\t\t\tlabelsHistogram: histLabels,\n\t\t})\n\t}\n\n\thandleToggleFullscreen() {\n\t\tif (!this.state.fullscreen) {\n\t\t\tlet elem = document.documentElement;\n\t\t\tif (elem.requestFullscreen) {\n\t\t\t\telem.requestFullscreen();\n\t\t\t} else if (elem.webkitRequestFullscreen) {\n\t\t\t\telem.webkitRequestFullscreen();\n\t\t\t} else if (elem.msRequestFullscreen) {\n\t\t\t\telem.msRequestFullscreen();\n\t\t\t}\n\t\t} else {\n\t\t\tif (document.exitFullscreen) {\n\t\t\t\tdocument.exitFullscreen();\n\t\t\t} else if (document.webkitExitFullscreen) {\n\t\t\t\tdocument.webkitExitFullscreen();\n\t\t\t} else if (document.msExitFullscreen) {\n\t\t\t\tdocument.msExitFullscreen();\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfullscreen: !this.state.fullscreen\n\t\t})\n\t}\n\n\thandleToggleSidebar() {\n\t\tthis.setState({\n\t\t\tshowSidebar: !this.state.showSidebar\n\t\t})\n\t}\n\n\thandleCompartmentSelection(index) {\n\t\tthis.setState({\n\t\t\tcompartmentIndex: index\n\t\t})\n\t}\n\n\thandleDisplaySegmentation(value) {\n\t\tthis.setState({\n\t\t\tdisplaySegmentation: value\n\t\t})\n\t}\n\n\thandleDisplayProtein(value) {\n\t\tthis.setState({\n\t\t\tdisplayProtein: value\n\t\t})\n\t}\n\n\thandleDebugSamples(value) {\n\t\tthis.setState({\n\t\t\tdebugSamples: value\n\t\t})\n\t}\n\n\thandleUseLod(value) {\n\t\tthis.setState({\n\t\t\tuseLod: value\n\t\t})\n\t}\n\n\thandleIsovalue(value) {\n\t\tthis.setState({\n\t\t\tisovalue: value\n\t\t})\n\t}\n\n\trender() {\n\t\tconsole.log(\"HEY\")\n\t\tlet volumeSize = [\n\t\t\tthis.state.sdf.dims[0] * this.state.voxelSize[0],\n\t\t\tthis.state.sdf.dims[1] * this.state.voxelSize[1],\n\t\t\tthis.state.sdf.dims[2] * this.state.voxelSize[2]\n\t\t]\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Import\n\t\t\t\t\tshow={this.state.showImport}\n\t\t\t\t\tonAbort={this.handleAbortImport}\n\t\t\t\t\tonComplete={this.handleCompleteImport}\n\t\t\t\t/>\n\t\t\t\t<Overlay>\n\t\t\t\t\t<Toolbar\n\t\t\t\t\t\tfullscreen={this.state.fullscreen}\n\t\t\t\t\t\tonImportData={this.handleShowImport}\n\t\t\t\t\t\tonToggleFullscreen={this.handleToggleFullscreen}\n\t\t\t\t\t\tonToggleSidebar={this.handleToggleSidebar}\n\t\t\t\t\t/>\n\t\t\t\t\t<Sidebar\n\t\t\t\t\t\topen={this.state.showSidebar}\n\t\t\t\t\t\tnumCompartments={this.state.sdf.buffers.length}\n\t\t\t\t\t\tonCompartmentSelection={this.handleCompartmentSelection}\n\t\t\t\t\t\tselection={this.state.compartmentIndex}\n\t\t\t\t\t\tonDisplaySegmentation={this.handleDisplaySegmentation}\n\t\t\t\t\t\tonDisplayProtein={this.handleDisplayProtein}\n\t\t\t\t\t\tonDebugSamples={this.handleDebugSamples}\n\t\t\t\t\t\tonUseLod={this.handleUseLod}\n\t\t\t\t\t\tonIsovalue={this.handleIsovalue}\n\t\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\t/>\n\t\t\t\t</Overlay>\n\t\t\t\t<Views\n\t\t\t\t\tsdf={this.state.sdf}\n\t\t\t\t\tprotein={this.state.protein}\n\t\t\t\t\tvolumeSize={volumeSize}\n\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\tcompartmentIndex={this.state.compartmentIndex}\n\t\t\t\t\tready={this.state.ready}\n\t\t\t\t\tonClickImport={this.handleShowImport}\n\t\t\t\t\tlocalHistogram={this.state.localHistogram}\n\t\t\t\t\tglobalHistogram={this.state.globalHistogram}\n\t\t\t\t\tlabelsHistogram={this.state.labelsHistogram}\n\t\t\t\t\tdebugSamples={this.state.debugSamples}\n\t\t\t\t\tuseLod={this.state.useLod}\n\t\t\t\t\tisovalue={this.state.isovalue}\n\t\t\t\t/>\n\t\t\t</>\n\t\t)\n\t}\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nimport Main from './ui/Main';\n\nfunction App() {\n  return(\n      <div className=\"App\">\n        <Main />\n     </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}