{"version":3,"sources":["tiff.js","components/Import.js","components/InputVector.js","components/ImportDialog.js","components/LabeledProgressBar.js","components/ImportProgress.js","workers/sdf-worker.js","workers/tiff-worker.js","renderers/volume/default/shaders/volume_renderer_vert.glsl","renderers/volume/default/shaders/volume_renderer_frag.glsl","renderers/volume/default/shaders/post_vert.glsl","renderers/volume/default/shaders/post_frag.glsl","renderers/map/shaders/mip_vert.glsl","renderers/map/shaders/mip_frag.glsl","renderers/map/shaders/selection_vert.glsl","renderers/map/shaders/selection_frag.glsl","renderers/map/shaders/map_vert.glsl","renderers/map/shaders/map_frag.glsl","components/Toolbar.js","components/Sidebar.js","components/Overlay.js","components/Plots.js","components/StoreItem.js","renderers/volume/volume_renderer.js","renderers/volume/default/volume_renderer_default.js","renderers/renderer.js","renderers/map/map_renderer.js","components/MapTools.js","components/Views.js","components/Canvas.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Tiff","this","buffer","pixels","Uint8Array","width","height","depth","bits","file","a","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onload","readerEvent","target","result","onerror","_readerEvent","error","onabort","ifd","UTIF","Object","keys","length","Error","properties","t256","t257","t258","t277","i","sliceProperties","JSON","stringify","onError","onProgress","worker","Worker","name","type","decodeTiffBuffer","Comlink","terminate","Import","props","state","tiffProtein","tiffSegmentation","voxelSize","proteinProgress","segmentationProgress","sdfProgress","proteinError","segmentationError","sdfError","step","preImportError","handleImport","bind","handleClose","onProteinProgress","onSegmentationProgress","onProteinError","onSegmentationError","onSdfProgress","onSdfError","progress","setState","fileProtein","fileSegmentation","open","message","decode","reducer","accumulator","currentValue","Math","max","numCompartments","reduce","promises","workers","Array","p","b","push","sdf","sdfBuffers","pyramid","w","h","d","level0","j","k","pw","ph","pd","ceil","plevel","level","pi","pj","pk","floor","min","hist","Float32Array","area","histLabels","onComplete","parseFloat","x","y","z","onAbort","show","onImport","onClose","Component","InputVector","handleChangeX","handleChangeY","handleChangeZ","e","onChange","value","InputGroup","className","Text","Form","Control","placeholder","ImportDialog","working","handleClickImport","handleChangeFileProtein","handleChangeFileSegmentation","handleChangeVoxelSize","files","formValid","alert","Alert","variant","Modal","onHide","Header","closeButton","Title","Body","Group","Label","Footer","Button","disabled","onClick","LabeledProgressBar","animated","ProgressBar","style","clipPath","label","striped","now","ImportProgress","backdrop","module","exports","Toolbar","fullscreenIcon","fullscreen","ButtonToolbar","ButtonGroup","onToggleSidebar","onImportData","onToggleFullscreen","Sidebar","handleSelectCompartmet","index","onCompartmentSelection","dropdownItems","Dropdown","Item","dropdownText","selection","Row","md","Col","Collapse","in","Card","Check","Input","checked","displayProtein","onDisplayProtein","displaySegmentation","onDisplaySegmentation","Range","onIsovalue","Toggle","Menu","debugSamples","onDebugSamples","useLod","onUseLod","Overlay","children","Plots","data","labels","labelsHistogram","datasets","backgroundColor","borderColor","globalHistogram","localHistogram","options","scales","yAxes","ticks","beginAtZero","maintainAspectRatio","MapTools","labelRef","useRef","useState","edit","setEdit","editText","setEditText","blockBlur","setBlockBlur","useEffect","current","focus","buttonOrForm","handleEdit","doEdit","FormControl","marginLeft","onKeyPress","key","onLabel","onBlur","ref","onMouseEnter","onMouseLeave","onExport","onDelete","VolumeRenderer","texture","textures","vec","THREE","DefaultUp","canvas","mainView","mapView","renderer","VolumeRendererDefault","dom","camera","clientWidth","clientHeight","controls","OrbitControls","position","update","materialMarchVolume","glslVersion","uniforms","modelview","matrixWorldInverse","proj","projectionMatrix","resolution","volume0","volume1","volume2","volume3","volume4","volume5","volume6","volume7","volume8","volume9","volumeSize","texDepth","isovalue","displayCompartments","projection","vertexShader","require","fragmentShader","side","transparent","materialCompose","texGrid","texVolume","sceneGrid","grid","rotateX","PI","add","onBeforeRender","scene","geometry","material","group","pos","updateMatrixWorld","sceneVolume","box","sceneCompose","cameraCompose","plane","quad","renderTargetVolume","renderTargetGrid","depthTexture","volumeDirty","addEventListener","window","resizeCallback","volumeTexture","sdfTextures","rect","getBoundingClientRect","right","left","bottom","top","innerHeight","setViewport","setScissor","setScissorTest","gl","getContext","setRenderTarget","clear","COLOR_BUFFER_BIT","render","dims","setSize","innerWidth","aspect","updateProjectionMatrix","geom","setAttribute","points","MapRenderer","onSelectionUpdated","materialProjection","volume","materialSelection","lastPosition","depressed","penMode","penSize","restore","doRestore","materialMap","renderTargetSelection","renderTargetProjection","enableRotate","cameraProjection","sceneProjection","planeMap","cameraSelection","sceneSelection","sceneMap","projectionDirty","selectionDirty","mouseMove","mouseDown","mouseUp","mouseOut","raycaster","mouse","clientX","clientY","setFromCamera","clone","intersects","intersectObject","uv","button","getMousePosition","renderSelection","renderProjection","renderMap","mode","readRenderTargetPixels","stats","Stats","showPanel","document","body","appendChild","volumeRenderer","mapRenderer","initCanvas","initMainView","initMapView","preserveDrawingBuffer","autoClearColor","init","animate","handleSelectionUpdated","setSelectionTexture","getSeletionTexture","setProjectionTexture","getProjectionTexture","requestAnimationFrame","selectionUpdated","storeData","localforage","createInstance","storeName","description","setPenSize","setPenMode","uuids","setUuids","reloadStore","handlePenMode","Renderer","handlePenSize","pt","list","iterate","iterationNumber","then","handleLoad","uuid","getItem","setSelectionFromTexture","storeList","StoreItem","removeItem","item","setItem","handleLabelStore","console","log","png","UPNG","blob","Blob","url","URL","createObjectURL","fileLink","createElement","href","download","click","entries","overflowY","flexDirection","vertical","deleteSelection","selectionPixels","getSelectionPixels","input","onchange","replace","filename","img","Views","mainRef","mapRef","onMainView","onMapView","Canvas","canvasRef","ready","arrays","tex","format","minFilter","magFilter","unpackAlignment","setDistanceData","buffers","internalFormat","generateMipmaps","setProteinData","protein","size","setVolumeSize","setDisplayProtein","setDisplayCompartments","compartmentIndex","setCompartmentIndex","setDebugSamples","setUseLod","setIsovalue","Main","showSidebar","showImport","handleShowImport","handleToggleFullscreen","handleToggleSidebar","handleAbortImport","handleCompleteImport","handleCompartmentSelection","handleDisplaySegmentation","handleDisplayProtein","handleDebugSamples","handleUseLod","handleIsovalue","handleMainView","handleMapView","proteinBuffers","bufferDims","exitFullscreen","webkitExitFullscreen","msExitFullscreen","elem","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","from","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3b1eb1ea.chunk.js","sourcesContent":["import * as UTIF from 'utif';\n\nimport * as Comlink from 'comlink';\n\nclass Tiff {\n    constructor() {\n        this.buffer = null;\n        this.pixels = new Uint8Array();\n        this.width = 0;\n        this.height = 0;\n        this.depth = 0;\n        this.bits = 0;\n    }\n\n    async open(file) {\n        let buffer = await (() => {\n            return new Promise(function(resolve, reject) {\n                var reader = new FileReader();\n                reader.readAsArrayBuffer(file)\n            \n                reader.onload = readerEvent => {\n                    resolve(readerEvent.target.result);\n                }\n        \n                reader.onerror = _readerEvent => {\n                    reject(reader.error);\n                }\n        \n                reader.onabort = _readerEvent => {\n                    reject(\"FileReader was aborted!\");\n                }\n            });\n        })();\n\n        let ifd = UTIF.decode(buffer);\n        if (Object.keys(ifd[0]).length === 0) {\n            throw new Error(\"Could not decode TIFF file!\");\n        }\n\n        let properties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[0]);\n\n        if (properties.t277[0] !== 1) {\n            throw new Error(\"Only grayscale images are supported.\");\n        }\n    \n        if (properties.t258[0] !== 8) {\n            throw new Error(\"Only images with bit depth 8 are supported.\");\n        }\n    \n        for (var i = 0; i < ifd.length; ++i) {\n            let sliceProperties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[i]);\n    \n            if (JSON.stringify(properties) !== JSON.stringify(sliceProperties)) {\n                throw new Error(\"Slice \" + i + \" has incorrect dimensions or pixel depth.\");\n            }\n        }\n\n        this.buffer = buffer;\n        this.width = properties.t256[0];\n        this.height = properties.t257[0];\n        this.depth = ifd.length;\n        this.bits = properties.t258[0];\n    };\n\n    async decode(onError, onProgress) {\n        const worker = new Worker('./workers/tiff-worker.js', {\n            name: 'tiff-worker',\n            type: 'module'\n          });\n        const decodeTiffBuffer = Comlink.wrap(worker);\n        this.pixels = await decodeTiffBuffer(this.buffer, Comlink.proxy(onError), Comlink.proxy(onProgress));\n        worker.terminate();\n    };\n}\n\nexport { Tiff };","import React, { Component } from 'react'\n\nimport ImportDialog from './ImportDialog';\nimport ImportProgress from './ImportProgress';\n\nimport * as Comlink from 'comlink';\n\nimport { Tiff } from '../tiff';\n\nclass Import extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tiffProtein: \"\",\n            tiffSegmentation: \"\",\n            voxelSize: \"\",\n            proteinProgress: 0,\n            segmentationProgress: 0,\n            sdfProgress: 0,\n            proteinError: \"\",\n            segmentationError: \"\",\n            sdfError: \"\",\n            step: \"dialog\",\n            preImportError: \"\"\n        }\n\n        this.handleImport = this.handleImport.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.onProteinProgress = this.onProteinProgress.bind(this);\n        this.onSegmentationProgress = this.onSegmentationProgress.bind(this);\n        this.onProteinError = this.onProteinError.bind(this);\n        this.onSegmentationError = this.onSegmentationError.bind(this);\n        this.onSdfProgress = this.onSdfProgress.bind(this);\n        this.onSdfError = this.onSdfError.bind(this);\n    }\n\n    onProteinProgress(progress) {\n        this.setState({\n            proteinProgress: progress\n        })\n    }\n\n    onSegmentationProgress(progress) {\n        this.setState({\n            segmentationProgress: progress\n        })\n    }\n\n    onProteinError(error) {\n        this.setState({\n            proteinError: error\n        })\n    }\n\n    onSegmentationError(error) {\n        this.setState({\n            segmentationError: error\n        })\n    }\n\n    onSdfProgress(progress) {\n        this.setState({\n            sdfProgress: progress\n        })\n    }\n\n    onSdfError(error) {\n        this.setState({\n            sdfError: error\n        })\n    }\n\n    async handleImport(fileProtein, fileSegmentation, voxelSize) {\n        let tiffProtein = new Tiff();\n        let tiffSegmentation = new Tiff();\n    \n        try {\n          await tiffProtein.open(fileProtein);\n          await tiffSegmentation.open(fileSegmentation);\n        } catch (e) {\n          this.setState({\n            preImportError: e.message\n          });\n          return;\n        }\n    \n        if (tiffProtein.width !== tiffSegmentation.width || tiffProtein.height !== tiffSegmentation.height || tiffProtein.depth !== tiffSegmentation.depth) {\n          this.setState({\n            preImportError: \"Please make sure the protein and the segmentation data have the same dimensions.\"\n          });\n          return;\n        }\n\n        this.setState({\n            step: \"import\",\n            voxelSize: voxelSize,\n            tiffProtein: tiffProtein,\n            tiffSegmentation: tiffSegmentation,\n            segmentationProgress: 0,\n            proteinProgress: 0,\n            sdfProgress: 0,\n            segmentationError: \"\",\n            proteinError: \"\",\n            sdfError: \"\"\n        });\n        \n        // We can decode the TIFFs in parallel.\n        await tiffProtein.decode(this.onProteinError, this.onProteinProgress);\n        await tiffSegmentation.decode(this.onSegmentationError, this.onSegmentationProgress);\n        const reducer = (accumulator, currentValue) => Math.max(accumulator, currentValue);\n        var numCompartments = tiffSegmentation.pixels.reduce(reducer);\n\n        let promises = [];\n        let workers = [];\n        let progress = new Array(numCompartments+1);\n\n        for (let i = 0; i < numCompartments+1; ++i) {\n            const target = i;\n            const onProgress = (p) => {\n                progress[target] = p * 100;\n                this.onSdfProgress(progress.reduce((a, b) => a + b, 0) / (numCompartments + 1));\n            }\n            promises.push(new Promise(function(resolve, reject) {\n                const worker = new Worker('../workers/sdf-worker.js', {\n                    name: 'sdf-worker',\n                    type: 'module'\n                });\n                workers.push(worker);\n                const sdf = Comlink.wrap(worker);\n                let result = sdf(tiffSegmentation, voxelSize, target, Comlink.proxy(onProgress));\n                resolve(result);\n            }));\n        }\n\n        //const sdfBuffers = await Promise.all(promises); // This needs too much memory for some reason?\n        let sdfBuffers = [];\n        for (let i = 0; i < promises.length; ++i) {\n            sdfBuffers.push(await promises[i]);\n        }\n        for (let i = 0; i < workers.length; ++i) {\n            workers[i].terminate();\n        }\n        this.onSdfProgress(100);\n\n        // Compute pyramid.\n        let pyramid = [];\n        let w = tiffProtein.width;\n        let h = tiffProtein.height;\n        let d = tiffProtein.depth;\n\n        let level0 = new Uint8Array(2*w*h*d);\n        for (let i = 0; i < w; ++i) {\n            for (let j = 0; j < h; ++j) {\n                for (let k = 0; k < d; ++k) {\n                    level0[2*(k*w*h+j*w+i)] = tiffProtein.pixels[k*w*h+j*w+i];\n                    level0[2*(k*w*h+j*w+i)+1] = level0[2*(k*w*h+j*w)+i];\n                }\n            }\n        }\n        pyramid.push(level0);\n\n        while (true) {\n            let pw = w;\n            let ph = h;\n            let pd = d;\n            w = Math.ceil(w / 2.0);\n            h = Math.ceil(h / 2.0);\n            d = Math.ceil(d / 2.0);\n\n            let plevel = pyramid[pyramid.length - 1];\n            let level = new Uint8Array(2*w*h*d);\n            for (let pi = 0; pi < pw; ++pi) {\n                for (let pj = 0; pj < ph; ++pj) {\n                    for (let pk = 0; pk < pd; ++pk) {\n                        let i = Math.floor(pi/2.0);\n                        let j = Math.floor(pj/2.0);\n                        let k = Math.floor(pk/2.0);\n                        level[2*(k*w*h+j*w+i)] = Math.max(level[2*(k*w*h+j*w+i)], plevel[2*(pk*pw*ph+pj*pw+pi)]);\n                        level[2*(k*w*h+j*w+i)+1] = Math.min(level[2*(k*w*h+j*w+i)+1], plevel[2*(pk*pw*ph+pj*pw+pi)+1]);\n                    }\n                }\n            }\n            pyramid.push(level);\n\n            if (w <= 1 || h <= 1 || d <= 1) break;\n        }\n\n        // Compute global histogram.\n        const bitDepth = 8;\n        let hist = new Float32Array(2**bitDepth);\n        let area = new Float32Array(2**bitDepth);\n    \n        for (let i = 0; i < sdfBuffers[0].length; ++i) {\n            hist[sdfBuffers[0][i]] += tiffProtein.pixels[i];\n            area[sdfBuffers[0][i]] += 1.0;\n    \n        }\n    \n        for (let i = 0; i < hist.length; ++i) {\n            hist[i] = hist[i]/area[i];\n        }\n\n        let histLabels = [];\n        for (let i = 0; i < 256; ++i) {\n            histLabels.push(i / 10.0 - 5.0);\n        }\n    \n        this.setState({\n            step: \"dialog\"\n        });\n\n        this.props.onComplete(sdfBuffers, pyramid, [tiffProtein.width, tiffProtein.height, tiffProtein.depth],\n                              [parseFloat(voxelSize.x), parseFloat(voxelSize.y), parseFloat(voxelSize.z)],\n                              hist, histLabels);\n    }\n\n    handleClose() {\n        this.props.onAbort();\n    }\n\n    render() {\n        return (\n            <>\n                <ImportDialog\n                    show={this.state.step === \"dialog\" && this.props.show}\n                    error={this.state.preImportError}\n                    onImport={this.handleImport}\n                    onClose={this.handleClose}\n                />\n                <ImportProgress\n                    show={this.state.step === \"import\" && this.props.show}\n                    proteinProgress={this.state.proteinProgress}\n                    segmentationProgress={this.state.segmentationProgress}\n                    sdfProgress={this.state.sdfProgress}\n                    proteinError={this.state.proteinError}\n                    segmentationError={this.state.segmentationError}\n                    sdfError={this.state.sdfError}\n                />\n            </>\n        )\n    }\n}\n\nexport default Import","import React, {Component} from 'react'\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nclass InputVector extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n        this.handleChangeX = this.handleChangeX.bind(this);\n        this.handleChangeY = this.handleChangeY.bind(this);\n        this.handleChangeZ = this.handleChangeZ.bind(this);\n\t}\n\n    handleChangeX(e) {\n        this.props.onChange({\n            x: e.target.value,\n            y: this.props.value.y,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeY(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: e.target.value,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeZ(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: this.props.value.y,\n            z: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Text>Voxel Size</InputGroup.Text>\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"x\"\n                    value={this.props.value.x}\n                    onChange={this.handleChangeX}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"y\"\n                    value={this.props.value.y}\n                    onChange={this.handleChangeY}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"z\"\n                    value={this.props.value.z}\n                    onChange={this.handleChangeZ}\n                />\n            </InputGroup>\n        )\n    }\n}\n\nexport default InputVector","import React, {Component} from 'react'\n\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\nimport InputVector from './InputVector'\n\nclass ImportDialog extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\n    this.state = {\n      fileProtein: \"\",\n      fileSegmentation: \"\",\n      voxelSize: {x: \"\", y: \"\", z: \"\"},\n      working: false\n    }\n\n    this.handleClickImport = this.handleClickImport.bind(this);\n\n    this.handleChangeFileProtein = this.handleChangeFileProtein.bind(this);\n    this.handleChangeFileSegmentation = this.handleChangeFileSegmentation.bind(this);\n    this.handleChangeVoxelSize = this.handleChangeVoxelSize.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\t}\n\n  handleChangeFileProtein(e) {\n    this.setState({\n      fileProtein: e.target.files[0]\n    })\n  }\n\n  handleChangeFileSegmentation(e) {\n    this.setState({\n      fileSegmentation: e.target.files[0]\n    })\n  }\n\n  handleChangeVoxelSize(value) {\n    this.setState({\n      voxelSize: value\n    })\n  }\n\n  async handleClickImport(e) {\n    this.setState({\n      working: true\n    })\n\n    this.props.onImport(this.state.fileProtein, this.state.fileSegmentation, this.state.voxelSize);\n\n    this.setState({\n      working: false\n    })\n  }\n\n  handleClose(e) {\n    this.props.onClose();\n  }\n\n  render() {\n    let formValid;\n    if (this.state.fileProtein\n        && this.state.fileSegmentation\n        && this.state.voxelSize.x\n        && this.state.voxelSize.y\n        && this.state.voxelSize.z\n        && !this.state.working) formValid = true;\n    else formValid = false;\n\n    let alert;\n    if (this.props.error) {\n      alert = <Alert variant=\"danger\">{this.props.error}</Alert>\n    }\n\n    return (\n        <Modal show={this.props.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Import Data</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Protein Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileProtein}\n                    />\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Segmentation Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileSegmentation}\n                    />\n                </Form.Group>\n                <InputVector\n                  value={this.state.voxelSize}\n                  onChange={this.handleChangeVoxelSize}\n                />\n            </Form>\n            {alert}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              disabled={!formValid}\n              onClick={this.handleClickImport}\n            >\n              Import\n            </Button>\n          </Modal.Footer>\n        </Modal>\n    )\n  }\n}\n\nexport default ImportDialog","import React, {Component} from 'react';\n\nimport \"../App.css\";\n\nimport Alert from 'react-bootstrap/Alert';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nclass LabeledProgressBar extends Component {\n\trender() {\n\t\tlet variant = \"\"\n\t\tif (this.props.progress >= 100) variant = \"success\";\n\t\tif (this.props.error) variant = \"danger\";\n\n\t\tlet animated = (this.props.progress < 100 && !this.props.error);\n\n\t\tlet alert;\n\t\tif (this.props.error) {\n\t\t\talert = <Alert variant=\"danger\">{this.props.error}</Alert>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"labeled-progress-bar\">\n\t\t\t\t<ProgressBar>\n\t\t\t\t\t<div className=\"label-front\" style={{clipPath: `inset(0 ${100-this.props.progress}% 0 0)`}}>{this.props.label}</div>\n\t\t\t\t\t<div className=\"label-back\">{this.props.label}</div>\n\t\t\t\t\t<ProgressBar striped variant={variant} animated={animated} now={this.props.progress} />\n\t\t\t\t</ProgressBar>\n\t\t\t\t{alert}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default LabeledProgressBar;","import React, {Component} from 'react'\n\nimport Modal from 'react-bootstrap/Modal';\n\nimport LabeledProgressBar from './LabeledProgressBar';\n\nclass ImportProgress extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// TODO: Add all data here as state.\n\t\tthis.state = {\n\t\t\tproteinProgress: 0,\n\t\t\tsegmentationProgress: 0,\n\t\t\tsdfProgress: 0,\n\t\t\tproteinError: \"\",\n\t\t\tsegmentationError: \"\",\n\t\t\tsdfError: \"\"\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n  \n\tcomponentWillUnmount() {\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal backdrop=\"static\" show={this.props.show}>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>Importing Data...</Modal.Title>\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Body>\n\t\t\t\t<div className=\"d-grid gap-3\">\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.proteinProgress}\n\t\t\t\t\t\terror={this.props.proteinError}\n\t\t\t\t\t\tlabel=\"Decode Protein TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.segmentationProgress}\n\t\t\t\t\t\terror={this.props.segmentationError}\n\t\t\t\t\t\tlabel=\"Decode Segmentation TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.sdfProgress}\n\t\t\t\t\t\terror={this.props.sdfError}\n\t\t\t\t\t\tlabel=\"Compute Distance Fields...\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nexport default ImportProgress","module.exports = __webpack_public_path__ + \"static/js/sdf-worker.d17a835f.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/tiff-worker.a6adfe81.chunk.worker.js\"","module.exports = \"in vec4 position;\\nuniform mat4 modelview;\\nuniform mat4 proj;\\nuniform vec3 cameraPos;\\nout vec3 vOrigin;\\nout vec3 vDirection;\\n\\nvoid main() {\\n    vOrigin = vec3( inverse( modelview ) * vec4( 0.0, 0.0, 0.0, 1.0 ) ).xyz;\\n    vDirection = position.xyz - vOrigin;\\n    gl_Position = proj * modelview * position;\\n}\"","module.exports = \"precision highp float;\\nprecision highp sampler3D;\\n\\nout vec4 FragColor;\\n\\nuniform sampler3D volume0;\\nuniform sampler3D volume1;\\nuniform sampler3D volume2;\\nuniform sampler3D volume3;\\nuniform sampler3D volume4;\\nuniform sampler3D volume5;\\nuniform sampler3D volume6;\\nuniform sampler3D volume7;\\nuniform sampler3D volume8;\\nuniform sampler3D volume9;\\n\\nuniform sampler3D sdf;\\n\\nuniform sampler2D texDepth;\\n\\nuniform sampler2D selection;\\nuniform sampler2D projection;\\n\\nuniform mat4 modelview;\\nuniform mat4 proj;\\n\\nuniform vec3 volumeSize;\\nuniform vec2 resolution;\\n\\nuniform float isovalue;\\n\\nuniform bool displayProtein;\\nuniform bool displayCompartments;\\nuniform bool useLod;\\n\\nuniform bool debugSamples;\\n\\nin vec3 vOrigin;\\nin vec3 vDirection;\\n\\nvec2 rayBoxDst(vec3 bmin, vec3 bmax, vec3 p, vec3 d) {\\n    vec3 t0 = (bmin - p) / d;\\n    vec3 t1 = (bmax - p) / d;\\n    vec3 tmin = min(t0, t1);\\n    vec3 tmax = max(t0, t1);\\n\\n    float dstA = max(max(tmin.x, tmin.y), tmin.z);\\n    float dstB = min(tmax.x, min(tmax.y, tmax.z));\\n\\n    float dstToBox = max(0.0, dstA);\\n    float dstInsideBox = max(0.0, dstB - dstToBox);\\n    return vec2(dstToBox, dstInsideBox);\\n}\\n\\n// https://github.com/kbinani/colormap-shaders/blob/master/shaders/glsl/MATLAB_summer.frag\\nvec3 colormap(float x) {\\n    return vec3(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4);\\n}\\n\\nvec3 matlab_spring(float x) {\\n    return vec3(1.0, clamp(x, 0.0, 1.0), clamp(1.0 - x, 0.0, 1.0));\\n}\\n\\n// Sample the protein channel, local coordinates.\\nvec2 sampleProtein(vec3 p, int lod) {\\n    if (lod == 0) {\\n        return texture(volume0, p/volumeSize + 0.5).rg;\\n    } else if (lod == 1) {\\n        return texture(volume1, p/volumeSize + 0.5).rg;\\n    } else if (lod == 2) {\\n        return texture(volume2, p/volumeSize + 0.5).rg;\\n    } else if (lod == 3) {\\n        return texture(volume3, p/volumeSize + 0.5).rg;\\n    } else if (lod == 4) {\\n        return texture(volume4, p/volumeSize + 0.5).rg;\\n    } else if (lod == 5) {\\n        return texture(volume5, p/volumeSize + 0.5).rg;\\n    } else if (lod == 6) {\\n        return texture(volume6, p/volumeSize + 0.5).rg;\\n    } else if (lod == 7) {\\n        return texture(volume7, p/volumeSize + 0.5).rg;\\n    } else if (lod == 8) {\\n        return texture(volume8, p/volumeSize + 0.5).rg;\\n    } else {\\n        return texture(volume9, p/volumeSize + 0.5).rg;\\n    }\\n}\\n\\nfloat sampleSdf(vec3 p) {\\n    return texture(sdf, p/volumeSize + 0.5).r * 255.0 / 10.0 - 5.0;;\\n}\\n\\nvoid calcNormalAndCurv(vec3 p, out vec3 normal, out float curv) {\\n    float h = 0.01; \\n    vec2 k = h * vec2(1., 0.);\\n\\n    float t1 = sampleSdf(p + volumeSize*k.xyy); float t2 = sampleSdf(p - volumeSize*k.xyy);\\n    float t3 = sampleSdf(p + volumeSize*k.yxy); float t4 = sampleSdf(p - volumeSize*k.yxy);\\n    float t5 = sampleSdf(p + volumeSize*k.yxx); float t6 = sampleSdf(p - volumeSize*k.yxx);\\n\\n    curv = (t1+t2+t3+t4+t5+t6-6.0*sampleSdf(p))/(h*h);\\n    normal = normalize(k.xyy * (t1-t2) + k.yxy * (t3-t4) + k.yyx * (t5-t6));\\n}\\n\\n\\nvoid main()\\n{\\n    float normalizedDepth = texture(texDepth, gl_FragCoord.xy / resolution).r;\\n    vec4 ndc = vec4(gl_FragCoord.xy / resolution * 2.0 - 1.0,\\n                    normalizedDepth * 2.0 - 1.0, 1.0f);\\n\\n    vec4 vcoords = inverse(proj) * ndc;\\n    vcoords /= vcoords.w;\\n    float depth = -vcoords.z;\\n\\n    vec3 rayDir = normalize( vDirection );\\n    vec2 boxDst = rayBoxDst(-0.5 * volumeSize, 0.5 * volumeSize, vOrigin, rayDir);\\n\\n    // Render render isosurface\\n    vec4 surfaceColor = vec4(0.0f);\\n    vec4 proteinColor = vec4(0.0f);\\n    \\n    if (displayCompartments) {\\n        vec3 rayPos = vOrigin + boxDst.x * rayDir;\\n        float dist = 0.0;\\n        while (dist < boxDst.y) {\\n            if (dist + boxDst.x > depth) break;\\n            // Simple sphere tracer.            \\n            float sdfVal = sampleSdf(rayPos);\\n            \\n            if (sdfVal < 0.01) {\\n                float curv;\\n                vec3 normal;\\n                calcNormalAndCurv(rayPos, normal, curv);\\n                float ldn = dot(normal, vec3(1.0, 0.0, 0.0));\\n                surfaceColor = mix(vec4(0.0, 0.0, 0.0, 1.0), vec4(colormap(abs(0.00001*curv)), 1.0), 0.5 + 0.5 * ldn);\\n                break;\\n            }\\n\\n            dist += sdfVal;\\n            rayPos += sdfVal * rayDir;\\n        }\\n        depth = min(depth, boxDst.x + dist);\\n    }\\n\\n    // Render volume.\\n    float steps = 0.0;\\n    vec3 rayPos = vOrigin + boxDst.x * rayDir;\\n\\n    float baseStepSize = 0.25;\\n    float dist = 0.0;\\n\\n    // This works better than an if statement for some reason (at least on Intel GPUs)\\n    float dstToMarch = float(displayProtein)*boxDst.y;\\n\\n    while (dist < dstToMarch) {\\n        float sdfVal = sampleSdf(rayPos);\\n\\n        float stepSize = baseStepSize;\\n        if (sdfVal < isovalue) {\\n            int lod = 0;\\n            \\n            if (useLod) {\\n                if (dist + boxDst.x < 40.0) {\\n                    lod = 0;\\n                    stepSize = baseStepSize;\\n                } else if (dist + boxDst.x < 80.0) {\\n                    lod = 1;\\n                    stepSize = baseStepSize * 2.0;\\n                } else if (dist + boxDst.x < 160.0) {\\n                    lod = 2;\\n                    stepSize = baseStepSize * 4.0;\\n                } else {\\n                    lod = 3;\\n                    stepSize = baseStepSize * 8.0;\\n                }\\n            }\\n\\n            float density = 0.75 * sampleProtein(rayPos, lod).r;\\n            vec3 color = colormap(density);\\n\\n            vec3 uvw = rayPos / volumeSize + 0.5;\\n            float distanceToMaximum = clamp(1.0 - abs(uvw.z - texture(projection, uvw.xy).g) / 0.025, 0.0, 1.0);\\n            float selectionMask = texture(selection, uvw.xy).r;\\n\\n            float highlight = distanceToMaximum * selectionMask;\\n            color = mix(color, 3.0 * matlab_spring(density), highlight);\\n\\n            proteinColor.rgb += density * (1.0 - proteinColor.a) * color;\\n            proteinColor.a += density * (1.0 - proteinColor.a);\\n        }\\n\\n        dist += stepSize;\\n        rayPos += stepSize * rayDir;\\n\\n        steps += 1.0;\\n\\n        if (proteinColor.a > 0.99f) break;\\n        if (dist + boxDst.x > depth) break;\\n    }\\n\\n    if (debugSamples) {\\n        FragColor.rgb = matlab_spring(steps / 500.0);\\n        FragColor.a = 1.0;\\n    } else {\\n        FragColor.rgb = mix(surfaceColor.rgb, proteinColor.rgb, proteinColor.a);\\n        FragColor.a = max(surfaceColor.a, proteinColor.a);\\n    }\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"\\nvarying vec2 vUv;\\n\\nuniform sampler2D texGrid;\\nuniform sampler2D texVolume;\\n\\nvoid main() {\\n    gl_FragColor = vec4(mix(texture(texGrid, vUv).rgb, texture(texVolume, vUv).rgb, texture(texVolume, vUv).a), 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform highp sampler3D volume;\\nuniform highp sampler3D sdf;\\nuniform float isovalue;\\n\\nvoid main() {\\n    vec3 uv = vec3(vUv, 0.0);\\n    int col = textureSize(volume, 0).z;\\n\\n    // Maximum projection.\\n    float maxDensity = 0.0;\\n    float maxPos = 0.0;\\n    for (float i = 0.0; i < float(col); i += 1.0) {\\n        uv.z = i / float(col);\\n        float sdfVal = texture(sdf, uv).r * 255.0 / 10.0 - 5.0 - isovalue;\\n        if (sdfVal <= 0.01) {\\n            float density = texture(volume, uv).r;\\n            if (density > maxDensity) {\\n                maxDensity = density;\\n                maxPos = uv.z;\\n            }\\n        }\\n    }\\n\\n    gl_FragColor = vec4(maxDensity, maxPos, 0.0, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform bool clear;\\nuniform vec2 lastPosition;\\nuniform vec2 position;\\nuniform bool depressed;\\nuniform float resolution;\\nuniform int penMode;\\nuniform float penSize;\\nuniform sampler2D restore;\\nuniform bool doRestore;\\n\\n// https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\\n{\\n    vec2 pa = p-a, ba = b-a;\\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\\n    return length( pa - ba*h );\\n}\\n\\nvoid drawPixel() {\\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\n}\\n\\nvoid erasePixel() {\\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n\\nvoid main()\\n{\\n    if (clear) {\\n        erasePixel();\\n        return;\\n    }\\n\\n    if (doRestore) {\\n        gl_FragColor = texture(restore, vUv);\\n        return;\\n    }\\n\\n    if (sdSegment(vUv, position, lastPosition) < penSize/resolution && depressed) {\\n        if (penMode == 0) {\\n            drawPixel();\\n        } else {\\n            erasePixel();\\n        }\\n    } else {\\n        discard;\\n    }\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform highp sampler2D projection;\\nuniform highp sampler2D selection;\\n\\n// https://github.com/kbinani/colormap-shaders/blob/master/shaders/glsl/MATLAB_summer.frag\\nvec4 colormap(float x) {\\n    return vec4(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4, 1.0);\\n}\\n\\nvoid main() {\\n    vec4 c1 = colormap(texture(projection, vUv).r);\\n    vec4 c2 = texture(selection, vUv);\\n\\n    gl_FragColor = mix(0.5*c1, c1, c2.r);\\n    //gl_FragColor = vec4(vUv.x, vUv.y, 0.0, 1.0);\\n}\"","import React, { Component } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nclass Toolbar extends Component {\n\trender() {\n\t\tlet fullscreenIcon;\n\t\tif (this.props.fullscreen) fullscreenIcon = \"bi-fullscreen-exit\";\n\t\telse fullscreenIcon = \"bi-arrows-fullscreen\";\n\t\treturn (\n\t\t\t<ButtonToolbar className=\"justify-content-between\">\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleSidebar}\n\t\t\t\t><i className=\"bi-tools\"></i></Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onImportData}\n\t\t\t\t>Import Data</Button>\n\t\t\t</ButtonGroup>\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleFullscreen}\n\t\t\t\t><i className={fullscreenIcon}></i></Button>\n\t\t\t</ButtonGroup>\n\t\t\t</ButtonToolbar>\n\t\t)\n\t}\n}\n\nexport default Toolbar","import React from 'react'\n\nimport Col from 'react-bootstrap/Col';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Card from 'react-bootstrap/Card';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\nconst Sidebar = props => {\n\n    const handleSelectCompartmet = (index) => {\n        props.onCompartmentSelection(index);\n    }\n\n    const handleChangeDisplaySegmentation = (e) => {\n        props.onDisplaySegmentation(e.target.checked);\n    }\n\n    const handleChangeDisplayProtein = (e) => {\n        props.onDisplayProtein(e.target.checked);\n    }\n\n    const handleChangeDebugSamples = (e) => {\n        props.onDebugSamples(e.target.checked);\n    }\n\n    const handleChangeUseLod = (e) => {\n        props.onUseLod(e.target.checked);\n    }\n\n    const handleChangeIsovalue = (e) => {\n        props.onIsovalue(e.target.value);\n    }\n\n    let dropdownItems = [\n    <Dropdown.Item\n        onClick={() => handleSelectCompartmet(0)}\n    >All Compartments</Dropdown.Item>]\n    for (var i = 0; i < props.numCompartments-1; ++i) {\n        let index = i;\n        dropdownItems.push(\n        <Dropdown.Item\n            onClick={() => handleSelectCompartmet(index+1)}\n        >Compartment {index+1}</Dropdown.Item>);\n    }\n\n    let dropdownText = \"\";\n    if (props.numCompartments === 0) dropdownText = \"No Compartment Data\"\n    else if (props.selection === 0) dropdownText = \"All Compartments\";\n    else dropdownText = \"Compartment \" + props.selection;\n    return (\n        <Row md={3}>\n            <Col>\n                <Collapse in={props.open}>\n                    <Card>\n                        <Card.Body>\n                            <Form>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.displayProtein}\n                                        disabled={props.numCompartments===0}\n                                        onChange={handleChangeDisplayProtein}\n                                    />\n                                    <Form.Check.Label>Display Protein</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.displaySegmentation}\n                                        disabled={props.numCompartments===0}\n                                        onChange={handleChangeDisplaySegmentation}\n                                    />\n                                    <Form.Check.Label>Display Segmentation</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Range\n                                    disabled={props.numCompartments===0}\n                                    onChange={handleChangeIsovalue}\n                                />\n                                <Dropdown>\n                                    <Dropdown.Toggle disabled={props.numCompartments===0}>\n                                        {dropdownText}\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        {dropdownItems}\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                                Debug Options\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.debugSamples}\n                                        onChange={handleChangeDebugSamples}\n                                    />\n                                    <Form.Check.Label>Display Texture Samples</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.useLod}\n                                        onChange={handleChangeUseLod}\n                                    />\n                                    <Form.Check.Label>Use LoD</Form.Check.Label>\n                                </Form.Check>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </Collapse>\n            </Col>\n        </Row>\n    );\n}\n\nexport default Sidebar;","const Overlay = (props) => {\n    return <div className=\"overlay fill-screen d-grid gap-3\">\n        {props.children}\n    </div>\n}\n\nexport default Overlay","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nconst Plots = props => {\n    const data = {\n        labels: props.labelsHistogram,\n        datasets: [{\n            backgroundColor: 'rgb(255, 99, 132)',\n            borderColor: 'rgb(255, 99, 132)',\n            data: props.globalHistogram,\n            label: 'Global Histogram',\n        },\n        {\n            backgroundColor: 'rgb(0, 255, 132)',\n            borderColor: 'rgb(0, 255, 132)',\n            data: props.localHistogram,\n            label: 'Local Histogram',\n        }]\n    };\n\n    const options = {\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        beginAtZero: true,\n                    },\n                },\n            ],\n        },\n        maintainAspectRatio: false\n    };\n\n    return (\n        <>\n            <Bar\n                className=\"plots\"\n                data={data}\n                options={options}\n            />\n        </>\n    );\n};\n\nexport default Plots;","import React, { useEffect, useRef, useState } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nconst MapTools = props => {\n    const labelRef = useRef();\n\n    const [edit, setEdit] = useState(false);\n    const [editText, setEditText] = useState(\"\");\n    const [blockBlur, setBlockBlur] = useState(false); // Block onBlur when mouse is over the label button.\n\n    useEffect(() => {\n        if (labelRef.current && edit) {\n            labelRef.current.focus();\n            labelRef.current.value = editText;\n        }\n    }, [edit, editText, labelRef])\n\n    const handleBlur = () => {\n        if (!blockBlur) {\n            handleEdit(false);\n        }\n    }\n\n    const handleClickEdit = () => {\n        handleEdit(!edit);\n    }\n\n    const handleEdit = (doEdit) => {;\n        setEdit(doEdit);\n        setEditText(props.label);\n    }\n\n    const handleChange = (e) => {\n        props.onLabel(e.target.value);\n    }\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleEdit(false);\n        }\n    }\n\n    let buttonOrForm;\n    if (edit === true) {\n        buttonOrForm = <FormControl\n            style={{marginLeft: \"auto\"}}\n            onKeyPress={handleKeyPress}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            ref={labelRef}\n        />\n    } else {\n        buttonOrForm = <Button\n                            style={{marginLeft: \"auto\"}}\n                            onClick={props.onClick}\n                        >{props.label}</Button>\n    }\n\n    return(\n        <InputGroup>\n        {buttonOrForm}\n        <Button\n            onClick={handleClickEdit}\n            onMouseEnter={() => setBlockBlur(true)} // This is needed to re-enable the button\n            onMouseLeave={() => setBlockBlur(false)}\n        ><i className=\"bi-tag-fill\"></i></Button>\n        <Button\n            onClick={props.onExport}\n        ><i className=\"bi-download\"></i></Button>\n        <Button\n            onClick={props.onDelete}\n        ><i className=\"bi-trash-fill\"></i></Button>\n        </InputGroup>\n    );\n}\n\nexport default MapTools","// \"Abstract\" class for the volume renderer.\n\nclass VolumeRenderer {\n\t// Renders the volume.\n\trender() { };\n\n\tsetVolumeSize(width, height, depth) { };\n\n\t// Set the protein data.\n\tsetProteinData(texture) { };\n\n\tsetDistanceData(textures) { };\n\n\tsetIsovalue(value) { };\n\n\tsetCompartmentIndex(value) { };\n\t\n\tsetDisplayCompartments(value) { };\n\n\tsetDisplayProtein(value) { };\n\n\tresizeCallback() { };\n\t\n\tsetSkeleton(vec) { };\n\n\tselectionUpdated() { };\n\n\tsetDebugSamples(value) { };\n\n\tsetUseLod(value) { };\n}\n\nexport { VolumeRenderer };","import { VolumeRenderer } from '../volume_renderer.js'\n\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1);\n\nclass VolumeRendererDefault extends VolumeRenderer {\n\tvolumeTexture\n\tsdfTextures\n\n\tdom;\n\trenderer;\n\n\tvolumeSize;\n\n\trenderTargetGrid;\n\trenderTargetVolume;\n\n\tcamera;\n\tcontrols;\n\n\tcameraCompose;\n\n\tbox;\n\tgrid;\n\n\tmaterialMarchVolume;\n\tmaterialCompose;\n\n\tsceneGrid;\n\tsceneVolume;\n\tsceneCompose;\n\n\tvolumeDirty;\n\n\tconstructor(renderer, dom) {\n\t\tsuper();\n\t\tthis.dom = dom;\n\t\tthis.renderer = renderer;\n\n\t\tthis.camera = new THREE.PerspectiveCamera( 75, dom.clientWidth/dom.clientHeight, 0.1, 5000 );\n\t\t\n\t\tthis.controls = new OrbitControls(this.camera, dom);\n\t\tthis.camera.position.y = -85;\n\t\tthis.controls.update();\n\n\t\tthis.materialMarchVolume = new THREE.RawShaderMaterial( {\n\t\t\tglslVersion: THREE.GLSL3,\n\t\t\tuniforms: {\n\t\t\t\tmodelview: { value: this.camera.matrixWorldInverse },\n\t\t\t\tproj: {value: this.camera.projectionMatrix },\n\t\t\t\tresolution: { value: new THREE.Vector2(0, 0) },\n\t\t\t\tvolume0: { value:null },\n\t\t\t\tvolume1: { value:null },\n\t\t\t\tvolume2: { value:null },\n\t\t\t\tvolume3: { value:null },\n\t\t\t\tvolume4: { value:null },\n\t\t\t\tvolume5: { value:null },\n\t\t\t\tvolume6: { value:null },\n\t\t\t\tvolume7: { value:null },\n\t\t\t\tvolume8: { value:null },\n\t\t\t\tvolume9: { value:null },\n\t\t\t\tvolumeSize: { value: null },\n\t\t\t\ttexDepth: { value: null },\n\t\t\t\tsdf: { value: null },\n\t\t\t\tisovalue: { value: null },\n\t\t\t\tdisplayProtein: { value: false },\n\t\t\t\tdisplayCompartments: { value: false },\n\t\t\t\tselection: { value: false },\n\t\t\t\tprojection: { value: false },\n\t\t\t\tdebugSamples: { value: false },\n\t\t\t\tuseLod: { value: true }\n\t\t\t},\n\t\t\tvertexShader: require('./shaders/volume_renderer_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/volume_renderer_frag.glsl'),\n\t\t\tside: THREE.BackSide,\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialCompose = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/post_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/post_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\ttexGrid: { value: null },\n\t\t\t\ttexVolume: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.sceneGrid = new THREE.Scene();\n\t\tconst size = 10;\n\t\tconst divisions = 10;\n\t\tthis.grid = new THREE.GridHelper( size, divisions );\n\t\tthis.grid.rotateX(0.5*Math.PI);\n\t\tthis.sceneGrid.add(this.grid);\n\t\t\n\t\tthis.grid.onBeforeRender = ( renderer, scene, camera, geometry, material, group ) => {\n\t\t\tvar pos = this.controls.target;\n\t\t\tthis.grid.position.x = pos.x;\n\t\t\tthis.grid.position.y = pos.y;\n\t\t\tthis.grid.position.z = pos.z;\n\t\t\tthis.grid.updateMatrixWorld();\n\t\t};\n\n\t\tconst geometry = new THREE.BoxGeometry();\n\t\tthis.sceneVolume = new THREE.Scene();\n\t\tthis.box = new THREE.Mesh(geometry, this.materialMarchVolume)\n\t\tthis.sceneVolume.add(this.box);\n\n\t\tthis.sceneCompose = new THREE.Scene();\n\t\tthis.cameraCompose = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialCompose);\n\t\tthis.sceneCompose.add(quad);\n\n\t\tthis.renderTargetVolume = new THREE.WebGLRenderTarget(0, 0);\n\t\tthis.renderTargetGrid = new THREE.WebGLRenderTarget(0, 0);\n\t\tthis.renderTargetGrid.depthTexture = new THREE.DepthTexture();\n\n\t\t\n\t\tthis.materialMarchVolume.uniforms.texDepth.value = this.renderTargetGrid.depthTexture;\n\t\tthis.materialCompose.uniforms.texGrid.value = this.renderTargetGrid.texture;\n\t\tthis.materialCompose.uniforms.texVolume.value = this.renderTargetVolume.texture;\n\n\t\tthis.volumeDirty = true;\n\n\t\tthis.controls.addEventListener('change', () => {\n\t\t\tthis.volumeDirty = true;\n\t\t} );\n\t\t\n\t\twindow.addEventListener('resize', () => {\n\t\t\tthis.resizeCallback();\n\t\t});\n\t\tthis.resizeCallback();\n\t};\n\n\t// Renders the volume.\n\trender() {\n\t\tif (!this.volumeTexture) return;\n\t\tif (!this.sdfTextures) return;\n\t\tif (!this.volumeDirty) return;\n\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\tconst left   = rect.left;\n\t\tconst bottom = window.innerHeight - rect.bottom;\n\n\t\tthis.renderer.setViewport(left, bottom, width, height);\n\t\tthis.renderer.setScissor(left, bottom, width, height);\n\t\tthis.renderer.setScissorTest(true);\n\t\t\n\t\tthis.controls.update();\n\n\t\tlet gl = this.renderer.getContext();\n\t\tthis.renderer.setRenderTarget(this.renderTargetGrid);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneGrid, this.camera);\n\n\t\tthis.renderer.setRenderTarget(this.renderTargetVolume);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneVolume, this.camera);\n\n\t\tthis.renderer.setRenderTarget(null);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneCompose, this.cameraCompose);\n\n\t\tthis.volumeDirty = false;\n\t};\n\n\tselectionUpdated() {\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetVolumeSize(width, height, depth) { \n\t\tthis.volumeSize = new THREE.Vector3(width, height, depth);\n\t\tthis.box.geometry = new THREE.BoxGeometry(this.volumeSize.x, this.volumeSize.y, this.volumeSize.z);\n\t\tthis.materialMarchVolume.uniforms.volumeSize.value = this.volumeSize;\n\t\tthis.volumeDirty = true;\n\t };\n\n\t// Set the protein data.\n\tsetProteinData(texture) {\n\t\tthis.volumeTexture = texture;\n\t\t\n\t\tfor (let i = 0; i < 9; ++i) {\n\t\t\tthis.materialMarchVolume.uniforms[\"volume\" + i].value = this.volumeTexture[i];\n\t\t}\n\t\t\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDistanceData(textures, dims) {\n\t\tthis.sdfTextures = textures;\n\t\tthis.materialMarchVolume.uniforms.sdf.value = this.sdfTextures[0];\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetIsovalue(value) {\n\t\tthis.materialMarchVolume.uniforms.isovalue.value = value;\n\t\t//this.volumeDirty = true;\n\t}\n\n\tsetCompartmentIndex(value) {\n\t\tthis.materialMarchVolume.uniforms.sdf.value = this.sdfTextures[value];\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDisplayCompartments(value) {\n\t\tthis.materialMarchVolume.uniforms.displayCompartments.value = value;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDisplayProtein(value) {\n\t\tthis.materialMarchVolume.uniforms.displayProtein.value = value;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetSelectionTexture(texture) {\n\t\tthis.materialMarchVolume.uniforms.selection.value = texture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetProjectionTexture(texture) {\n\t\tthis.materialMarchVolume.uniforms.projection.value = texture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tresizeCallback() {\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\t//const left   = rect.left;\n\t\t//const bottom = window.innerHeight - rect.bottom;\n\t\t\n\t\tthis.camera.aspect = width/height;\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderTargetVolume.setSize(width, height);\n\t\tthis.renderTargetGrid.setSize(width, height);\n\t\tthis.materialMarchVolume.uniforms.resolution.value = new THREE.Vector2(width, height);\n\n\t\tthis.renderTargetGrid.depthTexture = new THREE.DepthTexture();\n\t\tthis.materialMarchVolume.uniforms.texDepth.value = this.renderTargetGrid.depthTexture;\n\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetSkeleton(vec) {\n\t\tvar geom = new THREE.BufferGeometry();\n\n\t\tgeom.setAttribute( 'position', new THREE.BufferAttribute( vec, 3 ) );\n\n\t\tvar points = new THREE.Points(geom);\n\n\t\tpoints.position.x = -0.5*this.volumeSize.x;\n\t\tpoints.position.y = -0.5*this.volumeSize.y;\n\t\tpoints.position.z = -0.5*this.volumeSize.z;\n\n\t\tthis.sceneGrid.add(points);\n\t}\n\n\tsetDebugSamples(value) {\n\t\tthis.materialMarchVolume.uniforms.debugSamples.value = value;\n\t}\n\n\tsetUseLod(value) {\n\t\tthis.materialMarchVolume.uniforms.useLod.value = value;\n\t}\n}\n\nexport { VolumeRendererDefault };","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n//import { VolumeRendererReprojected } from './volume/reprojected/volume_renderer_reprojected.js'\nimport { VolumeRendererDefault} from './volume/default/volume_renderer_default.js'\nimport { MapRenderer } from \"./map/map_renderer.js\"\n\nvar stats = new Stats();\nstats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\ndocument.body.appendChild( stats.dom );\n\nvar canvas;\nvar mainView;\nvar mapView;\n\nvar renderer;\n\nvar volumeRenderer = null;\nvar mapRenderer = null;\n// Configure coordinate system to use Z as up.\n\nasync function main(initCanvas, initMainView, initMapView) {\n\tcanvas = initCanvas;\n\tmainView = initMainView;\n\tmapView = initMapView;\n\trenderer = new THREE.WebGLRenderer({canvas: canvas, preserveDrawingBuffer: true});\n\trenderer.autoClearColor = false;\n\tawait init();\n\tanimate();\n}\n\nfunction setVolumeSize(size) {\n\tvolumeRenderer.setVolumeSize(size[0], size[1], size[2]);\n}\n\nfunction setProteinData(pyramid, dims) {\n\tlet textures = []\n\tlet w = dims[0];\n\tlet h = dims[1];\n\tlet d = dims[2];\n\tfor (let i = 0; i < pyramid.length; ++i) {\n\t\tconst texture = new THREE.DataTexture3D(pyramid[i], w, h, d);\n\t\ttexture.format = THREE.RGFormat;\n\t\ttexture.type = THREE.UnsignedByteType;\n\t\ttexture.internalFormat = 'RG8';\n\t\ttexture.minFilter = THREE.LinearFilter;\n\t\ttexture.magFilter = THREE.LinearFilter;\n\t\ttexture.generateMipmaps = false;\n\t\ttexture.unpackAlignment = 1;\n\n\t\tw = Math.ceil(w/2.0);\n\t\th = Math.ceil(h/2.0);\n\t\td = Math.ceil(d/2.0);\n\n\t\ttextures.push(texture);\n\t}\n\n\t\n\tvolumeRenderer.setProteinData(textures);\n\tmapRenderer.setProteinData(textures[0]);\n}\n\nfunction setDistanceFieldData(arrays, dims) {\n\tlet textures = [];\n\tfor (var i = 0; i < arrays.length; ++i) {\n\t\tconst tex = new THREE.DataTexture3D(arrays[i], dims[0], dims[1], dims[2]);\n\t\ttex.format = THREE.RedFormat;\n\t\ttex.minFilter = THREE.LinearFilter;\n\t\ttex.magFilter = THREE.LinearFilter;\n\t\ttex.unpackAlignment = 1;\n\n\t\ttextures.push(tex);\n\t}\n\tvolumeRenderer.setDistanceData(textures);\n\tmapRenderer.setDistanceData(textures);\n}\n\nasync function init() {\n\tvolumeRenderer = new VolumeRendererDefault(renderer, mainView);\n\tmapRenderer = new MapRenderer(renderer, mapView, handleSelectionUpdated);\n\n\tvolumeRenderer.setSelectionTexture(mapRenderer.getSeletionTexture());\n\tvolumeRenderer.setProjectionTexture(mapRenderer.getProjectionTexture());\n}\n\nfunction animate() {\n\trequestAnimationFrame( animate );\n\t\n\tvolumeRenderer.render();\n\tmapRenderer.render();\n\n\tstats.update();\n}\n\nfunction handleSelectionUpdated() {\n\tvolumeRenderer.selectionUpdated();\n}\n\nfunction setIsovalue(value) {\n\tvolumeRenderer.setIsovalue(value);\n\tmapRenderer.setIsovalue(value);\n}\n\nfunction setDisplayProtein(value) {\n\tvolumeRenderer.setDisplayProtein(value);\n}\n\nfunction setDisplayCompartment(value) {\n\tvolumeRenderer.setDisplayCompartments(value);\n}\n\nfunction setCompartmentIndex(index) {\n\tvolumeRenderer.setCompartmentIndex(index);\n\tmapRenderer.setCompartmentIndex(index);\n}\n\nfunction setSkeleton(vec) {\n\tvolumeRenderer.setSkeleton(vec);\n}\n\nfunction deleteSelection() {\n\tif (mapRenderer) {\n\t\tmapRenderer.deleteSelection();\n\t}\n}\n\nfunction getMapSelectionPixels() {\n\treturn mapRenderer.getSelectionPixels();\n}\n\nfunction getMapProjectionPixels() {\n\treturn mapRenderer.getProjectionPixels();\n}\n\nfunction setMapSelectionPixels(pixels, width, height) {\n\tconst texture = new THREE.DataTexture( pixels, width, height, THREE.RGBAFormat );\n\tmapRenderer.setSelectionFromTexture(texture);\n}\n\nfunction setDebugSamples(value) {\n\tvolumeRenderer.setDebugSamples(value);\n}\n\nfunction setUseLod(value) {\n\tvolumeRenderer.setUseLod(value);\n}\n\nfunction setPenMode(mode) {\n\tif (mapRenderer) {\n\t\tmapRenderer.setPenMode(mode);\n\t}\n}\n\nfunction setPenSize(value) {\n\tif (mapRenderer) {\n\t\tmapRenderer.setPenSize(value);\n\t}\n}\n\nexport { main, setDistanceFieldData, setProteinData, setIsovalue, setDisplayProtein, setDisplayCompartment, setCompartmentIndex, setVolumeSize, deleteSelection, setSkeleton, setMapSelectionPixels, getMapSelectionPixels, getMapProjectionPixels, setDebugSamples, setUseLod, setPenMode, setPenSize};","import * as THREE from 'three';\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nclass MapRenderer {\n    dom;\n    renderer;\n\n    camera;\n\n    sceneSelection;\n    materialSelection;\n\n\tsceneProjection;\n\tmaterialProjection;\n\n\tsceneMap;\n\tmaterialMap;\n\n\tplaneMap;\n\n\tvolumeTexture;\n\tsdfTextures;\n\n\trenderTargetSelection;\n\trenderTargetProjection;\n\n\tprojectionDirty;\n\tselectionDirty;\n\n\tconstructor(renderer, dom, onSelectionUpdated) {\n\t\tthis.dom = dom;\n\t\tthis.renderer = renderer;\n\n\t\tthis.onSelectionUpdated = onSelectionUpdated;\n\n        this.materialProjection = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/mip_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/mip_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tvolume: { value: null },\n\t\t\t\tsdf: { value: null },\n\t\t\t\tisovalue: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialSelection = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/selection_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/selection_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tclear: { value: true },\n\t\t\t\tlastPosition: { value: new THREE.Vector2(0.0, 0.0) },\n\t\t\t\tposition: { value: new THREE.Vector2(0.0, 0.0) },\n\t\t\t\tdepressed: { value: false },\n\t\t\t\tpenMode: {value: 0 },\n\t\t\t\tpenSize: {value: 8.0 },\n\t\t\t\tresolution: {value: 1024},\n\t\t\t\trestore: {value: null },\n\t\t\t\tdoRestore: { value: false }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialMap = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/map_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/map_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tselection: { value: null },\n\t\t\t\tprojection: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.renderTargetSelection = new THREE.WebGLRenderTarget(1024, 1024);\n\t\tthis.renderTargetProjection = new THREE.WebGLRenderTarget(1024, 1024);\n\n\t\tconst aspect = dom.clientWidth/dom.clientHeight\n\n\t\tthis.camera = new THREE.OrthographicCamera( -aspect, aspect, 1, - 1, 0, 2 );\n\t\tthis.controls = new OrbitControls(this.camera, dom);\n\t\tthis.camera.position.z = 1.0;\n\t\tthis.controls.enableRotate = false;\n\t\tthis.controls.update();\n\n\t\t{\n\t\tthis.cameraProjection = new THREE.OrthographicCamera(-1, 1, 1, - 1, 0, 2 );\n\t\tthis.sceneProjection = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialProjection);\n\t\tthis.planeMap = quad;\n\t\tthis.sceneProjection.add(quad);\n\t\t}\n\n\t\t{\n\t\tthis.cameraSelection = new THREE.OrthographicCamera(-1, 1, 1, - 1, 0, 2 );\n\t\tthis.sceneSelection = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialSelection);\n\t\tthis.sceneSelection.add(quad);\n\t\t}\n\n\t\t{\n\t\tthis.sceneMap = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialMap);\n\t\tthis.sceneMap.add(quad);\n\t\tthis.sceneMap.add(this.camera);\n\t\t}\n\n\t\tthis.materialMap.uniforms.projection.value = this.renderTargetProjection.texture;\n\t\tthis.materialMap.uniforms.selection.value = this.renderTargetSelection.texture;\n\n\t\tthis.projectionDirty = false;\n\t\tthis.selectionDirty = false;\n\n\t\tthis.dom.addEventListener('mousemove', e => { this.mouseMove(e); });\n\t\tthis.dom.addEventListener('mousedown', e => { this.mouseDown(e);});\n\t\tthis.dom.addEventListener('mouseup', e => { this.mouseUp(e);});\n\t\tthis.dom.addEventListener('mouseout', e => { this.mouseOut(e);});\n\t\t\t\n\t\twindow.addEventListener('resize', () => {\n\t\t\tthis.resizeCallback();\n\t\t});\n\t\tthis.resizeCallback();\n    };\n\n\tgetMousePosition(e) {\n\t\tconst raycaster = new THREE.Raycaster();\n\t\tconst mouse = new THREE.Vector2();\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\tmouse.x = (e.clientX - rect.left) / (rect.right - rect.left) * 2.0 - 1.0; //x position within the element.\n\t\tmouse.y = 1.0 - (e.clientY - rect.top) / (rect.bottom - rect.top) * 2.0; //y position within the element.\n\t\traycaster.setFromCamera( mouse.clone(), this.camera );\n\t\tconst intersects = raycaster.intersectObject(this.planeMap);\n\n\t\tif (intersects.length > 0) {\n\t\t\treturn intersects[0].uv;\n\t\t}\n\t\treturn null;\n\t}\n\n\tmouseDown(e) {\n\t\tif (e.button === 0) {\n\t\t\tconst mouse = this.getMousePosition(e);\n\t\t\tif (mouse) {\n\t\t\t\tthis.materialSelection.uniforms.position.value = mouse;\n\t\t\t\tthis.materialSelection.uniforms.lastPosition.value = this.materialSelection.uniforms.position.value;\n\t\t\t\tthis.selectionDirty = true;\n\t\t\t\tthis.materialSelection.uniforms.depressed.value = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tmouseMove(e) {\n\t\tif (e.button === 0) {\n\t\t\tif (this.materialSelection.uniforms.depressed.value) {\n\t\t\t\tconst mouse = this.getMousePosition(e);\n\t\t\t\tif (mouse) {\n\t\t\t\t\tthis.materialSelection.uniforms.lastPosition.value = this.materialSelection.uniforms.position.value;\n\t\t\t\t\tthis.materialSelection.uniforms.position.value = mouse;\n\t\t\t\t\tthis.selectionDirty = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tmouseOut(e) {\n\t\tif (e.button === 0) {\n\t\t\tthis.materialSelection.uniforms.depressed.value = false;\n\t\t}\n\t}\n\n\tmouseUp(e) {\n\t\tif (e.button === 0) {\n\t\t\tthis.materialSelection.uniforms.depressed.value = false;\n\t\t}\n\t}\n\n\trenderProjection() {\n\t\tthis.renderer.setViewport(0, 0, 1024, 1024);\n\t\tthis.renderer.setScissorTest(false);\n\t\tthis.renderer.setRenderTarget(this.renderTargetProjection);\n\t\tthis.renderer.render(this.sceneProjection, this.cameraProjection);\n\t\tthis.projectionDirty = false;\n\t}\n\n\trenderSelection() {\n\t\tthis.renderer.setViewport(0, 0, 1024, 1024);\n\t\tthis.renderer.setScissorTest(false);\n\t\tthis.renderer.setRenderTarget(this.renderTargetSelection);\n\t\tthis.renderer.render(this.sceneSelection, this.cameraSelection);\n\t\tif (this.materialSelection.uniforms.clear.value) {\n\t\t\tthis.materialSelection.uniforms.clear.value = false;\n\t\t}\n\n\t\tif (this.materialSelection.uniforms.doRestore.value) {\n\t\t\tthis.materialSelection.uniforms.doRestore.value = false;\n\t\t}\n\t\tthis.onSelectionUpdated();\n\t\tthis.selectionDirty = false;\n\t\t//$(document).trigger(\"selectionUpdated\");\n\t}\n\n\trenderMap() {\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\tconst left   = rect.left;\n\t\tconst bottom = window.innerHeight - rect.bottom;\n\t\t\n\t\tthis.renderer.setViewport(left, bottom, width, height);\n\t\tthis.renderer.setScissor(left, bottom, width, height);\n\t\tthis.renderer.setScissorTest(true);\n\n\t\tthis.renderer.setRenderTarget(null);\n\t\tlet gl = this.renderer.getContext();\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneMap, this.camera);\n\t}\n\n\t// Renders the volume.\n\trender() {\n\t\tif (this.selectionDirty) this.renderSelection();\n\t\tif (this.projectionDirty) this.renderProjection();\n\n\t\tthis.renderMap();\n\t};\n\n\tsetVolumeSize(width, height, depth) { };\n\n\t// Set the protein data.\n\tsetProteinData(texture) {\n\t\tthis.volumeTexture = texture;\n\t\tthis.materialProjection.uniforms.volume.value = this.volumeTexture;\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetDistanceData(textures) {\n\t\tthis.sdfTextures = textures;\n\t\tthis.materialProjection.uniforms.sdf.value = this.sdfTextures[0];\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetIsovalue(value) {\n\t\tthis.materialProjection.uniforms.isovalue.value = value;\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetCompartmentIndex(value) {\n\t\tthis.materialProjection.uniforms.sdf.value = this.sdfTextures[value];\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetPenSize(value) {\n\t\tthis.materialSelection.uniforms.penSize.value = value;\n\t};\n\n\tsetPenMode(mode) {\n\t\tif (mode === \"draw\") {\n\t\t\tthis.materialSelection.uniforms.penMode.value = 0;\n\t\t} else {\n\t\t\tthis.materialSelection.uniforms.penMode.value = 1;\n\t\t}\n\t}\n\n\tgetSeletionTexture() {\n\t\treturn this.renderTargetSelection.texture;\n\t};\n\n\tgetSelectionPixels() {\n\t\tvar pixels = {\n\t\t\twidth: this.renderTargetSelection.width,\n\t\t\theight: this.renderTargetSelection.height,\n\t\t\tbuffer: new Uint8Array(this.renderTargetSelection.width*this.renderTargetSelection.width*4)\n\t\t}\n\t\tthis.renderer.readRenderTargetPixels(this.renderTargetSelection, 0, 0, pixels.width, pixels.height, pixels.buffer);\n\t\treturn pixels;\n\t};\n\n\tsetSelectionFromTexture(texture) {\n\t\tthis.materialSelection.uniforms.doRestore.value = true;\n\t\tthis.materialSelection.uniforms.restore.value = texture;\n\t\tthis.selectionDirty = true;\n\t}\n\n\tgetProjectionPixels() {\n\t\tvar pixels = {\n\t\t\twidth: this.renderTargetProjection.width,\n\t\t\theight: this.renderTargetProjection.height,\n\t\t\tbuffer: new Uint8Array(this.renderTargetProjection.width*this.renderTargetProjection.width*4)\n\t\t}\n\t\tthis.renderer.readRenderTargetPixels(this.renderTargetProjection, 0, 0, pixels.width, pixels.height, pixels.buffer);\n\t\treturn pixels;\n\t}\n\n\tgetProjectionTexture() {\n\t\treturn this.renderTargetProjection.texture;\n\t}\n\n\tdeleteSelection() {\n\t\tthis.materialSelection.uniforms.clear.value = true;\n\t\tthis.selectionDirty = true;\n\t}\n\n\tresizeCallback() {\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\n\t\tconst aspect = this.dom.clientWidth/this.dom.clientHeight\n\t\t\n\t\tthis.camera.left = -aspect;\n\t\tthis.camera.right = aspect;\n\t\tthis.camera.updateProjectionMatrix();\n\t};\n}\n\nexport { MapRenderer };","import React, { useState, useEffect } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nimport StoreItem from './StoreItem';\n\nimport * as Renderer from '../renderers/renderer.js'\nimport localforage from 'localforage';\n\nimport * as UPNG from 'upng-js';\n\nimport { v4 as uuid } from 'uuid';\n\nconst dbName = 'selectionStore';\n\n// Create table 2 in databaseName\nvar storeData = localforage.createInstance({\n    name        : dbName,\n    storeName   : 'storeData',\n    description : '...'\n});\n\nconst MapTools = props => {\n\n    const [penSize, setPenSize] = useState(20);\n    const [penMode, setPenMode] = useState(\"draw\");\n    const [uuids, setUuids] = useState([]);\n\n    useEffect(() => {\n        reloadStore();\n    }, []);\n\n    const handleDelete = () => {\n        Renderer.deleteSelection();\n    };\n\n    const handlePenMode = (mode) => {\n        setPenMode(mode);\n        Renderer.setPenMode(mode);\n    }\n\n    const handlePenSize = (pt) => {\n        setPenSize(pt);\n        Renderer.setPenSize(pt);\n    };\n\n    const reloadStore = () => {\n        let list = {};\n        storeData.iterate(function(value, key, iterationNumber) {\n            list[key] = value.name;\n        }).then(() => {setUuids(list)})\n    }\n\n    const handleLoad = (uuid) => {\n        storeData.getItem(uuid).then((value) => {\n            Renderer.setMapSelectionPixels(value.data, value.width, value.height);\n        })\n    }\n\n    const handleDeleteStore = (uuid) => {\n        storeData.removeItem(uuid).then(reloadStore);\n    }\n\n    const handleSave = () => {\n        const selectionPixels = Renderer.getMapSelectionPixels();\n        storeData.setItem(uuid(), {name: \"New Selection\", \n                                   width: selectionPixels.width,\n                                   height: selectionPixels.height,\n                                   data: selectionPixels.buffer}).then(reloadStore);\n    }\n\n    const handleImport = () => {\n        let input = document.createElement('input');\n        input.type = 'file';\n\n        input.onchange = e => { \n            var file = e.target.files[0]; \n            new Promise(function(resolve, reject) {\n                var reader = new FileReader();\n                reader.readAsArrayBuffer(file)\n            \n                reader.onload = readerEvent => {\n                    resolve([readerEvent.target.result, file.name.replace('.png','')]);\n                }\n        \n                reader.onerror = _readerEvent => {\n                    reject(reader.error);\n                }\n        \n                reader.onabort = _readerEvent => {\n                    reject(\"FileReader was aborted!\");\n                }\n            }).then(([buffer, filename]) => {\n                let img = UPNG.decode(buffer);\n                let pixels = new Uint8Array(UPNG.toRGBA8(img)[0]);\n                storeData.setItem(uuid(), {name: filename, \n                    width: img.width,\n                    height: img.height,\n                    data: pixels}).then(reloadStore);\n            })\n        }\n\n        input.click();\n    }\n\n    const handleLabelStore = (uuid, label) => {\n        storeData.getItem(uuid).then((item) => {\n            item.name = label;\n            storeData.setItem(uuid, item).then(reloadStore);\n        })\n    }\n\n    const handleExportStore = (uuid) => {\n        storeData.getItem(uuid).then((item) => {\n            console.log(item.data);\n            let png = UPNG.encode([item.data.buffer], item.width, item.height, 0)\n            let blob = new Blob([png], {type: \"image/png\"});\n            let url = URL.createObjectURL(blob); \n            let fileLink = document.createElement('a');\n            fileLink.href = url;\n            fileLink.download = item.name;\n            fileLink.click();\n        })\n    }\n    \n    let storeList = []\n    for (const [key, value] of Object.entries(uuids)) {\n        storeList.push(\n            <StoreItem\n                label={value}\n                onClick={() => handleLoad(key)}\n                onDelete={()=> handleDeleteStore(key)}\n                onLabel={(label) => handleLabelStore(key, label)}\n                onExport={() => handleExportStore(key)}\n            />\n        )\n    }\n\n    return(\n        <div className=\"stack no-pointer-events\" style={{position: \"relative\"}}>\n            <div className=\"overlay d-flex flex-column-reverse pointer-events\" style={{overflowY: \"overlay\", height: \"80%\", right: 0, bottom: 0}}>\n                <div className=\"align-self-end d-grid gap-2\">\n                {storeList}\n                </div>\n            </div>\n            <div  className=\"overlay\">\n            <ButtonToolbar style={{flexDirection: \"column\", width: \"20pt\"}}>\n            <ButtonGroup vertical>\n                <Button\n                    onClick={handleDelete}\n                ><i className=\"bi-trash-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                <Button\n                    disabled={penMode===\"draw\"}\n                    onClick={() => {handlePenMode(\"draw\")}}\n                ><i className=\"bi-pencil-fill\"></i></Button>\n                <Button\n                    disabled={penMode===\"erase\"}\n                    onClick={() => {handlePenMode(\"erase\")}}\n                ><i className=\"bi-eraser-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                <Button\n                    disabled={penSize===40}\n                    onClick={() => {handlePenSize(40)}}\n                ><i style={{\"fontSize\": \"8pt\"}} className=\"bi-circle-fill\"></i></Button>\n                <Button\n                    disabled={penSize===20}\n                    onClick={() => {handlePenSize(20)}}\n                ><i style={{\"fontSize\": \"6pt\"}} className=\"bi-circle-fill\"></i></Button>\n                <Button\n                    disabled={penSize===10}\n                    onClick={() => {handlePenSize(10)}}\n                ><i style={{\"fontSize\": \"4pt\"}} className=\"bi-circle-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                    <Button\n                        onClick={handleSave}\n                    ><i className=\"fas fa-save\"></i></Button>\n                    <Button\n                        onClick={handleImport}\n                    ><i className=\"bi-upload\"></i></Button>\n            </ButtonGroup>\n            </ButtonToolbar>\n            </div>\n        </div>\n    );\n}\n\nexport default MapTools","import React, { useRef, useEffect } from 'react'\n\nimport Plots from './Plots'\nimport MapTools from './MapTools'\n\nconst Views= props => {\n    const mainRef = useRef(null);\n    const mapRef = useRef(null);\n\n    const onMainView = props.onMainView;\n    const onMapView = props.onMapView;\n\n    useEffect(() => {\n        onMainView(mainRef.current);\n        onMapView(mapRef.current);\n    }, [onMainView, onMapView]);\n\n    return(\n        <>\n        <div className=\"views d-flex flex-col\">\n            <div className=\"flex-fill d-flex flex-row\">\n                <div className=\"flex-fill stack-base\">\n                    <div className=\"stack\" ref={mainRef}></div>\n                </div>\n                <div className=\"v-divider\"></div>\n                <div className=\"flex-fill d-flex flex-column\">\n                    <div className=\"flex-fill stack-base\">\n                        <div className=\"stack\"ref={mapRef}></div>\n                        <MapTools />\n                    </div>\n                    <div className=\"h-divider\"></div>\n                    <div className=\"flex-fill\">\n                        <Plots\n                            localHistogram={props.localHistogram}\n                            globalHistogram={props.globalHistogram}\n                            labelsHistogram={props.labelsHistogram}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n        </>\n    );\n}\n\nexport default Views","import React, { useRef, useEffect } from 'react'\n\nimport * as Renderer from '../renderers/renderer.js'\n\nconst Canvas = props => {\n\tconst canvasRef = useRef(null)\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.main(canvasRef.current, props.mainView, props.mapView);\n\t\t}\n\t}, [props.mainView, props.mapView, props.ready])\n\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDistanceFieldData(props.sdf.buffers, props.sdf.dims);\n\t\t}\n\t}, [props.sdf, props.mainView, props.mapView, props.ready])\n\t\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setProteinData(props.protein.buffer, props.protein.dims);\n\t\t}\n\t}, [props.protein, props.mainView, props.mapView, props.ready])\n\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setVolumeSize(props.volumeSize);\n\t\t}\n\t}, [props.volumeSize, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDisplayProtein(props.displayProtein);\n\t\t}\n\t}, [props.displayProtein, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDisplayCompartment(props.displaySegmentation);\n\t\t}\n\t}, [props.displaySegmentation, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setCompartmentIndex(props.compartmentIndex);\n\t\t}\n\t}, [props.compartmentIndex, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDebugSamples(props.debugSamples);\n\t\t}\t\n\t}, [props.debugSamples, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setUseLod(props.useLod);\n\t\t}\n\t}, [props.useLod, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setIsovalue(props.isovalue);\n\t\t}\n\t}, [props.isovalue, props.mainView, props.mapView, props.ready])\n\n\treturn (\n\t\t<canvas className=\"renderer\" ref={canvasRef}/>\n\t);\n}\n\nexport default Canvas","import React, { Component } from 'react'\n\nimport Import from './Import'\nimport Toolbar from './Toolbar';\nimport Sidebar from './Sidebar';\nimport Overlay from './Overlay';\nimport Views from './Views';\nimport Canvas from './Canvas'\n\nimport Button from 'react-bootstrap/Button';\n\nclass Main extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tfullscreen: false,\n\t\t\tshowSidebar: false,\n\t\t\tshowImport: false,\n\t\t\tvoxelSize: [0, 0, 0],\n\t\t\tsdf: {buffers: [], dims: [0, 0, 0]},\n\t\t\tprotein: {buffer: [], dims: [0, 0, 0]},\n\t\t\tready: false,\n\t\t\tcompartmentIndex: 0,\n\t\t\tdisplaySegmentation: true,\n\t\t\tdisplayProtein: true,\n\t\t\tisovalue: 0,\n\t\t\tglobalHistogram: [],\n\t\t\tlabelsHistogram: [],\n\t\t\tlocalHistogram: [],\n\t\t\t// Debug variables\n\t\t\tdebugSamples: false,\n\t\t\tuseLod: true,\n\t\t\tmainView: \"\",\n\t\t\tmapView: \"\"\n\t\t}\n\t\t\n\t\tthis.handleShowImport = this.handleShowImport.bind(this);\n\t\tthis.handleToggleFullscreen = this.handleToggleFullscreen.bind(this);\n\t\tthis.handleToggleSidebar = this.handleToggleSidebar.bind(this);\n\t\tthis.handleAbortImport = this.handleAbortImport.bind(this);\n\t\tthis.handleCompleteImport = this.handleCompleteImport.bind(this);\n\t\tthis.handleCompartmentSelection = this.handleCompartmentSelection.bind(this);\n\t\tthis.handleDisplaySegmentation = this.handleDisplaySegmentation.bind(this);\n\t\tthis.handleDisplayProtein = this.handleDisplayProtein.bind(this);\n\t\tthis.handleDebugSamples = this.handleDebugSamples.bind(this);\n\t\tthis.handleUseLod = this.handleUseLod.bind(this);\n\t\tthis.handleIsovalue = this.handleIsovalue.bind(this);\n\t\tthis.handleMainView = this.handleMainView.bind(this);\n\t\tthis.handleMapView = this.handleMapView.bind(this);\n\t}\n\n\thandleShowImport() {\n\t\tthis.setState({\n\t\t\tshowImport: true\n\t\t});\n\t}\n\n\thandleAbortImport() {\n\t\tthis.setState({\n\t\t\tshowImport: false\n\t\t});\n\t}\n\n\thandleMapView(dom) {\n\t\tthis.setState({\n\t\t\tmapView: dom\n\t\t})\n\t}\n\n\thandleMainView(dom) {\n\t\tthis.setState({\n\t\t\tmainView: dom\n\t\t})\n\t}\n\n\thandleCompleteImport(sdfBuffers, proteinBuffers, bufferDims, voxelSize, hist, histLabels) {\n\t\tthis.setState({\n\t\t\tsdf: {buffers: sdfBuffers, dims: bufferDims},\n\t\t\tprotein: {buffer: proteinBuffers, dims: bufferDims},\n\t\t\tvoxelSize: voxelSize,\n\t\t\tshowImport: false,\n\t\t\tready: true,\n\t\t\tglobalHistogram: hist,\n\t\t\tlabelsHistogram: histLabels,\n\t\t})\n\t}\n\n\thandleToggleFullscreen() {\n\t\tif (!this.state.fullscreen) {\n\t\t\tlet elem = document.documentElement;\n\t\t\tif (elem.requestFullscreen) {\n\t\t\t\telem.requestFullscreen();\n\t\t\t} else if (elem.webkitRequestFullscreen) {\n\t\t\t\telem.webkitRequestFullscreen();\n\t\t\t} else if (elem.msRequestFullscreen) {\n\t\t\t\telem.msRequestFullscreen();\n\t\t\t}\n\t\t} else {\n\t\t\tif (document.exitFullscreen) {\n\t\t\t\tdocument.exitFullscreen();\n\t\t\t} else if (document.webkitExitFullscreen) {\n\t\t\t\tdocument.webkitExitFullscreen();\n\t\t\t} else if (document.msExitFullscreen) {\n\t\t\t\tdocument.msExitFullscreen();\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfullscreen: !this.state.fullscreen\n\t\t})\n\t}\n\n\thandleToggleSidebar() {\n\t\tthis.setState({\n\t\t\tshowSidebar: !this.state.showSidebar\n\t\t})\n\t}\n\n\thandleCompartmentSelection(index) {\n\t\tthis.setState({\n\t\t\tcompartmentIndex: index\n\t\t})\n\t}\n\n\thandleDisplaySegmentation(value) {\n\t\tthis.setState({\n\t\t\tdisplaySegmentation: value\n\t\t})\n\t}\n\n\thandleDisplayProtein(value) {\n\t\tthis.setState({\n\t\t\tdisplayProtein: value\n\t\t})\n\t}\n\n\thandleDebugSamples(value) {\n\t\tthis.setState({\n\t\t\tdebugSamples: value\n\t\t})\n\t}\n\n\thandleUseLod(value) {\n\t\tthis.setState({\n\t\t\tuseLod: value\n\t\t})\n\t}\n\n\thandleIsovalue(value) {\n\t\tthis.setState({\n\t\t\tisovalue: value\n\t\t})\n\t}\n\n\trender() {\n\t\tlet volumeSize = [\n\t\t\tthis.state.sdf.dims[0] * this.state.voxelSize[0],\n\t\t\tthis.state.sdf.dims[1] * this.state.voxelSize[1],\n\t\t\tthis.state.sdf.dims[2] * this.state.voxelSize[2]\n\t\t]\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"background\"></div>\n\t\t\t\t<Import\n\t\t\t\t\tshow={this.state.showImport}\n\t\t\t\t\tonAbort={this.handleAbortImport}\n\t\t\t\t\tonComplete={this.handleCompleteImport}\n\t\t\t\t/>\n\t\t\t\t{!this.state.ready && \n\t\t\t\t    <div className=\"d-flex justify-content-center align-items-center\" style={{position: \"absolute\", height: \"100%\", width: \"100%\"}}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\t\tonClick={this.handleShowImport}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<i className=\"bi-plus-square\"></i>&nbsp;&nbsp;Import Data\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{ this.state.ready &&\n\t\t\t\t<>\n\t\t\t\t<Canvas\n\t\t\t\t\tmainView={this.state.mainView}\n\t\t\t\t\tmapView={this.state.mapView}\n\t\t\t\t\tsdf={this.state.sdf}\n\t\t\t\t\tprotein={this.state.protein}\n\t\t\t\t\tvolumeSize={volumeSize}\n\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\tcompartmentIndex={this.state.compartmentIndex}\n\t\t\t\t\tready={this.state.ready}\n\t\t\t\t\tdebugSamples={this.state.debugSamples}\n\t\t\t\t\tuseLod={this.state.useLod}\n\t\t\t\t\tisovalue={this.state.isovalue}\n\t\t\t\t/>\n\t\t\t\t<Overlay>\n\t\t\t\t\t<Toolbar\n\t\t\t\t\t\tfullscreen={this.state.fullscreen}\n\t\t\t\t\t\tonImportData={this.handleShowImport}\n\t\t\t\t\t\tonToggleFullscreen={this.handleToggleFullscreen}\n\t\t\t\t\t\tonToggleSidebar={this.handleToggleSidebar}\n\t\t\t\t\t/>\n\t\t\t\t\t<Sidebar\n\t\t\t\t\t\topen={this.state.showSidebar}\n\t\t\t\t\t\tnumCompartments={this.state.sdf.buffers.length}\n\t\t\t\t\t\tonCompartmentSelection={this.handleCompartmentSelection}\n\t\t\t\t\t\tselection={this.state.compartmentIndex}\n\t\t\t\t\t\tonDisplaySegmentation={this.handleDisplaySegmentation}\n\t\t\t\t\t\tonDisplayProtein={this.handleDisplayProtein}\n\t\t\t\t\t\tonDebugSamples={this.handleDebugSamples}\n\t\t\t\t\t\tonUseLod={this.handleUseLod}\n\t\t\t\t\t\tonIsovalue={this.handleIsovalue}\n\t\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\t/>\n\t\t\t\t</Overlay>\n\t\t\t\t<Views\n\t\t\t\t\tsdf={this.state.sdf}\n\t\t\t\t\tprotein={this.state.protein}\n\t\t\t\t\tvolumeSize={volumeSize}\n\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\tcompartmentIndex={this.state.compartmentIndex}\n\t\t\t\t\tlocalHistogram={Array.from(this.state.localHistogram)}\n\t\t\t\t\tglobalHistogram={Array.from(this.state.globalHistogram)}\n\t\t\t\t\tlabelsHistogram={this.state.labelsHistogram}\n\t\t\t\t\tdebugSamples={this.state.debugSamples}\n\t\t\t\t\tuseLod={this.state.useLod}\n\t\t\t\t\tisovalue={this.state.isovalue}\n\t\t\t\t\tonMainView={this.handleMainView}\n\t\t\t\t\tonMapView={this.handleMapView}\n\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t\t}\n\t\t\t</>\n\t\t)\n\t}\n}\n\nexport default Main","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nimport Main from './components/Main';\n\nfunction App() {\n  return(\n      <div className=\"App\">\n        <Main />\n     </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}