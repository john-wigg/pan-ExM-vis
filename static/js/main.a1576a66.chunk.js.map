{"version":3,"sources":["tiff.js","components/Main.js","components/Import.js","components/Toolbar.js","components/Sidebar.js","components/Overlay.js","components/Canvas.js","components/Plots.js","components/StoreItem.js","components/MapTools.js","components/Views.js","components/InputVector.js","components/ImportDialog.js","components/LabeledProgressBar.js","components/ImportProgress.js","workers/histogram-worker.js","workers/sdf-worker.js","workers/curv-worker.js","workers/tiff-worker.js","renderers/volume/volume_renderer.js","renderers/volume/default/volume_renderer_default.js","renderers/renderer.js","renderers/map/map_renderer.js","renderers/volume/default/shaders/volume_renderer_vert.glsl","renderers/volume/default/shaders/volume_renderer_frag.glsl","renderers/volume/default/shaders/post_vert.glsl","renderers/volume/default/shaders/post_frag.glsl","renderers/map/shaders/mip_vert.glsl","renderers/map/shaders/mip_frag.glsl","renderers/map/shaders/selection_vert.glsl","renderers/map/shaders/selection_frag.glsl","renderers/map/shaders/map_vert.glsl","renderers/map/shaders/map_frag.glsl","App.js","reportWebVitals.js","index.js"],"names":["Tiff","this","buffer","pixels","Uint8Array","width","height","depth","bits","file","a","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onload","readerEvent","target","result","onerror","_readerEvent","error","onabort","ifd","UTIF","Object","keys","length","Error","properties","t256","t257","t258","t277","i","sliceProperties","JSON","stringify","onError","onProgress","worker","Worker","name","type","decodeTiffBuffer","Comlink","terminate","Main","props","state","fullscreen","showSidebar","showImport","voxelSize","sdf","buffers","dims","protein","curvature","ready","compartmentIndex","displaySegmentation","displayProtein","isovalue","globalHistogram","labelsHistogram","localHistogram","debugSamples","useLod","mainView","mapView","projectionPixels","selectionPixels","handleShowImport","bind","handleToggleFullscreen","handleToggleSidebar","handleAbortImport","handleCompleteImport","handleCompartmentSelection","handleDisplaySegmentation","handleDisplayProtein","handleDebugSamples","handleUseLod","handleIsovalue","handleMainView","handleMapView","handleSelectionUpdated","handleProjectionUpdated","handleSelectionDone","computeLocalHistogram","setState","dom","sdfBuffers","proteinBuffers","curvBuffer","bufferDims","hist","histLabels","document","exitFullscreen","webkitExitFullscreen","msExitFullscreen","elem","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","index","value","compute","volumeSize","className","show","onAbort","onComplete","style","position","variant","size","onClick","onSelectionUpdated","onProjectionUpdated","onSelectionDone","onImportData","onToggleFullscreen","onToggleSidebar","open","numCompartments","onCompartmentSelection","selection","onDisplaySegmentation","onDisplayProtein","onDebugSamples","onUseLod","onIsovalue","Array","from","onMainView","onMapView","Component","Import","tiffProtein","tiffSegmentation","proteinProgress","segmentationProgress","sdfProgress","curvProgress","proteinError","segmentationError","sdfError","curvError","step","preImportError","handleImport","handleClose","onProteinProgress","onSegmentationProgress","onProteinError","onSegmentationError","onSdfProgress","onSdfError","progress","fileProtein","fileSegmentation","message","decode","reducer","accumulator","currentValue","Math","max","reduce","promises","workers","p","b","push","onCurvProgress","pyramid","w","h","d","level0","j","k","pw","ph","pd","ceil","plevel","level","pi","pj","pk","floor","min","Float32Array","area","parseFloat","x","y","z","onImport","onClose","Toolbar","fullscreenIcon","Sidebar","handleSelectCompartmet","dropdownItems","Item","dropdownText","md","in","Body","Check","Input","checked","disabled","onChange","e","Label","Range","Toggle","Menu","Overlay","children","Canvas","canvasRef","useRef","useEffect","Renderer","current","ref","Plots","data","labels","datasets","backgroundColor","borderColor","label","options","scales","yAxes","ticks","beginAtZero","maintainAspectRatio","MapTools","labelRef","useState","edit","setEdit","editText","setEditText","blockBlur","setBlockBlur","focus","buttonOrForm","handleEdit","doEdit","FormControl","marginLeft","onKeyPress","key","onLabel","onBlur","Button","InputGroup","onMouseEnter","onMouseLeave","onExport","onDelete","storeData","localforage","createInstance","storeName","description","penSize","setPenSize","penMode","setPenMode","uuids","setUuids","reloadStore","handlePenMode","mode","handlePenSize","pt","list","iterate","iterationNumber","then","storeList","StoreItem","uuid","getItem","removeItem","item","setItem","handleLabelStore","console","log","png","UPNG","blob","Blob","url","URL","createObjectURL","fileLink","createElement","href","download","click","entries","overflowY","right","bottom","ButtonToolbar","flexDirection","ButtonGroup","vertical","input","onchange","files","replace","filename","img","Views","mainRef","mapRef","InputVector","handleChangeX","handleChangeY","handleChangeZ","Text","Form","Control","placeholder","ImportDialog","working","handleClickImport","handleChangeFileProtein","handleChangeFileSegmentation","handleChangeVoxelSize","formValid","alert","Alert","Modal","onHide","Header","closeButton","Title","Group","Footer","LabeledProgressBar","animated","ProgressBar","clipPath","striped","now","ImportProgress","backdrop","module","exports","VolumeRenderer","texture","textures","vec","THREE","DefaultUp","canvas","renderer","VolumeRendererDefault","camera","clientWidth","clientHeight","controls","OrbitControls","update","materialMarchVolume","glslVersion","uniforms","modelview","matrixWorldInverse","proj","projectionMatrix","resolution","volume0","volume1","volume2","volume3","volume4","volume5","volume6","volume7","volume8","volume9","texDepth","displayCompartments","projection","vertexShader","require","fragmentShader","side","transparent","materialCompose","texGrid","texVolume","sceneGrid","grid","rotateX","PI","add","onBeforeRender","scene","geometry","material","group","pos","updateMatrixWorld","sceneVolume","box","sceneCompose","cameraCompose","plane","quad","renderTargetVolume","renderTargetGrid","depthTexture","volumeDirty","addEventListener","window","resizeCallback","volumeTexture","sdfTextures","rect","getBoundingClientRect","left","top","innerHeight","setViewport","setScissor","setScissorTest","gl","getContext","setRenderTarget","clear","COLOR_BUFFER_BIT","render","curvatureTexture","setSize","innerWidth","aspect","updateProjectionMatrix","geom","setAttribute","points","MapRenderer","materialProjection","volume","extensions","shaderTextureLOD","materialSelection","lastPosition","depressed","restore","doRestore","materialMap","renderTargetSelection","renderTargetProjection","magFilter","minFilter","generateMipmaps","enableRotate","cameraProjection","sceneProjection","planeMap","cameraSelection","sceneSelection","sceneMap","projectionDirty","selectionDirty","mouseMove","mouseDown","mouseUp","mouseOut","raycaster","mouse","clientX","clientY","setFromCamera","clone","intersects","intersectObject","uv","button","getMousePosition","mipmaps","renderSelection","renderProjection","renderMap","readRenderTargetPixels","stats","Stats","showPanel","body","appendChild","volumeRenderer","mapRenderer","main","initCanvas","initMainView","initMapView","preserveDrawingBuffer","autoClearColor","init","animate","setOnSelectionUpdated","callback","setOnProjectionUpdated","setOnSelectionDone","setVolumeSize","setProteinData","format","internalFormat","unpackAlignment","setDistanceFieldData","arrays","tex","setDistanceData","setCurvatureData","setSelectionTexture","getSeletionTexture","setProjectionTexture","getProjectionTexture","requestAnimationFrame","selectionUpdated","getSelectionPixels","getProjectionPixels","setIsovalue","setDisplayProtein","setDisplayCompartment","setDisplayCompartments","setCompartmentIndex","deleteSelection","getMapSelectionPixels","setMapSelectionPixels","setSelectionFromTexture","setDebugSamples","setUseLod","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a1576a66.chunk.js","sourcesContent":["import * as UTIF from 'utif';\n\nimport * as Comlink from 'comlink';\n\nclass Tiff {\n    constructor() {\n        this.buffer = null;\n        this.pixels = new Uint8Array();\n        this.width = 0;\n        this.height = 0;\n        this.depth = 0;\n        this.bits = 0;\n    }\n\n    async open(file) {\n        let buffer = await (() => {\n            return new Promise(function(resolve, reject) {\n                var reader = new FileReader();\n                reader.readAsArrayBuffer(file)\n            \n                reader.onload = readerEvent => {\n                    resolve(readerEvent.target.result);\n                }\n        \n                reader.onerror = _readerEvent => {\n                    reject(reader.error);\n                }\n        \n                reader.onabort = _readerEvent => {\n                    reject(\"FileReader was aborted!\");\n                }\n            });\n        })();\n\n        let ifd = UTIF.decode(buffer);\n        if (Object.keys(ifd[0]).length === 0) {\n            throw new Error(\"Could not decode TIFF file!\");\n        }\n\n        let properties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[0]);\n\n        if (properties.t277[0] !== 1) {\n            throw new Error(\"Only grayscale images are supported.\");\n        }\n    \n        if (properties.t258[0] !== 8) {\n            throw new Error(\"Only images with bit depth 8 are supported.\");\n        }\n    \n        for (var i = 0; i < ifd.length; ++i) {\n            let sliceProperties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[i]);\n    \n            if (JSON.stringify(properties) !== JSON.stringify(sliceProperties)) {\n                throw new Error(\"Slice \" + i + \" has incorrect dimensions or pixel depth.\");\n            }\n        }\n\n        this.buffer = buffer;\n        this.width = properties.t256[0];\n        this.height = properties.t257[0];\n        this.depth = ifd.length;\n        this.bits = properties.t258[0];\n    };\n\n    async decode(onError, onProgress) {\n        const worker = new Worker('./workers/tiff-worker.js', {\n            name: 'tiff-worker',\n            type: 'module'\n          });\n        const decodeTiffBuffer = Comlink.wrap(worker);\n        this.pixels = await decodeTiffBuffer(this.buffer, Comlink.proxy(onError), Comlink.proxy(onProgress));\n        worker.terminate();\n    };\n}\n\nexport { Tiff };","import React, { Component } from 'react'\n\nimport Import from './Import'\nimport Toolbar from './Toolbar';\nimport Sidebar from './Sidebar';\nimport Overlay from './Overlay';\nimport Views from './Views';\nimport Canvas from './Canvas'\n\nimport Button from 'react-bootstrap/Button';\n\nimport * as Comlink from 'comlink';\n\nclass Main extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tfullscreen: false,\n\t\t\tshowSidebar: false,\n\t\t\tshowImport: false,\n\t\t\tvoxelSize: [0, 0, 0],\n\t\t\tsdf: {buffers: [], dims: [0, 0, 0]},\n\t\t\tprotein: {buffer: [], dims: [0, 0, 0]},\n\t\t\tcurvature: {buffer: null, dims: [0, 0, 0]},\n\t\t\tready: false,\n\t\t\tcompartmentIndex: 0,\n\t\t\tdisplaySegmentation: true,\n\t\t\tdisplayProtein: true,\n\t\t\tisovalue: 0,\n\t\t\tglobalHistogram: [],\n\t\t\tlabelsHistogram: [],\n\t\t\tlocalHistogram: [],\n\t\t\t// Debug variables\n\t\t\tdebugSamples: false,\n\t\t\tuseLod: true,\n\t\t\tmainView: \"\",\n\t\t\tmapView: \"\",\n\n\t\t\tprojectionPixels: [],\n\t\t\tselectionPixels: []\n\t\t}\n\t\t\n\t\tthis.handleShowImport = this.handleShowImport.bind(this);\n\t\tthis.handleToggleFullscreen = this.handleToggleFullscreen.bind(this);\n\t\tthis.handleToggleSidebar = this.handleToggleSidebar.bind(this);\n\t\tthis.handleAbortImport = this.handleAbortImport.bind(this);\n\t\tthis.handleCompleteImport = this.handleCompleteImport.bind(this);\n\t\tthis.handleCompartmentSelection = this.handleCompartmentSelection.bind(this);\n\t\tthis.handleDisplaySegmentation = this.handleDisplaySegmentation.bind(this);\n\t\tthis.handleDisplayProtein = this.handleDisplayProtein.bind(this);\n\t\tthis.handleDebugSamples = this.handleDebugSamples.bind(this);\n\t\tthis.handleUseLod = this.handleUseLod.bind(this);\n\t\tthis.handleIsovalue = this.handleIsovalue.bind(this);\n\t\tthis.handleMainView = this.handleMainView.bind(this);\n\t\tthis.handleMapView = this.handleMapView.bind(this);\n\t\tthis.handleSelectionUpdated = this.handleSelectionUpdated.bind(this);\n\t\tthis.handleProjectionUpdated = this.handleProjectionUpdated.bind(this);\n\t\tthis.handleSelectionDone = this.handleSelectionDone.bind(this);\n\n\t\tthis.computeLocalHistogram = this.computeLocalHistogram.bind(this);\n\t}\n\n\thandleShowImport() {\n\t\tthis.setState({\n\t\t\tshowImport: true\n\t\t});\n\t}\n\n\thandleAbortImport() {\n\t\tthis.setState({\n\t\t\tshowImport: false\n\t\t});\n\t}\n\n\thandleMapView(dom) {\n\t\tthis.setState({\n\t\t\tmapView: dom\n\t\t})\n\t}\n\n\thandleMainView(dom) {\n\t\tthis.setState({\n\t\t\tmainView: dom\n\t\t})\n\t}\n\n\thandleCompleteImport(sdfBuffers, proteinBuffers, curvBuffer, bufferDims, voxelSize, hist, histLabels) {\n\t\tthis.setState({\n\t\t\tsdf: {buffers: sdfBuffers, dims: bufferDims},\n\t\t\tprotein: {buffer: proteinBuffers, dims: bufferDims},\n\t\t\tcurvature: {buffer: curvBuffer, dims: bufferDims},\n\t\t\tvoxelSize: voxelSize,\n\t\t\tshowImport: false,\n\t\t\tready: true,\n\t\t\tglobalHistogram: hist,\n\t\t\tlabelsHistogram: histLabels,\n\t\t})\n\t}\n\n\thandleToggleFullscreen() {\n\t\tif (!this.state.fullscreen) {\n\t\t\tlet elem = document.documentElement;\n\t\t\tif (elem.requestFullscreen) {\n\t\t\t\telem.requestFullscreen();\n\t\t\t} else if (elem.webkitRequestFullscreen) {\n\t\t\t\telem.webkitRequestFullscreen();\n\t\t\t} else if (elem.msRequestFullscreen) {\n\t\t\t\telem.msRequestFullscreen();\n\t\t\t}\n\t\t} else {\n\t\t\tif (document.exitFullscreen) {\n\t\t\t\tdocument.exitFullscreen();\n\t\t\t} else if (document.webkitExitFullscreen) {\n\t\t\t\tdocument.webkitExitFullscreen();\n\t\t\t} else if (document.msExitFullscreen) {\n\t\t\t\tdocument.msExitFullscreen();\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfullscreen: !this.state.fullscreen\n\t\t})\n\t}\n\n\thandleToggleSidebar() {\n\t\tthis.setState({\n\t\t\tshowSidebar: !this.state.showSidebar\n\t\t})\n\t}\n\n\thandleCompartmentSelection(index) {\n\t\tthis.setState({\n\t\t\tcompartmentIndex: index\n\t\t})\n\t}\n\n\thandleDisplaySegmentation(value) {\n\t\tthis.setState({\n\t\t\tdisplaySegmentation: value\n\t\t})\n\t}\n\n\thandleDisplayProtein(value) {\n\t\tthis.setState({\n\t\t\tdisplayProtein: value\n\t\t})\n\t}\n\n\thandleDebugSamples(value) {\n\t\tthis.setState({\n\t\t\tdebugSamples: value\n\t\t})\n\t}\n\n\thandleUseLod(value) {\n\t\tthis.setState({\n\t\t\tuseLod: value\n\t\t})\n\t}\n\n\thandleIsovalue(value) {\n\t\tthis.setState({\n\t\t\tisovalue: value\n\t\t})\n\t}\n\n\tasync computeLocalHistogram(selectionPixels, projectionPixels) {\n\t\tif (selectionPixels.buffer && projectionPixels.buffer) {\n\t\t\tconst worker = new Worker('../workers/histogram-worker.js', {\n\t\t\t\tname: 'histogram-worker',\n\t\t\t\ttype: 'module'\n\t\t\t  });\n\t\t\tconst compute = Comlink.wrap(worker);\n\t\t\tlet hist = await compute(this.state.sdf.buffers[0], this.state.protein.buffer[0], this.state.sdf.dims, selectionPixels, projectionPixels);\n\t\t\tworker.terminate();\n\n\t\t\tthis.setState({\n\t\t\t\tlocalHistogram: hist\n\t\t\t})\n\t\t}\n\t}\n\n\thandleProjectionUpdated(projectionPixels) {\n\t\tthis.setState({\n\t\t\tprojectionPixels: projectionPixels\n\t\t})\n\t}\n\n\thandleSelectionUpdated(selectionPixels) {\n\t\tthis.setState({\n\t\t\tselectionPixels: selectionPixels\n\t\t})\n\t}\n\n\thandleSelectionDone() {\n\t\tthis.computeLocalHistogram(this.state.selectionPixels, this.state.projectionPixels);\n\t}\n\n\trender() {\n\t\tlet volumeSize = [\n\t\t\tthis.state.sdf.dims[0] * this.state.voxelSize[0],\n\t\t\tthis.state.sdf.dims[1] * this.state.voxelSize[1],\n\t\t\tthis.state.sdf.dims[2] * this.state.voxelSize[2]\n\t\t]\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"background\"></div>\n\t\t\t\t<Import\n\t\t\t\t\tshow={this.state.showImport}\n\t\t\t\t\tonAbort={this.handleAbortImport}\n\t\t\t\t\tonComplete={this.handleCompleteImport}\n\t\t\t\t/>\n\t\t\t\t{!this.state.ready && \n\t\t\t\t    <div className=\"d-flex justify-content-center align-items-center\" style={{position: \"absolute\", height: \"100%\", width: \"100%\"}}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\t\tonClick={this.handleShowImport}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<i className=\"bi-plus-square\"></i>&nbsp;&nbsp;Import Data\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{ this.state.ready &&\n\t\t\t\t<>\n\t\t\t\t<Canvas\n\t\t\t\t\tmainView={this.state.mainView}\n\t\t\t\t\tmapView={this.state.mapView}\n\t\t\t\t\tsdf={this.state.sdf}\n\t\t\t\t\tprotein={this.state.protein}\n\t\t\t\t\tcurvature={this.state.curvature}\n\t\t\t\t\tvolumeSize={volumeSize}\n\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\tcompartmentIndex={this.state.compartmentIndex}\n\t\t\t\t\tready={this.state.ready}\n\t\t\t\t\tdebugSamples={this.state.debugSamples}\n\t\t\t\t\tuseLod={this.state.useLod}\n\t\t\t\t\tisovalue={this.state.isovalue}\n\t\t\t\t\tonSelectionUpdated={this.handleSelectionUpdated}\n\t\t\t\t\tonProjectionUpdated={this.handleProjectionUpdated}\n\t\t\t\t\tonSelectionDone={this.handleSelectionDone}\n\t\t\t\t/>\n\t\t\t\t<Overlay>\n\t\t\t\t\t<Toolbar\n\t\t\t\t\t\tfullscreen={this.state.fullscreen}\n\t\t\t\t\t\tonImportData={this.handleShowImport}\n\t\t\t\t\t\tonToggleFullscreen={this.handleToggleFullscreen}\n\t\t\t\t\t\tonToggleSidebar={this.handleToggleSidebar}\n\t\t\t\t\t/>\n\t\t\t\t\t<Sidebar\n\t\t\t\t\t\topen={this.state.showSidebar}\n\t\t\t\t\t\tnumCompartments={this.state.sdf.buffers.length}\n\t\t\t\t\t\tonCompartmentSelection={this.handleCompartmentSelection}\n\t\t\t\t\t\tselection={this.state.compartmentIndex}\n\t\t\t\t\t\tonDisplaySegmentation={this.handleDisplaySegmentation}\n\t\t\t\t\t\tonDisplayProtein={this.handleDisplayProtein}\n\t\t\t\t\t\tonDebugSamples={this.handleDebugSamples}\n\t\t\t\t\t\tonUseLod={this.handleUseLod}\n\t\t\t\t\t\tonIsovalue={this.handleIsovalue}\n\t\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\t/>\n\t\t\t\t</Overlay>\n\t\t\t\t<Views\n\t\t\t\t\tlocalHistogram={Array.from(this.state.localHistogram)}\n\t\t\t\t\tglobalHistogram={Array.from(this.state.globalHistogram)}\n\t\t\t\t\tlabelsHistogram={this.state.labelsHistogram}\n\t\t\t\t\tonMainView={this.handleMainView}\n\t\t\t\t\tonMapView={this.handleMapView}\n\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t\t}\n\t\t\t</>\n\t\t)\n\t}\n}\n\nexport default Main","import React, { Component } from 'react'\n\nimport ImportDialog from './ImportDialog';\nimport ImportProgress from './ImportProgress';\n\nimport * as Comlink from 'comlink';\n\nimport { Tiff } from '../tiff';\n\nclass Import extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tiffProtein: \"\",\n            tiffSegmentation: \"\",\n            voxelSize: \"\",\n            proteinProgress: 0,\n            segmentationProgress: 0,\n            sdfProgress: 0,\n            curvProgress: 0,\n            proteinError: \"\",\n            segmentationError: \"\",\n            sdfError: \"\",\n            curvError: \"\",\n            step: \"dialog\",\n            preImportError: \"\"\n        }\n\n        this.handleImport = this.handleImport.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.onProteinProgress = this.onProteinProgress.bind(this);\n        this.onSegmentationProgress = this.onSegmentationProgress.bind(this);\n        this.onProteinError = this.onProteinError.bind(this);\n        this.onSegmentationError = this.onSegmentationError.bind(this);\n        this.onSdfProgress = this.onSdfProgress.bind(this);\n        this.onSdfError = this.onSdfError.bind(this);\n    }\n\n    onProteinProgress(progress) {\n        this.setState({\n            proteinProgress: progress\n        })\n    }\n\n    onSegmentationProgress(progress) {\n        this.setState({\n            segmentationProgress: progress\n        })\n    }\n\n    onProteinError(error) {\n        this.setState({\n            proteinError: error\n        })\n    }\n\n    onSegmentationError(error) {\n        this.setState({\n            segmentationError: error\n        })\n    }\n\n    onSdfProgress(progress) {\n        this.setState({\n            sdfProgress: progress\n        })\n    }\n\n    onSdfError(error) {\n        this.setState({\n            sdfError: error\n        })\n    }\n\n    onCurvProgress(progress) {\n        this.setState({\n            curvProgress: progress\n        })\n    }\n    \n    onCurvError(error) {\n        this.setState({\n            curvError: error\n        })\n    }\n\n    async handleImport(fileProtein, fileSegmentation, voxelSize) {\n        let tiffProtein = new Tiff();\n        let tiffSegmentation = new Tiff();\n    \n        try {\n          await tiffProtein.open(fileProtein);\n          await tiffSegmentation.open(fileSegmentation);\n        } catch (e) {\n          this.setState({\n            preImportError: e.message\n          });\n          return;\n        }\n    \n        if (tiffProtein.width !== tiffSegmentation.width || tiffProtein.height !== tiffSegmentation.height || tiffProtein.depth !== tiffSegmentation.depth) {\n          this.setState({\n            preImportError: \"Please make sure the protein and the segmentation data have the same dimensions.\"\n          });\n          return;\n        }\n\n        this.setState({\n            step: \"import\",\n            voxelSize: voxelSize,\n            tiffProtein: tiffProtein,\n            tiffSegmentation: tiffSegmentation,\n            segmentationProgress: 0,\n            proteinProgress: 0,\n            sdfProgress: 0,\n            segmentationError: \"\",\n            proteinError: \"\",\n            sdfError: \"\"\n        });\n        \n        // We can decode the TIFFs in parallel.\n        await tiffProtein.decode(this.onProteinError, this.onProteinProgress);\n        await tiffSegmentation.decode(this.onSegmentationError, this.onSegmentationProgress);\n        const reducer = (accumulator, currentValue) => Math.max(accumulator, currentValue);\n        var numCompartments = tiffSegmentation.pixels.reduce(reducer);\n\n        let promises = [];\n        let workers = [];\n        let progress = new Array(numCompartments+1);\n\n        for (let i = 0; i < numCompartments+1; ++i) {\n            const target = i;\n            const onProgress = (p) => {\n                progress[target] = p * 100;\n                this.onSdfProgress(progress.reduce((a, b) => a + b, 0) / (numCompartments + 1));\n            }\n            promises.push(new Promise(function(resolve, reject) {\n                const worker = new Worker('../workers/sdf-worker.js', {\n                    name: 'sdf-worker',\n                    type: 'module'\n                });\n                workers.push(worker);\n                const sdf = Comlink.wrap(worker);\n                let result = sdf(tiffSegmentation, voxelSize, target, Comlink.proxy(onProgress));\n                resolve(result);\n            }));\n        }\n\n        //const sdfBuffers = await Promise.all(promises); // This needs too much memory for some reason?\n        let sdfBuffers = [];\n        for (let i = 0; i < promises.length; ++i) {\n            sdfBuffers.push(await promises[i]);\n        }\n        for (let i = 0; i < workers.length; ++i) {\n            workers[i].terminate();\n        }\n        this.onSdfProgress(100);\n\n        const worker = new Worker('../workers/curv-worker.js', {\n            name: 'curv-worker',\n            type: 'module'\n        });\n        const curvature = Comlink.wrap(worker);\n        const onProgress = (p) => {\n            this.onCurvProgress(p * 100)\n        }\n        let curvBuffer = await curvature(sdfBuffers[0], [tiffProtein.width, tiffProtein.height, tiffProtein.depth], voxelSize, Comlink.proxy(onProgress));\n\n        // Compute pyramid.\n        let pyramid = [];\n        let w = tiffProtein.width;\n        let h = tiffProtein.height;\n        let d = tiffProtein.depth;\n\n        let level0 = new Uint8Array(2*w*h*d);\n        for (let i = 0; i < w; ++i) {\n            for (let j = 0; j < h; ++j) {\n                for (let k = 0; k < d; ++k) {\n                    level0[2*(k*w*h+j*w+i)] = tiffProtein.pixels[k*w*h+j*w+i];\n                    level0[2*(k*w*h+j*w+i)+1] = level0[2*(k*w*h+j*w)+i];\n                }\n            }\n        }\n        pyramid.push(level0);\n\n        while (true) {\n            let pw = w;\n            let ph = h;\n            let pd = d;\n            w = Math.ceil(w / 2.0);\n            h = Math.ceil(h / 2.0);\n            d = Math.ceil(d / 2.0);\n\n            let plevel = pyramid[pyramid.length - 1];\n            let level = new Uint8Array(2*w*h*d);\n            for (let pi = 0; pi < pw; ++pi) {\n                for (let pj = 0; pj < ph; ++pj) {\n                    for (let pk = 0; pk < pd; ++pk) {\n                        let i = Math.floor(pi/2.0);\n                        let j = Math.floor(pj/2.0);\n                        let k = Math.floor(pk/2.0);\n                        level[2*(k*w*h+j*w+i)] = Math.max(level[2*(k*w*h+j*w+i)], plevel[2*(pk*pw*ph+pj*pw+pi)]);\n                        level[2*(k*w*h+j*w+i)+1] = Math.min(level[2*(k*w*h+j*w+i)+1], plevel[2*(pk*pw*ph+pj*pw+pi)+1]);\n                    }\n                }\n            }\n            pyramid.push(level);\n\n            if (w <= 1 || h <= 1 || d <= 1) break;\n        }\n\n        // Compute global histogram.\n        const bitDepth = 8;\n        let hist = new Float32Array(2**bitDepth);\n        let area = new Float32Array(2**bitDepth);\n    \n        for (let i = 0; i < sdfBuffers[0].length; ++i) {\n            hist[sdfBuffers[0][i]] += tiffProtein.pixels[i];\n            area[sdfBuffers[0][i]] += 1.0;\n    \n        }\n    \n        for (let i = 0; i < hist.length; ++i) {\n            hist[i] = hist[i]/area[i];\n        }\n\n        let histLabels = [];\n        for (let i = 0; i < 256; ++i) {\n            histLabels.push(i / 10.0 - 5.0);\n        }\n    \n        this.setState({\n            step: \"dialog\"\n        });\n\n        this.props.onComplete(sdfBuffers, pyramid, curvBuffer, [tiffProtein.width, tiffProtein.height, tiffProtein.depth],\n                              [parseFloat(voxelSize.x), parseFloat(voxelSize.y), parseFloat(voxelSize.z)],\n                              hist, histLabels);\n    }\n\n    handleClose() {\n        this.props.onAbort();\n    }\n\n    render() {\n        return (\n            <>\n                <ImportDialog\n                    show={this.state.step === \"dialog\" && this.props.show}\n                    error={this.state.preImportError}\n                    onImport={this.handleImport}\n                    onClose={this.handleClose}\n                />\n                <ImportProgress\n                    show={this.state.step === \"import\" && this.props.show}\n                    proteinProgress={this.state.proteinProgress}\n                    segmentationProgress={this.state.segmentationProgress}\n                    sdfProgress={this.state.sdfProgress}\n                    curvProgress={this.state.curvProgress}\n                    proteinError={this.state.proteinError}\n                    segmentationError={this.state.segmentationError}\n                    sdfError={this.state.sdfError}\n                    curvError={this.state.curvError}\n                />\n            </>\n        )\n    }\n}\n\nexport default Import","import React, { Component } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nclass Toolbar extends Component {\n\trender() {\n\t\tlet fullscreenIcon;\n\t\tif (this.props.fullscreen) fullscreenIcon = \"bi-fullscreen-exit\";\n\t\telse fullscreenIcon = \"bi-arrows-fullscreen\";\n\t\treturn (\n\t\t\t<ButtonToolbar className=\"justify-content-between\">\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleSidebar}\n\t\t\t\t><i className=\"bi-tools\"></i></Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onImportData}\n\t\t\t\t>Import Data</Button>\n\t\t\t</ButtonGroup>\n\t\t\t<ButtonGroup>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleFullscreen}\n\t\t\t\t><i className={fullscreenIcon}></i></Button>\n\t\t\t</ButtonGroup>\n\t\t\t</ButtonToolbar>\n\t\t)\n\t}\n}\n\nexport default Toolbar","import React from 'react'\n\nimport Col from 'react-bootstrap/Col';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Card from 'react-bootstrap/Card';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\nconst Sidebar = props => {\n\n    const handleSelectCompartmet = (index) => {\n        props.onCompartmentSelection(index);\n    }\n\n    const handleChangeDisplaySegmentation = (e) => {\n        props.onDisplaySegmentation(e.target.checked);\n    }\n\n    const handleChangeDisplayProtein = (e) => {\n        props.onDisplayProtein(e.target.checked);\n    }\n\n    const handleChangeDebugSamples = (e) => {\n        props.onDebugSamples(e.target.checked);\n    }\n\n    const handleChangeUseLod = (e) => {\n        props.onUseLod(e.target.checked);\n    }\n\n    const handleChangeIsovalue = (e) => {\n        props.onIsovalue(e.target.value);\n    }\n\n    let dropdownItems = [\n    <Dropdown.Item\n        onClick={() => handleSelectCompartmet(0)}\n    >All Compartments</Dropdown.Item>]\n    for (var i = 0; i < props.numCompartments-1; ++i) {\n        let index = i;\n        dropdownItems.push(\n        <Dropdown.Item\n            onClick={() => handleSelectCompartmet(index+1)}\n        >Compartment {index+1}</Dropdown.Item>);\n    }\n\n    let dropdownText = \"\";\n    if (props.numCompartments === 0) dropdownText = \"No Compartment Data\"\n    else if (props.selection === 0) dropdownText = \"All Compartments\";\n    else dropdownText = \"Compartment \" + props.selection;\n    return (\n        <Row md={3}>\n            <Col>\n                <Collapse in={props.open}>\n                    <Card>\n                        <Card.Body>\n                            <Form>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.displayProtein}\n                                        disabled={props.numCompartments===0}\n                                        onChange={handleChangeDisplayProtein}\n                                    />\n                                    <Form.Check.Label>Display Protein</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.displaySegmentation}\n                                        disabled={props.numCompartments===0}\n                                        onChange={handleChangeDisplaySegmentation}\n                                    />\n                                    <Form.Check.Label>Display Segmentation</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Range\n                                    disabled={props.numCompartments===0}\n                                    onChange={handleChangeIsovalue}\n                                />\n                                <Dropdown>\n                                    <Dropdown.Toggle disabled={props.numCompartments===0}>\n                                        {dropdownText}\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        {dropdownItems}\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                                Debug Options\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.debugSamples}\n                                        onChange={handleChangeDebugSamples}\n                                    />\n                                    <Form.Check.Label>Display Texture Samples</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.useLod}\n                                        onChange={handleChangeUseLod}\n                                    />\n                                    <Form.Check.Label>Use LoD</Form.Check.Label>\n                                </Form.Check>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </Collapse>\n            </Col>\n        </Row>\n    );\n}\n\nexport default Sidebar;","const Overlay = (props) => {\n    return <div className=\"overlay fill-screen d-grid gap-3\">\n        {props.children}\n    </div>\n}\n\nexport default Overlay","import React, { useRef, useEffect } from 'react'\n\nimport * as Renderer from '../renderers/renderer.js'\n\nconst Canvas = props => {\n\tconst canvasRef = useRef(null)\n\n\tuseEffect(() => {\n\t\tRenderer.setOnSelectionUpdated(props.onSelectionUpdated);\n\t}, [props.onSelectionUpdated])\n\n\tuseEffect(() => {\n\t\tRenderer.setOnProjectionUpdated(props.onProjectionUpdated);\n\t}, [props.onProjectionUpdated])\n\n\tuseEffect(() => {\n\t\tRenderer.setOnSelectionDone(props.onSelectionDone);\n\t}, [props.onSelectionDone])\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.main(canvasRef.current, props.mainView, props.mapView);\n\t\t}\n\t}, [props.mainView, props.mapView, props.ready])\n\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDistanceFieldData(props.sdf.buffers, props.sdf.dims);\n\t\t}\n\t}, [props.sdf, props.mainView, props.mapView, props.ready])\n\t\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setProteinData(props.protein.buffer, props.protein.dims);\n\t\t}\n\t}, [props.protein, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setCurvatureData(props.curvature.buffer, props.curvature.dims);\n\t\t}\n\t}, [props.curvature, props.mainView, props.mapView, props.ready])\n\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setVolumeSize(props.volumeSize);\n\t\t}\n\t}, [props.volumeSize, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDisplayProtein(props.displayProtein);\n\t\t}\n\t}, [props.displayProtein, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDisplayCompartment(props.displaySegmentation);\n\t\t}\n\t}, [props.displaySegmentation, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setCompartmentIndex(props.compartmentIndex);\n\t\t}\n\t}, [props.compartmentIndex, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDebugSamples(props.debugSamples);\n\t\t}\t\n\t}, [props.debugSamples, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setUseLod(props.useLod);\n\t\t}\n\t}, [props.useLod, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setIsovalue(props.isovalue);\n\t\t}\n\t}, [props.isovalue, props.mainView, props.mapView, props.ready])\n\n\treturn (\n\t\t<canvas className=\"renderer\" ref={canvasRef}/>\n\t);\n}\n\nexport default Canvas","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nconst Plots = props => {\n    const data = {\n        labels: props.labelsHistogram,\n        datasets: [{\n            backgroundColor: 'rgb(255, 99, 132)',\n            borderColor: 'rgb(255, 99, 132)',\n            data: props.globalHistogram,\n            label: 'Global Histogram',\n        },\n        {\n            backgroundColor: 'rgb(0, 255, 132)',\n            borderColor: 'rgb(0, 255, 132)',\n            data: props.localHistogram,\n            label: 'Local Histogram',\n        }]\n    };\n\n    const options = {\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        beginAtZero: true,\n                    },\n                },\n            ],\n        },\n        maintainAspectRatio: false\n    };\n\n    return (\n        <>\n            <Bar\n                className=\"plots\"\n                data={data}\n                options={options}\n            />\n        </>\n    );\n};\n\nexport default Plots;","import React, { useEffect, useRef, useState } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nconst MapTools = props => {\n    const labelRef = useRef();\n\n    const [edit, setEdit] = useState(false);\n    const [editText, setEditText] = useState(\"\");\n    const [blockBlur, setBlockBlur] = useState(false); // Block onBlur when mouse is over the label button.\n\n    useEffect(() => {\n        if (labelRef.current && edit) {\n            labelRef.current.focus();\n            labelRef.current.value = editText;\n        }\n    }, [edit, editText, labelRef])\n\n    const handleBlur = () => {\n        if (!blockBlur) {\n            handleEdit(false);\n        }\n    }\n\n    const handleClickEdit = () => {\n        handleEdit(!edit);\n    }\n\n    const handleEdit = (doEdit) => {;\n        setEdit(doEdit);\n        setEditText(props.label);\n    }\n\n    const handleChange = (e) => {\n        props.onLabel(e.target.value);\n    }\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleEdit(false);\n        }\n    }\n\n    let buttonOrForm;\n    if (edit === true) {\n        buttonOrForm = <FormControl\n            style={{marginLeft: \"auto\"}}\n            onKeyPress={handleKeyPress}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            ref={labelRef}\n        />\n    } else {\n        buttonOrForm = <Button\n                            style={{marginLeft: \"auto\"}}\n                            onClick={props.onClick}\n                        >{props.label}</Button>\n    }\n\n    return(\n        <InputGroup>\n        {buttonOrForm}\n        <Button\n            onClick={handleClickEdit}\n            onMouseEnter={() => setBlockBlur(true)} // This is needed to re-enable the button\n            onMouseLeave={() => setBlockBlur(false)}\n        ><i className=\"bi-tag-fill\"></i></Button>\n        <Button\n            onClick={props.onExport}\n        ><i className=\"bi-download\"></i></Button>\n        <Button\n            onClick={props.onDelete}\n        ><i className=\"bi-trash-fill\"></i></Button>\n        </InputGroup>\n    );\n}\n\nexport default MapTools","import React, { useState, useEffect } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nimport StoreItem from './StoreItem';\n\nimport * as Renderer from '../renderers/renderer.js'\nimport localforage from 'localforage';\n\nimport * as UPNG from 'upng-js';\n\nimport { v4 as uuid } from 'uuid';\n\nconst dbName = 'selectionStore';\n\n// Create table 2 in databaseName\nvar storeData = localforage.createInstance({\n    name        : dbName,\n    storeName   : 'storeData',\n    description : '...'\n});\n\nconst MapTools = props => {\n\n    const [penSize, setPenSize] = useState(20);\n    const [penMode, setPenMode] = useState(\"draw\");\n    const [uuids, setUuids] = useState([]);\n\n    useEffect(() => {\n        reloadStore();\n    }, []);\n\n    const handleDelete = () => {\n        Renderer.deleteSelection();\n    };\n\n    const handlePenMode = (mode) => {\n        setPenMode(mode);\n        Renderer.setPenMode(mode);\n    }\n\n    const handlePenSize = (pt) => {\n        setPenSize(pt);\n        Renderer.setPenSize(pt);\n    };\n\n    const reloadStore = () => {\n        let list = {};\n        storeData.iterate(function(value, key, iterationNumber) {\n            list[key] = value.name;\n        }).then(() => {setUuids(list)})\n    }\n\n    const handleLoad = (uuid) => {\n        storeData.getItem(uuid).then((value) => {\n            Renderer.setMapSelectionPixels(value.data, value.width, value.height);\n        })\n    }\n\n    const handleDeleteStore = (uuid) => {\n        storeData.removeItem(uuid).then(reloadStore);\n    }\n\n    const handleSave = () => {\n        const selectionPixels = Renderer.getMapSelectionPixels();\n        storeData.setItem(uuid(), {name: \"New Selection\", \n                                   width: selectionPixels.width,\n                                   height: selectionPixels.height,\n                                   data: selectionPixels.buffer}).then(reloadStore);\n    }\n\n    const handleImport = () => {\n        let input = document.createElement('input');\n        input.type = 'file';\n\n        input.onchange = e => { \n            var file = e.target.files[0]; \n            new Promise(function(resolve, reject) {\n                var reader = new FileReader();\n                reader.readAsArrayBuffer(file)\n            \n                reader.onload = readerEvent => {\n                    resolve([readerEvent.target.result, file.name.replace('.png','')]);\n                }\n        \n                reader.onerror = _readerEvent => {\n                    reject(reader.error);\n                }\n        \n                reader.onabort = _readerEvent => {\n                    reject(\"FileReader was aborted!\");\n                }\n            }).then(([buffer, filename]) => {\n                let img = UPNG.decode(buffer);\n                let pixels = new Uint8Array(UPNG.toRGBA8(img)[0]);\n                storeData.setItem(uuid(), {name: filename, \n                    width: img.width,\n                    height: img.height,\n                    data: pixels}).then(reloadStore);\n            })\n        }\n\n        input.click();\n    }\n\n    const handleLabelStore = (uuid, label) => {\n        storeData.getItem(uuid).then((item) => {\n            item.name = label;\n            storeData.setItem(uuid, item).then(reloadStore);\n        })\n    }\n\n    const handleExportStore = (uuid) => {\n        storeData.getItem(uuid).then((item) => {\n            console.log(item.data);\n            let png = UPNG.encode([item.data.buffer], item.width, item.height, 0)\n            let blob = new Blob([png], {type: \"image/png\"});\n            let url = URL.createObjectURL(blob); \n            let fileLink = document.createElement('a');\n            fileLink.href = url;\n            fileLink.download = item.name;\n            fileLink.click();\n        })\n    }\n    \n    let storeList = []\n    for (const [key, value] of Object.entries(uuids)) {\n        storeList.push(\n            <StoreItem\n                label={value}\n                onClick={() => handleLoad(key)}\n                onDelete={()=> handleDeleteStore(key)}\n                onLabel={(label) => handleLabelStore(key, label)}\n                onExport={() => handleExportStore(key)}\n            />\n        )\n    }\n\n    return(\n        <div className=\"stack no-pointer-events\" style={{position: \"relative\"}}>\n            <div className=\"overlay d-flex flex-column-reverse pointer-events\" style={{overflowY: \"overlay\", height: \"80%\", right: 0, bottom: 0}}>\n                <div className=\"align-self-end d-grid gap-2\">\n                {storeList}\n                </div>\n            </div>\n            <div  className=\"overlay\">\n            <ButtonToolbar style={{flexDirection: \"column\", width: \"20pt\"}}>\n            <ButtonGroup vertical>\n                <Button\n                    onClick={handleDelete}\n                ><i className=\"bi-trash-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                <Button\n                    disabled={penMode===\"draw\"}\n                    onClick={() => {handlePenMode(\"draw\")}}\n                ><i className=\"bi-pencil-fill\"></i></Button>\n                <Button\n                    disabled={penMode===\"erase\"}\n                    onClick={() => {handlePenMode(\"erase\")}}\n                ><i className=\"bi-eraser-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                <Button\n                    disabled={penSize===40}\n                    onClick={() => {handlePenSize(40)}}\n                ><i style={{\"fontSize\": \"8pt\"}} className=\"bi-circle-fill\"></i></Button>\n                <Button\n                    disabled={penSize===20}\n                    onClick={() => {handlePenSize(20)}}\n                ><i style={{\"fontSize\": \"6pt\"}} className=\"bi-circle-fill\"></i></Button>\n                <Button\n                    disabled={penSize===10}\n                    onClick={() => {handlePenSize(10)}}\n                ><i style={{\"fontSize\": \"4pt\"}} className=\"bi-circle-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                    <Button\n                        onClick={handleSave}\n                    ><i className=\"fas fa-save\"></i></Button>\n                    <Button\n                        onClick={handleImport}\n                    ><i className=\"bi-upload\"></i></Button>\n            </ButtonGroup>\n            </ButtonToolbar>\n            </div>\n        </div>\n    );\n}\n\nexport default MapTools","import React, { useRef, useEffect } from 'react'\n\nimport Plots from './Plots'\nimport MapTools from './MapTools'\n\nconst Views= props => {\n    const mainRef = useRef(null);\n    const mapRef = useRef(null);\n\n    const onMainView = props.onMainView;\n    const onMapView = props.onMapView;\n\n    useEffect(() => {\n        onMainView(mainRef.current);\n        onMapView(mapRef.current);\n    }, [onMainView, onMapView]);\n\n    return(\n        <>\n        <div className=\"views d-flex flex-col\">\n            <div className=\"flex-fill d-flex flex-row\">\n                <div className=\"flex-fill stack-base\">\n                    <div className=\"stack\" ref={mainRef}></div>\n                </div>\n                <div className=\"v-divider\"></div>\n                <div className=\"flex-fill d-flex flex-column\">\n                    <div className=\"flex-fill stack-base\">\n                        <div className=\"stack\"ref={mapRef}></div>\n                        <MapTools />\n                    </div>\n                    <div className=\"h-divider\"></div>\n                    <div className=\"flex-fill\">\n                        <Plots\n                            localHistogram={props.localHistogram}\n                            globalHistogram={props.globalHistogram}\n                            labelsHistogram={props.labelsHistogram}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n        </>\n    );\n}\n\nexport default Views","import React, {Component} from 'react'\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nclass InputVector extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n        this.handleChangeX = this.handleChangeX.bind(this);\n        this.handleChangeY = this.handleChangeY.bind(this);\n        this.handleChangeZ = this.handleChangeZ.bind(this);\n\t}\n\n    handleChangeX(e) {\n        this.props.onChange({\n            x: e.target.value,\n            y: this.props.value.y,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeY(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: e.target.value,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeZ(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: this.props.value.y,\n            z: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Text>Voxel Size</InputGroup.Text>\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"x\"\n                    value={this.props.value.x}\n                    onChange={this.handleChangeX}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"y\"\n                    value={this.props.value.y}\n                    onChange={this.handleChangeY}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"z\"\n                    value={this.props.value.z}\n                    onChange={this.handleChangeZ}\n                />\n            </InputGroup>\n        )\n    }\n}\n\nexport default InputVector","import React, {Component} from 'react'\n\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\nimport InputVector from './InputVector'\n\nclass ImportDialog extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\n    this.state = {\n      fileProtein: \"\",\n      fileSegmentation: \"\",\n      voxelSize: {x: \"\", y: \"\", z: \"\"},\n      working: false\n    }\n\n    this.handleClickImport = this.handleClickImport.bind(this);\n\n    this.handleChangeFileProtein = this.handleChangeFileProtein.bind(this);\n    this.handleChangeFileSegmentation = this.handleChangeFileSegmentation.bind(this);\n    this.handleChangeVoxelSize = this.handleChangeVoxelSize.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\t}\n\n  handleChangeFileProtein(e) {\n    this.setState({\n      fileProtein: e.target.files[0]\n    })\n  }\n\n  handleChangeFileSegmentation(e) {\n    this.setState({\n      fileSegmentation: e.target.files[0]\n    })\n  }\n\n  handleChangeVoxelSize(value) {\n    this.setState({\n      voxelSize: value\n    })\n  }\n\n  async handleClickImport(e) {\n    this.setState({\n      working: true\n    })\n\n    this.props.onImport(this.state.fileProtein, this.state.fileSegmentation, this.state.voxelSize);\n\n    this.setState({\n      working: false\n    })\n  }\n\n  handleClose(e) {\n    this.props.onClose();\n  }\n\n  render() {\n    let formValid;\n    if (this.state.fileProtein\n        && this.state.fileSegmentation\n        && this.state.voxelSize.x\n        && this.state.voxelSize.y\n        && this.state.voxelSize.z\n        && !this.state.working) formValid = true;\n    else formValid = false;\n\n    let alert;\n    if (this.props.error) {\n      alert = <Alert variant=\"danger\">{this.props.error}</Alert>\n    }\n\n    return (\n        <Modal show={this.props.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Import Data</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Protein Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileProtein}\n                    />\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Segmentation Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileSegmentation}\n                    />\n                </Form.Group>\n                <InputVector\n                  value={this.state.voxelSize}\n                  onChange={this.handleChangeVoxelSize}\n                />\n            </Form>\n            {alert}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              disabled={!formValid}\n              onClick={this.handleClickImport}\n            >\n              Import\n            </Button>\n          </Modal.Footer>\n        </Modal>\n    )\n  }\n}\n\nexport default ImportDialog","import React, {Component} from 'react';\n\nimport \"../App.css\";\n\nimport Alert from 'react-bootstrap/Alert';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nclass LabeledProgressBar extends Component {\n\trender() {\n\t\tlet variant = \"\"\n\t\tif (this.props.progress >= 100) variant = \"success\";\n\t\tif (this.props.error) variant = \"danger\";\n\n\t\tlet animated = (this.props.progress < 100 && !this.props.error);\n\n\t\tlet alert;\n\t\tif (this.props.error) {\n\t\t\talert = <Alert variant=\"danger\">{this.props.error}</Alert>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"labeled-progress-bar\">\n\t\t\t\t<ProgressBar>\n\t\t\t\t\t<div className=\"label-front\" style={{clipPath: `inset(0 ${100-this.props.progress}% 0 0)`}}>{this.props.label}</div>\n\t\t\t\t\t<div className=\"label-back\">{this.props.label}</div>\n\t\t\t\t\t<ProgressBar striped variant={variant} animated={animated} now={this.props.progress} />\n\t\t\t\t</ProgressBar>\n\t\t\t\t{alert}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default LabeledProgressBar;","import React, {Component} from 'react'\n\nimport Modal from 'react-bootstrap/Modal';\n\nimport LabeledProgressBar from './LabeledProgressBar';\n\nclass ImportProgress extends Component {\n\tcomponentDidMount() {\n\n\t}\n  \n\tcomponentWillUnmount() {\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal backdrop=\"static\" show={this.props.show}>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>Importing Data...</Modal.Title>\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Body>\n\t\t\t\t<div className=\"d-grid gap-3\">\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.proteinProgress}\n\t\t\t\t\t\terror={this.props.proteinError}\n\t\t\t\t\t\tlabel=\"Decode Protein TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.segmentationProgress}\n\t\t\t\t\t\terror={this.props.segmentationError}\n\t\t\t\t\t\tlabel=\"Decode Segmentation TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.sdfProgress}\n\t\t\t\t\t\terror={this.props.sdfError}\n\t\t\t\t\t\tlabel=\"Compute Distance Fields...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.curvProgress}\n\t\t\t\t\t\terror={this.props.curvError}\n\t\t\t\t\t\tlabel=\"Compute Mean Curvature...\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nexport default ImportProgress","module.exports = __webpack_public_path__ + \"static/js/histogram-worker.65619c02.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/sdf-worker.6c045d76.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/curv-worker.efbc4c2d.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/tiff-worker.a6adfe81.chunk.worker.js\"","// \"Abstract\" class for the volume renderer.\n\nclass VolumeRenderer {\n\t// Renders the volume.\n\trender() { };\n\n\tsetVolumeSize(width, height, depth) { };\n\n\t// Set the protein data.\n\tsetProteinData(texture) { };\n\n\tsetDistanceData(textures) { };\n\n\tsetCurvatureData(texture) { };\n\n\tsetIsovalue(value) { };\n\n\tsetCompartmentIndex(value) { };\n\t\n\tsetDisplayCompartments(value) { };\n\n\tsetDisplayProtein(value) { };\n\n\tresizeCallback() { };\n\t\n\tsetSkeleton(vec) { };\n\n\tselectionUpdated() { };\n\n\tsetDebugSamples(value) { };\n\n\tsetUseLod(value) { };\n}\n\nexport { VolumeRenderer };","import { VolumeRenderer } from '../volume_renderer.js'\n\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1);\n\nclass VolumeRendererDefault extends VolumeRenderer {\n\tvolumeTexture\n\tsdfTextures\n\n\tdom;\n\trenderer;\n\n\tvolumeSize;\n\n\trenderTargetGrid;\n\trenderTargetVolume;\n\n\tcamera;\n\tcontrols;\n\n\tcameraCompose;\n\n\tbox;\n\tgrid;\n\n\tmaterialMarchVolume;\n\tmaterialCompose;\n\n\tsceneGrid;\n\tsceneVolume;\n\tsceneCompose;\n\n\tvolumeDirty;\n\n\tconstructor(renderer, dom) {\n\t\tsuper();\n\t\tthis.dom = dom;\n\t\tthis.renderer = renderer;\n\n\t\tthis.camera = new THREE.PerspectiveCamera( 75, dom.clientWidth/dom.clientHeight, 0.1, 5000 );\n\t\t\n\t\tthis.controls = new OrbitControls(this.camera, dom);\n\t\tthis.camera.position.y = -85;\n\t\tthis.controls.update();\n\n\t\tthis.materialMarchVolume = new THREE.RawShaderMaterial( {\n\t\t\tglslVersion: THREE.GLSL3,\n\t\t\tuniforms: {\n\t\t\t\tmodelview: { value: this.camera.matrixWorldInverse },\n\t\t\t\tproj: {value: this.camera.projectionMatrix },\n\t\t\t\tresolution: { value: new THREE.Vector2(0, 0) },\n\t\t\t\tvolume0: { value:null },\n\t\t\t\tvolume1: { value:null },\n\t\t\t\tvolume2: { value:null },\n\t\t\t\tvolume3: { value:null },\n\t\t\t\tvolume4: { value:null },\n\t\t\t\tvolume5: { value:null },\n\t\t\t\tvolume6: { value:null },\n\t\t\t\tvolume7: { value:null },\n\t\t\t\tvolume8: { value:null },\n\t\t\t\tvolume9: { value:null },\n\t\t\t\tvolumeSize: { value: null },\n\t\t\t\ttexDepth: { value: null },\n\t\t\t\tsdf: { value: null },\n\t\t\t\tcurvature: { value: null },\n\t\t\t\tisovalue: { value: null },\n\t\t\t\tdisplayProtein: { value: false },\n\t\t\t\tdisplayCompartments: { value: false },\n\t\t\t\tselection: { value: false },\n\t\t\t\tprojection: { value: false },\n\t\t\t\tdebugSamples: { value: false },\n\t\t\t\tuseLod: { value: true }\n\t\t\t},\n\t\t\tvertexShader: require('./shaders/volume_renderer_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/volume_renderer_frag.glsl'),\n\t\t\tside: THREE.BackSide,\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialCompose = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/post_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/post_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\ttexGrid: { value: null },\n\t\t\t\ttexVolume: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.sceneGrid = new THREE.Scene();\n\t\tconst size = 10;\n\t\tconst divisions = 10;\n\t\tthis.grid = new THREE.GridHelper( size, divisions );\n\t\tthis.grid.rotateX(0.5*Math.PI);\n\t\tthis.sceneGrid.add(this.grid);\n\t\t\n\t\tthis.grid.onBeforeRender = ( renderer, scene, camera, geometry, material, group ) => {\n\t\t\tvar pos = this.controls.target;\n\t\t\tthis.grid.position.x = pos.x;\n\t\t\tthis.grid.position.y = pos.y;\n\t\t\tthis.grid.position.z = pos.z;\n\t\t\tthis.grid.updateMatrixWorld();\n\t\t};\n\n\t\tconst geometry = new THREE.BoxGeometry();\n\t\tthis.sceneVolume = new THREE.Scene();\n\t\tthis.box = new THREE.Mesh(geometry, this.materialMarchVolume)\n\t\tthis.sceneVolume.add(this.box);\n\n\t\tthis.sceneCompose = new THREE.Scene();\n\t\tthis.cameraCompose = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialCompose);\n\t\tthis.sceneCompose.add(quad);\n\n\t\tthis.renderTargetVolume = new THREE.WebGLRenderTarget(0, 0);\n\t\tthis.renderTargetGrid = new THREE.WebGLRenderTarget(0, 0);\n\t\tthis.renderTargetGrid.depthTexture = new THREE.DepthTexture();\n\n\t\t\n\t\tthis.materialMarchVolume.uniforms.texDepth.value = this.renderTargetGrid.depthTexture;\n\t\tthis.materialCompose.uniforms.texGrid.value = this.renderTargetGrid.texture;\n\t\tthis.materialCompose.uniforms.texVolume.value = this.renderTargetVolume.texture;\n\n\t\tthis.volumeDirty = true;\n\n\t\tthis.controls.addEventListener('change', () => {\n\t\t\tthis.volumeDirty = true;\n\t\t} );\n\t\t\n\t\twindow.addEventListener('resize', () => {\n\t\t\tthis.resizeCallback();\n\t\t});\n\t\tthis.resizeCallback();\n\t};\n\n\t// Renders the volume.\n\trender() {\n\t\tif (!this.volumeTexture) return;\n\t\tif (!this.sdfTextures) return;\n\t\tif (!this.volumeDirty) return;\n\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\tconst left   = rect.left;\n\t\tconst bottom = window.innerHeight - rect.bottom;\n\n\t\tthis.renderer.setViewport(left, bottom, width, height);\n\t\tthis.renderer.setScissor(left, bottom, width, height);\n\t\tthis.renderer.setScissorTest(true);\n\t\t\n\t\tthis.controls.update();\n\n\t\tlet gl = this.renderer.getContext();\n\t\tthis.renderer.setRenderTarget(this.renderTargetGrid);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneGrid, this.camera);\n\n\t\tthis.renderer.setRenderTarget(this.renderTargetVolume);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneVolume, this.camera);\n\n\t\tthis.renderer.setRenderTarget(null);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneCompose, this.cameraCompose);\n\n\t\tthis.volumeDirty = false;\n\t};\n\n\tselectionUpdated() {\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetVolumeSize(width, height, depth) { \n\t\tthis.volumeSize = new THREE.Vector3(width, height, depth);\n\t\tthis.box.geometry = new THREE.BoxGeometry(this.volumeSize.x, this.volumeSize.y, this.volumeSize.z);\n\t\tthis.materialMarchVolume.uniforms.volumeSize.value = this.volumeSize;\n\t\tthis.volumeDirty = true;\n\t };\n\n\t// Set the protein data.\n\tsetProteinData(texture) {\n\t\tthis.volumeTexture = texture;\n\t\t\n\t\tfor (let i = 0; i < 9; ++i) {\n\t\t\tthis.materialMarchVolume.uniforms[\"volume\" + i].value = this.volumeTexture[i];\n\t\t}\n\t\t\n\t\tthis.volumeDirty = true;\n\t};\n\t\n\tsetDistanceData(textures, dims) {\n\t\tthis.sdfTextures = textures;\n\t\tthis.materialMarchVolume.uniforms.sdf.value = this.sdfTextures[0];\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetCurvatureData(texture) {\n\t\tconsole.log(texture);\n\t\tthis.curvatureTexture = texture;\n\t\tthis.materialMarchVolume.uniforms.curvature.value = this.curvatureTexture;\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetIsovalue(value) {\n\t\tthis.materialMarchVolume.uniforms.isovalue.value = value;\n\t\t//this.volumeDirty = true;\n\t}\n\n\tsetCompartmentIndex(value) {\n\t\tthis.materialMarchVolume.uniforms.sdf.value = this.sdfTextures[value];\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDisplayCompartments(value) {\n\t\tthis.materialMarchVolume.uniforms.displayCompartments.value = value;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDisplayProtein(value) {\n\t\tthis.materialMarchVolume.uniforms.displayProtein.value = value;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetSelectionTexture(texture) {\n\t\tthis.materialMarchVolume.uniforms.selection.value = texture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetProjectionTexture(texture) {\n\t\tthis.materialMarchVolume.uniforms.projection.value = texture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tresizeCallback() {\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\t//const left   = rect.left;\n\t\t//const bottom = window.innerHeight - rect.bottom;\n\t\t\n\t\tthis.camera.aspect = width/height;\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderTargetVolume.setSize(width, height);\n\t\tthis.renderTargetGrid.setSize(width, height);\n\t\tthis.materialMarchVolume.uniforms.resolution.value = new THREE.Vector2(width, height);\n\n\t\tthis.renderTargetGrid.depthTexture = new THREE.DepthTexture();\n\t\tthis.materialMarchVolume.uniforms.texDepth.value = this.renderTargetGrid.depthTexture;\n\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetSkeleton(vec) {\n\t\tvar geom = new THREE.BufferGeometry();\n\n\t\tgeom.setAttribute( 'position', new THREE.BufferAttribute( vec, 3 ) );\n\n\t\tvar points = new THREE.Points(geom);\n\n\t\tpoints.position.x = -0.5*this.volumeSize.x;\n\t\tpoints.position.y = -0.5*this.volumeSize.y;\n\t\tpoints.position.z = -0.5*this.volumeSize.z;\n\n\t\tthis.sceneGrid.add(points);\n\t}\n\n\tsetDebugSamples(value) {\n\t\tthis.materialMarchVolume.uniforms.debugSamples.value = value;\n\t}\n\n\tsetUseLod(value) {\n\t\tthis.materialMarchVolume.uniforms.useLod.value = value;\n\t}\n}\n\nexport { VolumeRendererDefault };","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n//import { VolumeRendererReprojected } from './volume/reprojected/volume_renderer_reprojected.js'\nimport { VolumeRendererDefault} from './volume/default/volume_renderer_default.js'\nimport { MapRenderer } from \"./map/map_renderer.js\"\n\nvar stats = new Stats();\nstats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\ndocument.body.appendChild( stats.dom );\n\nvar canvas;\nvar mainView;\nvar mapView;\n\nvar renderer;\n\nvar volumeRenderer = null;\nvar mapRenderer = null;\n// Configure coordinate system to use Z as up.\n\nvar onSelectionUpdated = () => {};\nvar onProjectionUpdated = () => {};\nvar onSelectionDone = () => {};\n\nasync function main(initCanvas, initMainView, initMapView) {\n\tcanvas = initCanvas;\n\tmainView = initMainView;\n\tmapView = initMapView;\n\trenderer = new THREE.WebGLRenderer({canvas: canvas, preserveDrawingBuffer: true});\n\trenderer.autoClearColor = false;\n\tawait init();\n\tanimate();\n}\n\nfunction setOnSelectionUpdated(callback) {\n\tonSelectionUpdated = callback;\n}\n\nfunction setOnProjectionUpdated(callback) {\n\tonProjectionUpdated = callback;\n}\n\nfunction setOnSelectionDone(callback) {\n\tonSelectionDone = callback;\n}\n\nfunction setVolumeSize(size) {\n\tvolumeRenderer.setVolumeSize(size[0], size[1], size[2]);\n}\n\nfunction setProteinData(pyramid, dims) {\n\tlet textures = []\n\tlet w = dims[0];\n\tlet h = dims[1];\n\tlet d = dims[2];\n\tfor (let i = 0; i < pyramid.length; ++i) {\n\t\tconst texture = new THREE.DataTexture3D(pyramid[i], w, h, d);\n\t\ttexture.format = THREE.RGFormat;\n\t\ttexture.type = THREE.UnsignedByteType;\n\t\ttexture.internalFormat = 'RG8';\n\t\ttexture.minFilter = THREE.LinearFilter;\n\t\ttexture.magFilter = THREE.LinearFilter;\n\t\ttexture.generateMipmaps = false;\n\t\ttexture.unpackAlignment = 1;\n\n\t\tw = Math.ceil(w/2.0);\n\t\th = Math.ceil(h/2.0);\n\t\td = Math.ceil(d/2.0);\n\n\t\ttextures.push(texture);\n\t}\n\n\t\n\tvolumeRenderer.setProteinData(textures);\n\tmapRenderer.setProteinData(textures[0]);\n}\n\nfunction setDistanceFieldData(arrays, dims) {\n\tlet textures = [];\n\tfor (var i = 0; i < arrays.length; ++i) {\n\t\tconst tex = new THREE.DataTexture3D(arrays[i], dims[0], dims[1], dims[2]);\n\t\ttex.format = THREE.RedFormat;\n\t\ttex.minFilter = THREE.LinearFilter;\n\t\ttex.magFilter = THREE.LinearFilter;\n\t\ttex.unpackAlignment = 1;\n\n\t\ttextures.push(tex);\n\t}\n\tvolumeRenderer.setDistanceData(textures);\n\tmapRenderer.setDistanceData(textures);\n}\n\nfunction setCurvatureData(buffer, dims) {\n\tconst tex = new THREE.DataTexture3D(buffer, dims[0], dims[1], dims[2]);\n\ttex.format = THREE.RedFormat;\n\ttex.minFilter = THREE.LinearFilter;\n\ttex.magFilter = THREE.LinearFilter;\n\ttex.unpackAlignment = 1;\n\n\tvolumeRenderer.setCurvatureData(tex);\n}\n\nasync function init() {\n\tvolumeRenderer = new VolumeRendererDefault(renderer, mainView);\n\tmapRenderer = new MapRenderer(renderer, mapView, handleSelectionUpdated, handleProjectionUpdated, handleSelectionDone);\n\n\tvolumeRenderer.setSelectionTexture(mapRenderer.getSeletionTexture());\n\tvolumeRenderer.setProjectionTexture(mapRenderer.getProjectionTexture());\n}\n\nfunction animate() {\n\trequestAnimationFrame( animate );\n\t\n\tvolumeRenderer.render();\n\tmapRenderer.render();\n\n\tstats.update();\n}\n\nfunction handleSelectionDone() {\n\tonSelectionDone();\n}\n\nfunction handleSelectionUpdated() {\n\tvolumeRenderer.selectionUpdated();\n\tonSelectionUpdated(mapRenderer.getSelectionPixels());\n}\n\nfunction handleProjectionUpdated() {\n\tonProjectionUpdated(mapRenderer.getProjectionPixels());\n}\n\nfunction setIsovalue(value) {\n\tvolumeRenderer.setIsovalue(value);\n\tmapRenderer.setIsovalue(value);\n}\n\nfunction setDisplayProtein(value) {\n\tvolumeRenderer.setDisplayProtein(value);\n}\n\nfunction setDisplayCompartment(value) {\n\tvolumeRenderer.setDisplayCompartments(value);\n}\n\nfunction setCompartmentIndex(index) {\n\tvolumeRenderer.setCompartmentIndex(index);\n\tmapRenderer.setCompartmentIndex(index);\n}\n\nfunction setSkeleton(vec) {\n\tvolumeRenderer.setSkeleton(vec);\n}\n\nfunction deleteSelection() {\n\tif (mapRenderer) {\n\t\tmapRenderer.deleteSelection();\n\t}\n}\n\nfunction getMapSelectionPixels() {\n\treturn mapRenderer.getSelectionPixels();\n}\n\nfunction getMapProjectionPixels() {\n\treturn mapRenderer.getProjectionPixels();\n}\n\nfunction setMapSelectionPixels(pixels, width, height) {\n\tconst texture = new THREE.DataTexture( pixels, width, height, THREE.RGBAFormat );\n\tmapRenderer.setSelectionFromTexture(texture);\n}\n\nfunction setDebugSamples(value) {\n\tvolumeRenderer.setDebugSamples(value);\n}\n\nfunction setUseLod(value) {\n\tvolumeRenderer.setUseLod(value);\n}\n\nfunction setPenMode(mode) {\n\tif (mapRenderer) {\n\t\tmapRenderer.setPenMode(mode);\n\t}\n}\n\nfunction setPenSize(value) {\n\tif (mapRenderer) {\n\t\tmapRenderer.setPenSize(value);\n\t}\n}\n\nexport { main, setOnSelectionUpdated, setOnProjectionUpdated, setOnSelectionDone, setDistanceFieldData, setProteinData, setCurvatureData, setIsovalue, setDisplayProtein, setDisplayCompartment, setCompartmentIndex, setVolumeSize, deleteSelection, setSkeleton, setMapSelectionPixels, getMapSelectionPixels, getMapProjectionPixels, setDebugSamples, setUseLod, setPenMode, setPenSize};","import * as THREE from 'three';\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nclass MapRenderer {\n    dom;\n    renderer;\n\n    camera;\n\n    sceneSelection;\n    materialSelection;\n\n\tsceneProjection;\n\tmaterialProjection;\n\n\tsceneMap;\n\tmaterialMap;\n\n\tplaneMap;\n\n\tvolumeTexture;\n\tsdfTextures;\n\n\trenderTargetSelection;\n\trenderTargetProjection;\n\n\tprojectionDirty;\n\tselectionDirty;\n\n\tconstructor(renderer, dom, onSelectionUpdated, onProjectionUpdated, onSelectionDone) {\n\t\tthis.dom = dom;\n\t\tthis.renderer = renderer;\n\n\t\tthis.onSelectionUpdated = onSelectionUpdated;\n\t\tthis.onProjectionUpdated = onProjectionUpdated;\n\t\tthis.onSelectionDone = onSelectionDone;\n\n        this.materialProjection = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/mip_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/mip_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tvolume: { value: null },\n\t\t\t\tsdf: { value: null },\n\t\t\t\tisovalue: { value: null }\n\t\t\t},\n\t\t\ttransparent: true,\n\t\t\textensions: {\n\t\t\t\tshaderTextureLOD: true // set to use shader texture LOD\n\t\t\t}\n\t\t});\n\n\t\tthis.materialSelection = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/selection_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/selection_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tclear: { value: true },\n\t\t\t\tlastPosition: { value: new THREE.Vector2(0.0, 0.0) },\n\t\t\t\tposition: { value: new THREE.Vector2(0.0, 0.0) },\n\t\t\t\tdepressed: { value: false },\n\t\t\t\tpenMode: {value: 0 },\n\t\t\t\tpenSize: {value: 8.0 },\n\t\t\t\tresolution: {value: 1024},\n\t\t\t\trestore: {value: null },\n\t\t\t\tdoRestore: { value: false }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialMap = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/map_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/map_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tselection: { value: null },\n\t\t\t\tprojection: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.renderTargetSelection = new THREE.WebGLRenderTarget(1024, 1024);\n\t\tthis.renderTargetProjection = new THREE.WebGLRenderTarget(1024, 1024, {\n\t\t\tmagFilter:THREE.NearestFilter,\n            minFilter:THREE.LinearMipMapLinearFilter,\n            generateMipmaps:true\n\t\t});\n\n\t\tconst aspect = dom.clientWidth/dom.clientHeight\n\n\t\tthis.camera = new THREE.OrthographicCamera( -aspect, aspect, 1, - 1, 0, 2 );\n\t\tthis.controls = new OrbitControls(this.camera, dom);\n\t\tthis.camera.position.z = 1.0;\n\t\tthis.controls.enableRotate = false;\n\t\tthis.controls.update();\n\n\t\t{\n\t\tthis.cameraProjection = new THREE.OrthographicCamera(-1, 1, 1, - 1, 0, 2 );\n\t\tthis.sceneProjection = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialProjection);\n\t\tthis.planeMap = quad;\n\t\tthis.sceneProjection.add(quad);\n\t\t}\n\n\t\t{\n\t\tthis.cameraSelection = new THREE.OrthographicCamera(-1, 1, 1, - 1, 0, 2 );\n\t\tthis.sceneSelection = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialSelection);\n\t\tthis.sceneSelection.add(quad);\n\t\t}\n\n\t\t{\n\t\tthis.sceneMap = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialMap);\n\t\tthis.sceneMap.add(quad);\n\t\tthis.sceneMap.add(this.camera);\n\t\t}\n\n\t\tthis.materialMap.uniforms.projection.value = this.renderTargetProjection.texture;\n\t\tthis.materialMap.uniforms.selection.value = this.renderTargetSelection.texture;\n\n\t\tthis.projectionDirty = false;\n\t\tthis.selectionDirty = false;\n\n\t\tthis.dom.addEventListener('mousemove', e => { this.mouseMove(e); });\n\t\tthis.dom.addEventListener('mousedown', e => { this.mouseDown(e);});\n\t\tthis.dom.addEventListener('mouseup', e => { this.mouseUp(e);});\n\t\tthis.dom.addEventListener('mouseout', e => { this.mouseOut(e);});\n\t\t\t\n\t\twindow.addEventListener('resize', () => {\n\t\t\tthis.resizeCallback();\n\t\t});\n\t\tthis.resizeCallback();\n    };\n\n\tgetMousePosition(e) {\n\t\tconst raycaster = new THREE.Raycaster();\n\t\tconst mouse = new THREE.Vector2();\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\tmouse.x = (e.clientX - rect.left) / (rect.right - rect.left) * 2.0 - 1.0; //x position within the element.\n\t\tmouse.y = 1.0 - (e.clientY - rect.top) / (rect.bottom - rect.top) * 2.0; //y position within the element.\n\t\traycaster.setFromCamera( mouse.clone(), this.camera );\n\t\tconst intersects = raycaster.intersectObject(this.planeMap);\n\n\t\tif (intersects.length > 0) {\n\t\t\treturn intersects[0].uv;\n\t\t}\n\t\treturn null;\n\t}\n\n\tmouseDown(e) {\n\t\tif (e.button === 0) {\n\t\t\tconst mouse = this.getMousePosition(e);\n\t\t\tif (mouse) {\n\t\t\t\tthis.materialSelection.uniforms.position.value = mouse;\n\t\t\t\tthis.materialSelection.uniforms.lastPosition.value = this.materialSelection.uniforms.position.value;\n\t\t\t\tthis.selectionDirty = true;\n\t\t\t\tthis.materialSelection.uniforms.depressed.value = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tmouseMove(e) {\n\t\tif (e.button === 0) {\n\t\t\tif (this.materialSelection.uniforms.depressed.value) {\n\t\t\t\tconst mouse = this.getMousePosition(e);\n\t\t\t\tif (mouse) {\n\t\t\t\t\tthis.materialSelection.uniforms.lastPosition.value = this.materialSelection.uniforms.position.value;\n\t\t\t\t\tthis.materialSelection.uniforms.position.value = mouse;\n\t\t\t\t\tthis.selectionDirty = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tmouseOut(e) {\n\t\tif (e.button === 0) {\n\t\t\tthis.materialSelection.uniforms.depressed.value = false;\n\t\t}\n\t}\n\n\tmouseUp(e) {\n\t\tif (e.button === 0) {\n\t\t\tthis.materialSelection.uniforms.depressed.value = false;\n\t\t\tthis.onSelectionDone();\n\t\t}\n\t}\n\n\trenderProjection() {\n\t\tthis.renderer.setViewport(0, 0, 1024, 1024);\n\t\tthis.renderer.setScissorTest(false);\n\t\tthis.renderer.setRenderTarget(this.renderTargetProjection);\n\t\tthis.renderer.render(this.sceneProjection, this.cameraProjection);\n\t\tthis.onProjectionUpdated();\n\t\tthis.projectionDirty = false;\n\t\tconsole.log(this.renderTargetProjection.texture.mipmaps)\n\t}\n\n\trenderSelection() {\n\t\tthis.renderer.setViewport(0, 0, 1024, 1024);\n\t\tthis.renderer.setScissorTest(false);\n\t\tthis.renderer.setRenderTarget(this.renderTargetSelection);\n\t\tthis.renderer.render(this.sceneSelection, this.cameraSelection);\n\t\tthis.onSelectionUpdated();\n\t\tif (this.materialSelection.uniforms.clear.value) {\n\t\t\tthis.materialSelection.uniforms.clear.value = false;\n\t\t\tthis.onSelectionDone();\n\t\t}\n\n\t\tif (this.materialSelection.uniforms.doRestore.value) {\n\t\t\tthis.materialSelection.uniforms.doRestore.value = false;\n\t\t\tthis.onSelectionDone();\n\t\t}\n\t\tthis.selectionDirty = false;\n\t}\n\n\trenderMap() {\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\tconst left   = rect.left;\n\t\tconst bottom = window.innerHeight - rect.bottom;\n\t\t\n\t\tthis.renderer.setViewport(left, bottom, width, height);\n\t\tthis.renderer.setScissor(left, bottom, width, height);\n\t\tthis.renderer.setScissorTest(true);\n\n\t\tthis.renderer.setRenderTarget(null);\n\t\tlet gl = this.renderer.getContext();\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneMap, this.camera);\n\t}\n\n\t// Renders the volume.\n\trender() {\n\t\tif (this.selectionDirty) this.renderSelection();\n\t\tif (this.projectionDirty) this.renderProjection();\n\n\t\tthis.renderMap();\n\t};\n\n\tsetVolumeSize(width, height, depth) { };\n\n\t// Set the protein data.\n\tsetProteinData(texture) {\n\t\tthis.volumeTexture = texture;\n\t\tthis.materialProjection.uniforms.volume.value = this.volumeTexture;\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetDistanceData(textures) {\n\t\tthis.sdfTextures = textures;\n\t\tthis.materialProjection.uniforms.sdf.value = this.sdfTextures[0];\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetIsovalue(value) {\n\t\tthis.materialProjection.uniforms.isovalue.value = value;\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetCompartmentIndex(value) {\n\t\tthis.materialProjection.uniforms.sdf.value = this.sdfTextures[value];\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetPenSize(value) {\n\t\tthis.materialSelection.uniforms.penSize.value = value;\n\t};\n\n\tsetPenMode(mode) {\n\t\tif (mode === \"draw\") {\n\t\t\tthis.materialSelection.uniforms.penMode.value = 0;\n\t\t} else {\n\t\t\tthis.materialSelection.uniforms.penMode.value = 1;\n\t\t}\n\t}\n\n\tgetSeletionTexture() {\n\t\treturn this.renderTargetSelection.texture;\n\t};\n\n\tgetSelectionPixels() {\n\t\tvar pixels = {\n\t\t\twidth: this.renderTargetSelection.width,\n\t\t\theight: this.renderTargetSelection.height,\n\t\t\tbuffer: new Uint8Array(this.renderTargetSelection.width*this.renderTargetSelection.width*4)\n\t\t}\n\t\tthis.renderer.readRenderTargetPixels(this.renderTargetSelection, 0, 0, pixels.width, pixels.height, pixels.buffer);\n\t\treturn pixels;\n\t};\n\n\tsetSelectionFromTexture(texture) {\n\t\tthis.materialSelection.uniforms.doRestore.value = true;\n\t\tthis.materialSelection.uniforms.restore.value = texture;\n\t\tthis.selectionDirty = true;\n\t}\n\n\tgetProjectionPixels() {\n\t\tvar pixels = {\n\t\t\twidth: this.renderTargetProjection.width,\n\t\t\theight: this.renderTargetProjection.height,\n\t\t\tbuffer: new Uint8Array(this.renderTargetProjection.width*this.renderTargetProjection.width*4)\n\t\t}\n\t\tthis.renderer.readRenderTargetPixels(this.renderTargetProjection, 0, 0, pixels.width, pixels.height, pixels.buffer);\n\t\treturn pixels;\n\t}\n\n\tgetProjectionTexture() {\n\t\treturn this.renderTargetProjection.texture;\n\t}\n\n\tdeleteSelection() {\n\t\tthis.materialSelection.uniforms.clear.value = true;\n\t\tthis.selectionDirty = true;\n\t}\n\n\tresizeCallback() {\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\n\t\tconst aspect = this.dom.clientWidth/this.dom.clientHeight\n\t\t\n\t\tthis.camera.left = -aspect;\n\t\tthis.camera.right = aspect;\n\t\tthis.camera.updateProjectionMatrix();\n\t};\n}\n\nexport { MapRenderer };","module.exports = \"in vec4 position;\\nuniform mat4 modelview;\\nuniform mat4 proj;\\nuniform vec3 cameraPos;\\nout vec3 vOrigin;\\nout vec3 vDirection;\\n\\nvoid main() {\\n    vOrigin = vec3( inverse( modelview ) * vec4( 0.0, 0.0, 0.0, 1.0 ) ).xyz;\\n    vDirection = position.xyz - vOrigin;\\n    gl_Position = proj * modelview * position;\\n}\"","module.exports = \"precision highp float;\\nprecision highp sampler3D;\\n\\nout vec4 FragColor;\\n\\nuniform sampler3D volume0;\\nuniform sampler3D volume1;\\nuniform sampler3D volume2;\\nuniform sampler3D volume3;\\nuniform sampler3D volume4;\\nuniform sampler3D volume5;\\nuniform sampler3D volume6;\\nuniform sampler3D volume7;\\nuniform sampler3D volume8;\\nuniform sampler3D volume9;\\n\\nuniform sampler3D sdf;\\n\\nuniform sampler3D curvature;\\n\\nuniform sampler2D texDepth;\\n\\nuniform sampler2D selection;\\nuniform sampler2D projection;\\n\\nuniform mat4 modelview;\\nuniform mat4 proj;\\n\\nuniform vec3 volumeSize;\\nuniform vec2 resolution;\\n\\nuniform float isovalue;\\n\\nuniform bool displayProtein;\\nuniform bool displayCompartments;\\nuniform bool useLod;\\n\\nuniform bool debugSamples;\\n\\nin vec3 vOrigin;\\nin vec3 vDirection;\\n\\nvec2 rayBoxDst(vec3 bmin, vec3 bmax, vec3 p, vec3 d) {\\n    vec3 t0 = (bmin - p) / d;\\n    vec3 t1 = (bmax - p) / d;\\n    vec3 tmin = min(t0, t1);\\n    vec3 tmax = max(t0, t1);\\n\\n    float dstA = max(max(tmin.x, tmin.y), tmin.z);\\n    float dstB = min(tmax.x, min(tmax.y, tmax.z));\\n\\n    float dstToBox = max(0.0, dstA);\\n    float dstInsideBox = max(0.0, dstB - dstToBox);\\n    return vec2(dstToBox, dstInsideBox);\\n}\\n\\n// https://github.com/kbinani/colormap-shaders/blob/master/shaders/glsl/MATLAB_summer.frag\\nvec3 colormap(float x) {\\n    return vec3(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4);\\n}\\n\\nvec3 matlab_spring(float x) {\\n    return vec3(1.0, clamp(x, 0.0, 1.0), clamp(1.0 - x, 0.0, 1.0));\\n}\\n\\n// Sample the protein channel, local coordinates.\\nvec2 sampleProtein(vec3 p, int lod) {\\n    if (lod == 0) {\\n        return texture(volume0, p/volumeSize + 0.5).rg;\\n    } else if (lod == 1) {\\n        return texture(volume1, p/volumeSize + 0.5).rg;\\n    } else if (lod == 2) {\\n        return texture(volume2, p/volumeSize + 0.5).rg;\\n    } else if (lod == 3) {\\n        return texture(volume3, p/volumeSize + 0.5).rg;\\n    } else if (lod == 4) {\\n        return texture(volume4, p/volumeSize + 0.5).rg;\\n    } else if (lod == 5) {\\n        return texture(volume5, p/volumeSize + 0.5).rg;\\n    } else if (lod == 6) {\\n        return texture(volume6, p/volumeSize + 0.5).rg;\\n    } else if (lod == 7) {\\n        return texture(volume7, p/volumeSize + 0.5).rg;\\n    } else if (lod == 8) {\\n        return texture(volume8, p/volumeSize + 0.5).rg;\\n    } else {\\n        return texture(volume9, p/volumeSize + 0.5).rg;\\n    }\\n}\\n\\nfloat sampleSdf(vec3 p) {\\n    return texture(sdf, p/volumeSize + 0.5).r * 255.0 / 10.0 - 5.0;;\\n}\\n\\nfloat sampleCurvature(vec3 p) {\\n    return 0.010*texture(curvature, p/volumeSize + 0.5).r;\\n}\\n\\nfloat sampleProjection(vec3 p) {\\n    vec2 uv = (p/volumeSize + 0.5).xy;\\n    float r = texture(projection, uv, 2.0).g;\\n    return r;\\n}\\n\\nvoid calcNormalAndCurv(vec3 p, out vec3 normal, out float curv) {\\n    // Calculates the normal as well as the *mean* curvature at point p.\\n    float h = 0.01; \\n    vec2 k = h * vec2(1., 0.);\\n\\n    float t1 = sampleSdf(p + volumeSize*k.xyy); float t2 = sampleSdf(p - volumeSize*k.xyy);\\n    float t3 = sampleSdf(p + volumeSize*k.yxy); float t4 = sampleSdf(p - volumeSize*k.yxy);\\n    float t5 = sampleSdf(p + volumeSize*k.yxx); float t6 = sampleSdf(p - volumeSize*k.yxx);\\n    float t = sampleSdf(p);\\n\\n    curv = (t1+t2+t3+t4+t5+t6-6.0*t)/(h*h); // mean curvature is just the Jacobian of the SDF\\n    //curv = (abs(t1+t2-t)+abs(t3+t4-t)+abs(t5+t6-t))/(h*h);\\n    normal = normalize(k.xyy * (t1-t2) + k.yxy * (t3-t4) + k.yyx * (t5-t6));\\n}\\n\\nvoid main()\\n{\\n    float normalizedDepth = texture(texDepth, gl_FragCoord.xy / resolution).r;\\n    vec4 ndc = vec4(gl_FragCoord.xy / resolution * 2.0 - 1.0,\\n                    normalizedDepth * 2.0 - 1.0, 1.0f);\\n\\n    vec4 vcoords = inverse(proj) * ndc;\\n    vcoords /= vcoords.w;\\n    float depth = -vcoords.z;\\n\\n    vec3 rayDir = normalize( vDirection );\\n    vec2 boxDst = rayBoxDst(-0.5 * volumeSize, 0.5 * volumeSize, vOrigin, rayDir);\\n\\n    // Render render isosurface\\n    vec4 surfaceColor = vec4(0.0f);\\n    vec4 proteinColor = vec4(0.0f);\\n    vec4 selectionColor = vec4(0.0f);\\n    \\n    if (displayCompartments) {\\n        vec3 rayPos = vOrigin + boxDst.x * rayDir;\\n        float dist = 0.0;\\n        while (dist < boxDst.y) {\\n            if (dist + boxDst.x > depth) break;\\n            // Simple sphere tracer.            \\n            float sdfVal = sampleSdf(rayPos);\\n            \\n            if (sdfVal < 0.01) {\\n                float curv;\\n                vec3 normal;\\n                calcNormalAndCurv(rayPos, normal, curv);\\n                curv = sampleCurvature(rayPos) * 100.0;\\n                float ldn = dot(normal, vec3(1.0, 0.0, 0.0));\\n                surfaceColor = mix(vec4(0.5*colormap(abs(curv)), 1.0), vec4(colormap(abs(curv)), 1.0), 0.5 + 0.5 * ldn);\\n                break;\\n            }\\n\\n            dist += sdfVal;\\n            rayPos += sdfVal * rayDir;\\n        }\\n        depth = min(depth, boxDst.x + dist);\\n    }\\n\\n    // Render volume.\\n    float steps = 0.0;\\n    vec3 rayPos = vOrigin + boxDst.x * rayDir;\\n\\n    float baseStepSize = 0.25;\\n    float dist = 0.0;\\n\\n    // This works better than an if statement for some reason (at least on Intel GPUs)\\n    float dstToMarch = float(displayProtein)*boxDst.y;\\n\\n    while (dist < dstToMarch) {\\n        float sdfVal = sampleSdf(rayPos);\\n\\n        float stepSize = baseStepSize;\\n        if (sdfVal < isovalue) {\\n            int lod = 0;\\n            \\n            if (useLod) {\\n                if (dist + boxDst.x < 40.0) {\\n                    lod = 0;\\n                    stepSize = baseStepSize;\\n                } else if (dist + boxDst.x < 80.0) {\\n                    lod = 1;\\n                    stepSize = baseStepSize * 2.0;\\n                } else if (dist + boxDst.x < 160.0) {\\n                    lod = 2;\\n                    stepSize = baseStepSize * 4.0;\\n                } else {\\n                    lod = 3;\\n                    stepSize = baseStepSize * 8.0;\\n                }\\n            }\\n\\n            float density = 0.75 * sampleProtein(rayPos, lod).r;\\n            vec3 color = colormap(density);\\n\\n            vec3 uvw = rayPos / volumeSize + 0.5;\\n            float distanceToMaximum = clamp(1.0 - abs(uvw.z - sampleProjection(rayPos)) / 0.025, 0.0, 1.0);\\n            float selectionMask = texture(selection, uvw.xy).r;\\n\\n            float highlight = distanceToMaximum * selectionMask;\\n\\n            if (highlight > 0.5) {\\n                vec3 normal;\\n                float curv;\\n                calcNormalAndCurv(rayPos, normal, curv);\\n                float ldn = dot(normal, vec3(1.0, 0.0, 0.0));\\n                selectionColor = mix(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0), 0.5 + 0.5 * ldn);\\n                break;\\n            }\\n            color = mix(color, 3.0 * matlab_spring(density), highlight);\\n\\n            proteinColor.rgb += density * (1.0 - proteinColor.a) * color;\\n            proteinColor.a += density * (1.0 - proteinColor.a);\\n        }\\n\\n        dist += stepSize;\\n        rayPos += stepSize * rayDir;\\n\\n        steps += 1.0;\\n\\n        //if (proteinColor.a > 0.99f) break;\\n        if (dist + boxDst.x > depth) break;\\n    }\\n\\n    if (debugSamples) {\\n        FragColor.rgb = matlab_spring(steps / 500.0);\\n        FragColor.a = 1.0;\\n    } else {\\n        FragColor.rgb = mix(surfaceColor.rgb, proteinColor.rgb, proteinColor.a);\\n        FragColor.a = max(surfaceColor.a, proteinColor.a);\\n\\n        FragColor.rgb = mix(FragColor.rgb, selectionColor.rgb, selectionColor.a);\\n        FragColor.a = max(FragColor.a, selectionColor.a);\\n    }\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"\\nvarying vec2 vUv;\\n\\nuniform sampler2D texGrid;\\nuniform sampler2D texVolume;\\n\\nvoid main() {\\n    gl_FragColor = vec4(mix(texture(texGrid, vUv).rgb, texture(texVolume, vUv).rgb, texture(texVolume, vUv).a), 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform highp sampler3D volume;\\nuniform highp sampler3D sdf;\\nuniform float isovalue;\\n\\nvoid main() {\\n    vec3 uv = vec3(vUv, 0.0);\\n    int col = textureSize(volume, 0).z;\\n\\n    // Maximum projection.\\n    float maxDensity = 0.0;\\n    float maxPos = 0.0;\\n    for (float i = 0.0; i < float(col); i += 1.0) {\\n        uv.z = i / float(col);\\n        float sdfVal = texture(sdf, uv).r * 255.0 / 10.0 - 5.0 - isovalue;\\n        if (sdfVal <= 0.01) {\\n            float density = texture(volume, uv).r;\\n            if (density > maxDensity) {\\n                maxDensity = density;\\n                maxPos = uv.z;\\n            }\\n        }\\n    }\\n\\n    gl_FragColor = vec4(maxDensity, maxPos, 0.0, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform bool clear;\\nuniform vec2 lastPosition;\\nuniform vec2 position;\\nuniform bool depressed;\\nuniform float resolution;\\nuniform int penMode;\\nuniform float penSize;\\nuniform sampler2D restore;\\nuniform bool doRestore;\\n\\n// https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\\n{\\n    vec2 pa = p-a, ba = b-a;\\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\\n    return length( pa - ba*h );\\n}\\n\\nvoid drawPixel() {\\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\n}\\n\\nvoid erasePixel() {\\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n\\nvoid main()\\n{\\n    if (clear) {\\n        erasePixel();\\n        return;\\n    }\\n\\n    if (doRestore) {\\n        gl_FragColor = texture(restore, vUv);\\n        return;\\n    }\\n\\n    if (sdSegment(vUv, position, lastPosition) < penSize/resolution && depressed) {\\n        if (penMode == 0) {\\n            drawPixel();\\n        } else {\\n            erasePixel();\\n        }\\n    } else {\\n        discard;\\n    }\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform highp sampler2D projection;\\nuniform highp sampler2D selection;\\n\\n// https://github.com/kbinani/colormap-shaders/blob/master/shaders/glsl/MATLAB_summer.frag\\nvec4 colormap(float x) {\\n    return vec4(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4, 1.0);\\n}\\n\\nvoid main() {\\n    vec4 c1 = colormap(texture(projection, vUv).r);\\n    vec4 c2 = texture(selection, vUv);\\n\\n    gl_FragColor = mix(0.5*c1, c1, c2.r);\\n    //gl_FragColor = vec4(vUv.x, vUv.y, 0.0, 1.0);\\n}\"","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nimport Main from './components/Main';\n\nfunction App() {\n  return(\n      <div className=\"App\">\n        <Main />\n     </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}