{"version":3,"sources":["components/Overlay.js","components/Canvas.js","components/Plots.js","components/StoreItem.js","components/MapTools.js","components/Views.js","components/InputVector.js","components/ImportDialog.js","components/LabeledProgressBar.js","components/ImportProgress.js","workers/local-heatmap-worker.js","workers/sdf-worker.js","workers/curv-worker.js","workers/tiff-worker.js","renderers/volume/default/shaders/volume_renderer_vert.glsl","renderers/volume/default/shaders/volume_renderer_frag.glsl","renderers/volume/default/shaders/post_vert.glsl","renderers/volume/default/shaders/post_frag.glsl","renderers/map/shaders/mip_vert.glsl","renderers/map/shaders/mip_frag.glsl","renderers/map/shaders/selection_vert.glsl","renderers/map/shaders/selection_frag.glsl","renderers/map/shaders/map_vert.glsl","renderers/map/shaders/map_frag.glsl","App.js","reportWebVitals.js","index.js","renderers/volume/volume_renderer.js","renderers/volume/default/volume_renderer_default.js","renderers/renderer.js","renderers/map/map_renderer.js","tiff.js","components/Main.js","components/Import.js","components/Toolbar.js","components/Sidebar.js"],"names":["Overlay","props","className","children","Canvas","canvasRef","useRef","useEffect","Renderer","onProjectionUpdated","onSelectionDone","ready","mainView","mapView","current","sdf","volumeDims","protein","curvature","volumeSize","displayProtein","displaySegmentation","compartmentIndex","debugSamples","useLod","isovalue","ref","Plots","useState","page","setPage","data","layout","dropdownToggleString","heat","Array","from","heatmap","length","fill","x","y","i","heataxes","j","heatarea","localHeat","localHeatmap","totalArea","localHeatarea","z","type","colorscale","colorbar","title","titleside","xaxis","text","yaxis","global","area","count","local","name","compartmentHistogram","config","responsive","Dropdown","Toggle","Menu","Item","onClick","MapTools","labelRef","edit","setEdit","editText","setEditText","blockBlur","setBlockBlur","focus","value","buttonOrForm","handleEdit","doEdit","label","FormControl","style","marginLeft","onKeyPress","e","key","onChange","onLabel","target","onBlur","Button","InputGroup","onMouseEnter","onMouseLeave","onExport","onDelete","storeData","localforage","createInstance","storeName","description","penSize","setPenSize","penMode","setPenMode","uuids","setUuids","reloadStore","handlePenMode","mode","handlePenSize","pt","list","iterate","iterationNumber","then","storeList","push","StoreItem","uuid","getItem","width","height","removeItem","item","setItem","handleLabelStore","png","UPNG","buffer","blob","Blob","url","URL","createObjectURL","fileLink","document","createElement","href","download","click","Object","entries","position","overflowY","right","bottom","ButtonToolbar","flexDirection","ButtonGroup","vertical","disabled","selectionPixels","input","onchange","file","files","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onload","readerEvent","result","replace","onerror","_readerEvent","error","onabort","filename","img","pixels","Uint8Array","Views","mainRef","mapRef","onMainView","onMapView","InputVector","handleChangeX","bind","handleChangeY","handleChangeZ","this","Text","Form","Control","placeholder","Component","ImportDialog","state","fileProtein","fileSegmentation","voxelSize","working","handleClickImport","handleChangeFileProtein","handleChangeFileSegmentation","handleChangeVoxelSize","handleClose","setState","a","onImport","onClose","formValid","alert","Alert","variant","Modal","show","onHide","Header","closeButton","Title","Body","Group","Label","Footer","LabeledProgressBar","progress","animated","ProgressBar","clipPath","striped","now","ImportProgress","backdrop","proteinProgress","proteinError","segmentationProgress","segmentationError","sdfProgress","sdfError","curvProgress","curvError","module","exports","App","Main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","navigator","window","addEventListener","serviceWorker","register","registration","console","log","catch","registrationError","ReactDOM","render","StrictMode","getElementById","VolumeRenderer","depth","texture","textures","ranges","vec","THREE","DefaultUp","canvas","renderer","VolumeRendererDefault","dom","camera","clientWidth","clientHeight","controls","OrbitControls","update","materialMarchVolume","glslVersion","uniforms","modelview","matrixWorldInverse","proj","projectionMatrix","resolution","volume0","volume1","volume2","volume3","volume4","volume5","volume6","volume7","volume8","volume9","texDepth","sdfRange","curvatureRange","displayCompartments","selection","projection","vertexShader","require","fragmentShader","side","transparent","materialCompose","texGrid","texVolume","sceneGrid","grid","rotateX","Math","PI","add","onBeforeRender","scene","geometry","material","group","pos","updateMatrixWorld","sceneVolume","box","sceneCompose","cameraCompose","plane","quad","renderTargetVolume","renderTargetGrid","depthTexture","volumeDirty","resizeCallback","volumeTexture","sdfTextures","rect","getBoundingClientRect","left","top","innerHeight","setViewport","setScissor","setScissorTest","gl","getContext","setRenderTarget","clear","COLOR_BUFFER_BIT","dims","sdfRanges","range","curvatureTexture","setSize","innerWidth","aspect","updateProjectionMatrix","geom","setAttribute","points","MapRenderer","onSelectionUpdated","materialProjection","volume","extensions","shaderTextureLOD","materialSelection","lastPosition","depressed","restore","doRestore","materialMap","renderTargetSelection","renderTargetProjection","magFilter","minFilter","generateMipmaps","enableRotate","cameraProjection","sceneProjection","planeMap","cameraSelection","sceneSelection","sceneMap","projectionDirty","selectionDirty","mouseMove","mouseDown","mouseUp","mouseOut","raycaster","mouse","clientX","clientY","setFromCamera","clone","intersects","intersectObject","uv","button","getMousePosition","renderSelection","renderProjection","renderMap","readRenderTargetPixels","stats","Stats","showPanel","body","appendChild","volumeRenderer","mapRenderer","main","initCanvas","initMainView","initMapView","preserveDrawingBuffer","autoClearColor","init","animate","setOnProjectionUpdated","callback","setOnSelectionDone","setVolumeSize","size","setProteinData","pyramid","w","h","d","format","internalFormat","unpackAlignment","ceil","setDistanceFieldData","arrays","tex","min","max","setDistanceData","setCurvatureData","handleSelectionUpdated","handleProjectionUpdated","handleSelectionDone","setSelectionTexture","getSeletionTexture","setProjectionTexture","getProjectionTexture","requestAnimationFrame","getSelectionPixels","selectionUpdated","getProjectionPixels","setIsovalue","setDisplayProtein","setDisplayCompartment","setDisplayCompartments","setCompartmentIndex","index","deleteSelection","getMapSelectionPixels","setMapSelectionPixels","setSelectionFromTexture","setDebugSamples","setUseLod","Tiff","bits","ifd","UTIF","keys","Error","properties","t256","t257","t258","t277","sliceProperties","JSON","stringify","onError","onProgress","worker","Worker","decodeTiffBuffer","Comlink","terminate","fullscreen","showSidebar","showImport","projectionPixels","handleShowImport","handleToggleFullscreen","handleToggleSidebar","handleAbortImport","handleCompleteImport","handleCompartmentSelection","handleDisplaySegmentation","handleDisplayProtein","handleDebugSamples","handleUseLod","handleIsovalue","handleMainView","handleMapView","computeLocalHistogram","proteinBuffers","curv","bufferDims","compartmentHist","exitFullscreen","webkitExitFullscreen","msExitFullscreen","elem","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","compute","res","countFlat","slice","splice","areaFlat","onAbort","onComplete","onImportData","onToggleFullscreen","onToggleSidebar","open","numCompartments","onCompartmentSelection","onDisplaySegmentation","onDisplayProtein","onDebugSamples","onUseLod","onIsovalue","Import","tiffProtein","tiffSegmentation","step","preImportError","handleImport","onProteinProgress","onSegmentationProgress","onProteinError","onSegmentationError","onSdfProgress","onSdfError","message","decode","reducer","accumulator","currentValue","reduce","promises","workers","p","b","onCurvProgress","level0","k","pw","ph","pd","plevel","level","pi","pj","pk","floor","counts","compartmentArea","parseFloat","Toolbar","fullscreenIcon","Sidebar","handleSelectCompartmet","dropdownItems","dropdownText","md","in","Check","Input","checked","Range"],"mappings":"yIAMeA,IANC,SAACC,GACb,OAAO,qBAAKC,UAAU,mCAAf,SACFD,EAAME,a,iCCFf,0BAyFeC,IArFA,SAAAH,GACd,IAAMI,EAAYC,iBAAO,MA+EzB,OA7EAC,qBAAU,WACTC,IAAgCP,EAAMQ,uBACpC,CAACR,EAAMQ,sBAEVF,qBAAU,WACTC,IAA4BP,EAAMS,mBAChC,CAACT,EAAMS,kBAEVH,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAAcH,EAAUS,QAASb,EAAMW,SAAUX,EAAMY,WAEtD,CAACZ,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,QAGzCJ,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAA8BP,EAAMc,IAAKd,EAAMe,cAE9C,CAACf,EAAMc,IAAKd,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,MAAOV,EAAMe,aAGjET,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAAwBP,EAAMgB,QAAShB,EAAMe,cAE5C,CAACf,EAAMgB,QAAShB,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,MAAOV,EAAMe,aAErET,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAA0BP,EAAMiB,UAAWjB,EAAMe,cAEhD,CAACf,EAAMiB,UAAWjB,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,MAAOV,EAAMe,aAGvET,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAAuBP,EAAMkB,cAE5B,CAAClB,EAAMkB,WAAYlB,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,QAE3DJ,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAA2BP,EAAMmB,kBAEhC,CAACnB,EAAMmB,eAAgBnB,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,QAE/DJ,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAA+BP,EAAMoB,uBAEpC,CAACpB,EAAMoB,oBAAqBpB,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,QAEpEJ,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAA6BP,EAAMqB,oBAElC,CAACrB,EAAMqB,iBAAkBrB,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,QAEjEJ,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAAyBP,EAAMsB,gBAE9B,CAACtB,EAAMsB,aAActB,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,QAE7DJ,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAAmBP,EAAMuB,UAExB,CAACvB,EAAMuB,OAAQvB,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,QAEvDJ,qBAAU,WACLN,EAAMU,OAASV,EAAMW,UAAYX,EAAMY,SAC1CL,IAAqBP,EAAMwB,YAE1B,CAACxB,EAAMwB,SAAUxB,EAAMW,SAAUX,EAAMY,QAASZ,EAAMU,QAGxD,wBAAQT,UAAU,WAAWwB,IAAKrB,M,qFC6MrBsB,EA7RD,SAAA1B,GACV,MAAwB2B,mBAAS,WAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEIC,EAAO,GACPC,EAAS,GAETC,EAAuB,GAC3B,GAAa,YAATJ,EAAoB,CACpBI,EAAuB,UAKvB,IAHA,IAAMC,EAAOC,MAAMC,KAAKD,MAAMlC,EAAMoC,QAAQC,QAAQC,KAAK,IAAI,kBAAM,IAAIJ,MAAMlC,EAAMoC,QAAQC,QAAQC,KAAK,MAClGC,EAAI,IAAIL,MAAMlC,EAAMoC,QAAQC,QAC5BG,EAAI,IAAIN,MAAMlC,EAAMoC,QAAQ,GAAGC,QAC5BI,EAAI,EAAGA,EAAIR,EAAKI,SAAUI,EAAG,CAClCF,EAAEE,GAAKA,EAAI,KAASzC,EAAM0C,SAAS,GAAG,GAAK1C,EAAM0C,SAAS,GAAG,IAAM1C,EAAM0C,SAAS,GAAG,GACrFF,EAAEC,GAAKA,EAAI,KAASzC,EAAM0C,SAAS,GAAG,GAAK1C,EAAM0C,SAAS,GAAG,IAAM1C,EAAM0C,SAAS,GAAG,GACrF,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAKI,SAAUM,EACF,IAAzB3C,EAAM4C,SAASH,GAAGE,GAAUV,EAAKQ,GAAGE,GAAK,EACxCV,EAAKQ,GAAGE,GAAK3C,EAAMoC,QAAQK,GAAGE,GAAK3C,EAAM4C,SAASH,GAAGE,GAQlE,IAJA,IAAME,EAAYX,MAAMC,KAAKD,MAAMlC,EAAM8C,aAAaT,QAAQC,KAAK,IAAI,kBAAM,IAAIJ,MAAMlC,EAAM8C,aAAaT,QAAQC,KAAK,MAGnHS,EAAY,EACPN,EAAI,EAAGA,EAAII,EAAUR,SAAUI,EACpC,IAAK,IAAIE,EAAI,EAAGA,EAAIE,EAAUR,SAAUM,EACpCI,GAAa/C,EAAMgD,cAAcP,GAAGE,GACF,IAA9B3C,EAAMgD,cAAcP,GAAGE,GAAUE,EAAUJ,GAAGE,GAAK,EAClDE,EAAUJ,GAAGE,GAAK3C,EAAM8C,aAAaL,GAAGE,GAAK3C,EAAMgD,cAAcP,GAAGE,GA6BjFb,EAAO,CACH,CACIS,EAAGA,EACHC,EAAGA,EACHS,EAAGhB,EACHiB,KAAM,UACNC,WAAY,MACZC,SAAU,CACNC,MAAO,sBACPC,UAAW,UAlCnBP,EAAY,EACA,CACRR,EAAGA,EACHC,EAAGA,EACHS,EAAGJ,EACHK,KAAM,UACNC,WAAY,CACR,CAAC,EAAK,aACN,CAAC,KAAQ,aACT,CAAC,GAAK,aACN,CAAC,GAAK,aACN,CAAC,GAAK,aACN,CAAC,GAAK,aACN,CAAC,EAAK,cAEVC,SAAU,CACNC,MAAO,4BACPC,UAAW,QACXf,EAAG,QAIC,IAkBhBR,EAAS,CACLsB,MAAO,kBACPE,MAAO,CACHF,MAAO,CACHG,KAAM,aAGdC,MAAO,CACHJ,MAAO,CACHG,KAAM,yBAKf,GAAa,aAAT5B,EAAqB,CAC5BI,EAAuB,qBAIvB,IAFA,IAAM0B,EAAS,IAAIxB,MAAM,KAEhBO,EAAI,EAAGA,EAAI,MAAOA,EAAG,CAG1B,IAFA,IAAIkB,EAAO,EACPC,EAAQ,EACHjB,EAAI,EAAGA,EAAI,MAAOA,EACvBiB,GAAS5D,EAAMoC,QAAQO,GAAGF,GAC1BkB,GAAQ3D,EAAM4C,SAASD,GAAGF,GAE9BiB,EAAOjB,GAAKmB,EAAMD,EAGtB,IAAME,EAAQ,IAAI3B,MAAM,KACxB,GAAkC,IAA9BlC,EAAM8C,aAAaT,OACnB,IAAK,IAAII,EAAI,EAAGA,EAAI,MAAOA,EAAG,CAG1B,IAFA,IAAIkB,EAAO,EACPC,EAAQ,EACHjB,EAAI,EAAGA,EAAI,MAAOA,EACvBiB,GAAS5D,EAAM8C,aAAaH,GAAGF,GAC/BkB,GAAQ3D,EAAMgD,cAAcL,GAAGF,GAEnCoB,EAAMpB,GAAKmB,EAAMD,EAKzB,IADA,IAAMpB,EAAI,IAAIL,MAAMlC,EAAMoC,QAAQC,QACzBI,EAAI,EAAGA,EAAIzC,EAAMoC,QAAQC,SAAUI,EACxCF,EAAEE,GAAKA,EAAI,KAASzC,EAAM0C,SAAS,GAAG,GAAK1C,EAAM0C,SAAS,GAAG,IAAM1C,EAAM0C,SAAS,GAAG,GAGzFZ,EAAO,CACH,CACIS,EAAGA,EACHC,EAAGkB,EACHR,KAAM,MACNY,KAAM,UAEV,CACIvB,EAAGA,EACHC,EAAGqB,EACHX,KAAM,MACNY,KAAM,cAId/B,EAAS,CACLsB,MAAO,qBACPE,MAAO,CACHF,MAAO,CACHG,KAAM,aAGdC,MAAO,CACHJ,MAAO,CACHG,KAAM,8BAIf,GAAa,cAAT5B,EAAsB,CAC7BI,EAAuB,sBAIvB,IAFA,IAAM0B,EAAS,IAAIxB,MAAM,KAEhBO,EAAI,EAAGA,EAAI,MAAOA,EAAG,CAG1B,IAFA,IAAIkB,EAAO,EACPC,EAAQ,EACHjB,EAAI,EAAGA,EAAI,MAAOA,EACvBiB,GAAS5D,EAAMoC,QAAQK,GAAGE,GAC1BgB,GAAQ3D,EAAM4C,SAASH,GAAGE,GAE9Be,EAAOjB,GAAKmB,EAAMD,EAGtB,IAAME,EAAQ,IAAI3B,MAAM,KACxB,GAAkC,IAA9BlC,EAAM8C,aAAaT,OACnB,IAAK,IAAII,EAAI,EAAGA,EAAI,MAAOA,EAAG,CAG1B,IAFA,IAAIkB,EAAO,EACPC,EAAQ,EACHjB,EAAI,EAAGA,EAAI,MAAOA,EACvBiB,GAAS5D,EAAM8C,aAAaL,GAAGE,GAC/BgB,GAAQ3D,EAAMgD,cAAcP,GAAGE,GAEnCkB,EAAMpB,GAAKmB,EAAMD,EAKzB,IADA,IAAMpB,EAAI,IAAIL,MAAMlC,EAAMoC,QAAQC,QACzBI,EAAI,EAAGA,EAAIzC,EAAMoC,QAAQC,SAAUI,EACxCF,EAAEE,GAAKA,EAAI,KAASzC,EAAM0C,SAAS,GAAG,GAAK1C,EAAM0C,SAAS,GAAG,IAAM1C,EAAM0C,SAAS,GAAG,GAGzFZ,EAAO,CACH,CACIS,EAAGA,EACHC,EAAGkB,EACHR,KAAM,MACNY,KAAM,UAEV,CACIvB,EAAGA,EACHC,EAAGqB,EACHX,KAAM,MACNY,KAAM,cAId/B,EAAS,CACLsB,MAAO,2BACPE,MAAO,CACHF,MAAO,CACHG,KAAM,mBAGdC,MAAO,CACHJ,MAAO,CACHG,KAAM,8BAIf,GAAa,iBAAT5B,EAAyB,CAChCI,EAAuB,eAGvB,IADA,IAAMO,EAAIL,MAAMlC,EAAM+D,qBAAqB1B,QAClCI,EAAI,EAAGA,EAAIF,EAAEF,SAAUI,EAC5BF,EAAEE,GAAK,gBAAkBA,EAAE,GAG/BX,EAAO,CACH,CACIS,EAAGA,EACHC,EAAGxC,EAAM+D,qBACTb,KAAM,MACNY,KAAM,WAId/B,EAAS,CACLsB,MAAO,kCACPE,MAAO,CACHF,MAAO,CACHG,KAAM,gBAGdC,MAAO,CACHJ,MAAO,CACHG,KAAM,yBAMtB,OACI,qCACI,cAAC,IAAD,CACI1B,KAAMA,EACNC,OAAQA,EACRiC,OAAQ,CAAEC,YAAY,KAE1B,qBAAKhE,UAAU,gBAAf,SACI,eAACiE,EAAA,EAAD,CACIjE,UAAU,iBADd,UAGI,cAACiE,EAAA,EAASC,OAAV,UACKnC,IAGL,eAACkC,EAAA,EAASE,KAAV,WACI,cAACF,EAAA,EAASG,KAAV,CACIC,QAAS,WAAQzC,EAAQ,YAD7B,wCAKA,cAACqC,EAAA,EAASG,KAAV,CACIC,QAAS,WAAQzC,EAAQ,aAD7B,gCAKA,cAACqC,EAAA,EAASG,KAAV,CACIC,QAAS,WAAQzC,EAAQ,cAD7B,iCAKA,cAACqC,EAAA,EAASG,KAAV,CACIC,QAAS,WAAQzC,EAAQ,iBAD7B,sC,wCCrMT0C,EA3EE,SAAAvE,GACb,IAAMwE,EAAWnE,mBAEjB,EAAwBsB,oBAAS,GAAjC,mBAAO8C,EAAP,KAAaC,EAAb,KACA,EAAgC/C,mBAAS,IAAzC,mBAAOgD,EAAP,KAAiBC,EAAjB,KACA,EAAkCjD,oBAAS,GAA3C,mBAAOkD,EAAP,KAAkBC,EAAlB,KAEAxE,qBAAU,WACFkE,EAAS3D,SAAW4D,IACpBD,EAAS3D,QAAQkE,QACjBP,EAAS3D,QAAQmE,MAAQL,KAE9B,CAACF,EAAME,EAAUH,IAEpB,IAyBIS,EAfEC,EAAa,SAACC,GAChBT,EAAQS,GACRP,EAAY5E,EAAMoF,QA6BtB,OAdIH,GADS,IAATR,EACe,cAACY,EAAA,EAAD,CACXC,MAAO,CAACC,WAAY,QACpBC,WAVe,SAACC,GACN,UAAVA,EAAEC,KACFR,GAAW,IASXS,SAfa,SAACF,GAClBzF,EAAM4F,QAAQH,EAAEI,OAAOb,QAenBc,OA/BW,WACVjB,GACDK,GAAW,IA8BXzD,IAAK+C,IAGM,cAACuB,EAAA,EAAD,CACKT,MAAO,CAACC,WAAY,QACpBjB,QAAStE,EAAMsE,QAFpB,SAGGtE,EAAMoF,QAIxB,eAACY,EAAA,EAAD,CACI/F,UAAU,iBADd,UAGCgF,EACD,cAACc,EAAA,EAAD,CACIzB,QAzCgB,WACpBY,GAAYT,IAyCRwB,aAAc,kBAAMnB,GAAa,IACjCoB,aAAc,kBAAMpB,GAAa,IAHrC,SAIC,mBAAG7E,UAAU,kBACd,cAAC8F,EAAA,EAAD,CACIzB,QAAStE,EAAMmG,SADnB,SAEC,mBAAGlG,UAAU,kBACd,cAAC8F,EAAA,EAAD,CACIzB,QAAStE,EAAMoG,SADnB,SAEC,mBAAGnG,UAAU,wB,2CC1DlBoG,EAAYC,IAAYC,eAAe,CACvCzC,KAJW,iBAKX0C,UAAc,YACdC,YAAc,QA6KHlC,EA1KE,SAAAvE,GAEb,MAA8B2B,mBAAS,IAAvC,mBAAO+E,EAAP,KAAgBC,EAAhB,KACA,EAA8BhF,mBAAS,QAAvC,mBAAOiF,EAAP,KAAgBC,EAAhB,KACA,EAA0BlF,mBAAS,IAAnC,mBAAOmF,EAAP,KAAcC,EAAd,KAEAzG,qBAAU,WACN0G,MACD,IA+FH,IA7FA,IAIMC,EAAgB,SAACC,GACnBL,EAAWK,GACX3G,IAAoB2G,IAGlBC,EAAgB,SAACC,GACnBT,EAAWS,GACX7G,IAAoB6G,IAGlBJ,EAAc,WAChB,IAAIK,EAAO,GACXhB,EAAUiB,SAAQ,SAAStC,EAAOU,EAAK6B,GACnCF,EAAK3B,GAAOV,EAAMlB,QACnB0D,MAAK,WAAOT,EAASM,OA0ExBI,EAAY,GAtGM,aAuGjB,0BAAO/B,EAAP,KAAYV,EAAZ,KACDyC,EAAUC,KACN,cAACC,EAAD,CACIvC,MAAOJ,EACPV,QAAS,kBA5EDsD,EA4EkBlC,OA3ElCW,EAAUwB,QAAQD,GAAMJ,MAAK,SAACxC,GAC1BzE,IAA+ByE,EAAMlD,KAAMkD,EAAM8C,MAAO9C,EAAM+C,WAFnD,IAACH,GA6ERxB,SAAU,kBAvEKwB,EAuEkBlC,OAtEzCW,EAAU2B,WAAWJ,GAAMJ,KAAKR,GADV,IAACY,GAwEfhC,QAAS,SAACR,GAAD,OA1BI,SAACwC,EAAMxC,GAC5BiB,EAAUwB,QAAQD,GAAMJ,MAAK,SAACS,GAC1BA,EAAKnE,KAAOsB,EACZiB,EAAU6B,QAAQN,EAAMK,GAAMT,KAAKR,MAuBXmB,CAAiBzC,EAAKN,IAC1Ce,SAAU,kBApBKyB,EAoBmBlC,OAnB1CW,EAAUwB,QAAQD,GAAMJ,MAAK,SAACS,GAC1B,IAAIG,EAAMC,SAAY,CAACJ,EAAKnG,KAAKwG,QAASL,EAAKH,MAAOG,EAAKF,OAAQ,GAC/DQ,EAAO,IAAIC,KAAK,CAACJ,GAAM,CAAClF,KAAM,cAC9BuF,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAWC,SAASC,cAAc,KACtCF,EAASG,KAAON,EAChBG,EAASI,SAAWf,EAAKnE,KACzB8E,EAASK,WARS,IAACrB,OAa3B,MAA2BsB,OAAOC,QAAQrC,GAA1C,eAAmD,IAYnD,OACI,sBAAK7G,UAAU,0BAA0BqF,MAAO,CAAC8D,SAAU,YAA3D,UACI,qBAAKnJ,UAAU,qCAAqCqF,MAAO,CAAC+D,UAAW,UAAWtB,OAAQ,MAAOuB,MAAO,EAAGC,OAAQ,GAAnH,SACI,qBAAKtJ,UAAU,8BAAf,SACCwH,MAGL,qBAAMxH,UAAU,UAAhB,SACA,eAACuJ,EAAA,EAAD,CAAelE,MAAO,CAACmE,cAAe,SAAU3B,MAAO,QAAvD,UACA,cAAC4B,EAAA,EAAD,CAAaC,UAAQ,EAArB,SACI,cAAC5D,EAAA,EAAD,CACIzB,QApHK,WACjB/D,OAkHQ,SAEC,mBAAGN,UAAU,sBAElB,uBACA,eAACyJ,EAAA,EAAD,CAAaC,UAAQ,EAArB,UACI,cAAC5D,EAAA,EAAD,CACI6D,SAAoB,SAAVhD,EACVtC,QAAS,WAAO2C,EAAc,SAFlC,SAGC,mBAAGhH,UAAU,qBACd,cAAC8F,EAAA,EAAD,CACI6D,SAAoB,UAAVhD,EACVtC,QAAS,WAAO2C,EAAc,UAFlC,SAGC,mBAAGhH,UAAU,wBAElB,uBACA,eAACyJ,EAAA,EAAD,CAAaC,UAAQ,EAArB,UACI,cAAC5D,EAAA,EAAD,CACI6D,SAAoB,KAAVlD,EACVpC,QAAS,WAAO6C,EAAc,KAFlC,SAGC,mBAAG7B,MAAO,CAAC,SAAY,OAAQrF,UAAU,qBAC1C,cAAC8F,EAAA,EAAD,CACI6D,SAAoB,KAAVlD,EACVpC,QAAS,WAAO6C,EAAc,KAFlC,SAGC,mBAAG7B,MAAO,CAAC,SAAY,OAAQrF,UAAU,qBAC1C,cAAC8F,EAAA,EAAD,CACI6D,SAAoB,KAAVlD,EACVpC,QAAS,WAAO6C,EAAc,KAFlC,SAGC,mBAAG7B,MAAO,CAAC,SAAY,OAAQrF,UAAU,wBAE9C,uBACA,eAACyJ,EAAA,EAAD,CAAaC,UAAQ,EAArB,UACQ,cAAC5D,EAAA,EAAD,CACIzB,QArHD,WACf,IAAMuF,EAAkBtJ,MACxB8F,EAAU6B,QAAQN,cAAQ,CAAC9D,KAAM,gBACNgE,MAAO+B,EAAgB/B,MACvBC,OAAQ8B,EAAgB9B,OACxBjG,KAAM+H,EAAgBvB,SAASd,KAAKR,IA+GnD,SAEC,mBAAG/G,UAAU,kBACd,cAAC8F,EAAA,EAAD,CACIzB,QAhHC,WACjB,IAAIwF,EAAQjB,SAASC,cAAc,SACnCgB,EAAM5G,KAAO,OAEb4G,EAAMC,SAAW,SAAAtE,GACb,IAAIuE,EAAOvE,EAAEI,OAAOoE,MAAM,GAC1B,IAAIC,SAAQ,SAASC,EAASC,GAC1B,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,kBAAkBP,GAEzBK,EAAOG,OAAS,SAAAC,GACZN,EAAQ,CAACM,EAAY5E,OAAO6E,OAAQV,EAAKlG,KAAK6G,QAAQ,OAAO,OAGjEN,EAAOO,QAAU,SAAAC,GACbT,EAAOC,EAAOS,QAGlBT,EAAOU,QAAU,SAAAF,GACbT,EAAO,+BAEZ5C,MAAK,YAAyB,IAAD,mBAAtBc,EAAsB,KAAd0C,EAAc,KACxBC,EAAM5C,SAAYC,GAClB4C,EAAS,IAAIC,WAAW9C,UAAa4C,GAAK,IAC9C5E,EAAU6B,QAAQN,cAAQ,CAAC9D,KAAMkH,EAC7BlD,MAAOmD,EAAInD,MACXC,OAAQkD,EAAIlD,OACZjG,KAAMoJ,IAAS1D,KAAKR,OAIhC8C,EAAMb,SAgFM,SAEC,mBAAGhJ,UAAU,4BC1InBmL,IA3CD,SAAApL,GACV,IAAMqL,EAAUhL,iBAAO,MACjBiL,EAASjL,iBAAO,MAEhBkL,EAAavL,EAAMuL,WACnBC,EAAYxL,EAAMwL,UAOxB,OALAlL,qBAAU,WACNiL,EAAWF,EAAQxK,SACnB2K,EAAUF,EAAOzK,WAClB,CAAC0K,EAAYC,IAGZ,mCACA,qBAAKvL,UAAU,wBAAf,SACI,sBAAKA,UAAU,4BAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,QAAQwB,IAAK6J,IAC5B,cAAC,EAAD,OAEJ,qBAAKrL,UAAU,cACf,sBAAKA,UAAU,+BAAf,UACI,qBAAKA,UAAU,uBAAf,SACI,qBAAKA,UAAU,QAAOwB,IAAK4J,MAE/B,qBAAKpL,UAAU,cACf,qBAAKA,UAAU,uBAAf,SACI,cAAC,EAAD,CACIyC,SAAU1C,EAAM0C,SAChBN,QAASpC,EAAMoC,QACfQ,SAAU5C,EAAM4C,SAChBmB,qBAAsB/D,EAAM+D,qBAC5BjB,aAAc9C,EAAM8C,aACpBE,cAAehD,EAAMgD,8B,wJC2BlCyI,E,kDA3Dd,WAAYzL,GAAQ,IAAD,8BAClB,cAAMA,IAEK0L,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBALT,E,iDAQhB,SAAclG,GACVqG,KAAK9L,MAAM2F,SAAS,CAChBpD,EAAGkD,EAAEI,OAAOb,MACZxC,EAAGsJ,KAAK9L,MAAMgF,MAAMxC,EACpBS,EAAG6I,KAAK9L,MAAMgF,MAAM/B,M,2BAI5B,SAAcwC,GACVqG,KAAK9L,MAAM2F,SAAS,CAChBpD,EAAGuJ,KAAK9L,MAAMgF,MAAMzC,EACpBC,EAAGiD,EAAEI,OAAOb,MACZ/B,EAAG6I,KAAK9L,MAAMgF,MAAM/B,M,2BAI5B,SAAcwC,GACVqG,KAAK9L,MAAM2F,SAAS,CAChBpD,EAAGuJ,KAAK9L,MAAMgF,MAAMzC,EACpBC,EAAGsJ,KAAK9L,MAAMgF,MAAMxC,EACpBS,EAAGwC,EAAEI,OAAOb,U,oBAIpB,WACI,OACI,eAACgB,EAAA,EAAD,CAAY/F,UAAU,OAAtB,UACI,cAAC+F,EAAA,EAAW+F,KAAZ,yBACA,cAACC,EAAA,EAAKC,QAAN,CACI/I,KAAK,SACLgJ,YAAY,IACZlH,MAAO8G,KAAK9L,MAAMgF,MAAMzC,EACxBoD,SAAUmG,KAAKJ,gBAEnB,cAACM,EAAA,EAAKC,QAAN,CACI/I,KAAK,SACLgJ,YAAY,IACZlH,MAAO8G,KAAK9L,MAAMgF,MAAMxC,EACxBmD,SAAUmG,KAAKF,gBAEnB,cAACI,EAAA,EAAKC,QAAN,CACI/I,KAAK,SACLgJ,YAAY,IACZlH,MAAO8G,KAAK9L,MAAMgF,MAAM/B,EACxB0C,SAAUmG,KAAKD,uB,GArDTM,aCIpBC,E,kDACJ,WAAYpM,GAAQ,IAAD,8BACnB,cAAMA,IAECqM,MAAQ,CACXC,YAAa,GACbC,iBAAkB,GAClBC,UAAW,CAACjK,EAAG,GAAIC,EAAG,GAAIS,EAAG,IAC7BwJ,SAAS,GAGX,EAAKC,kBAAoB,EAAKA,kBAAkBf,KAAvB,gBAEzB,EAAKgB,wBAA0B,EAAKA,wBAAwBhB,KAA7B,gBAC/B,EAAKiB,6BAA+B,EAAKA,6BAA6BjB,KAAlC,gBACpC,EAAKkB,sBAAwB,EAAKA,sBAAsBlB,KAA3B,gBAC7B,EAAKmB,YAAc,EAAKA,YAAYnB,KAAjB,gBAfF,E,2DAkBnB,SAAwBlG,GACtBqG,KAAKiB,SAAS,CACZT,YAAa7G,EAAEI,OAAOoE,MAAM,O,0CAIhC,SAA6BxE,GAC3BqG,KAAKiB,SAAS,CACZR,iBAAkB9G,EAAEI,OAAOoE,MAAM,O,mCAIrC,SAAsBjF,GACpB8G,KAAKiB,SAAS,CACZP,UAAWxH,M,sEAIf,WAAwBS,GAAxB,SAAAuH,EAAA,sDACElB,KAAKiB,SAAS,CACZN,SAAS,IAGXX,KAAK9L,MAAMiN,SAASnB,KAAKO,MAAMC,YAAaR,KAAKO,MAAME,iBAAkBT,KAAKO,MAAMG,WAEpFV,KAAKiB,SAAS,CACZN,SAAS,IARb,gD,gFAYA,SAAYhH,GACVqG,KAAK9L,MAAMkN,Y,oBAGb,WACE,IAAIC,EASAC,EAKJ,OAR4BD,MALxBrB,KAAKO,MAAMC,aACRR,KAAKO,MAAME,kBACXT,KAAKO,MAAMG,UAAUjK,GACrBuJ,KAAKO,MAAMG,UAAUhK,GACrBsJ,KAAKO,MAAMG,UAAUvJ,IACpB6I,KAAKO,MAAMI,SAIfX,KAAK9L,MAAM8K,QACbsC,EAAQ,cAACC,EAAA,EAAD,CAAOC,QAAQ,SAAf,SAAyBxB,KAAK9L,MAAM8K,SAI1C,eAACyC,EAAA,EAAD,CAAOC,KAAM1B,KAAK9L,MAAMwN,KAAMC,OAAQ3B,KAAKgB,YAA3C,UACE,cAACS,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,4BAEF,eAACL,EAAA,EAAMM,KAAP,WACE,eAAC7B,EAAA,EAAD,WACI,eAACA,EAAA,EAAK8B,MAAN,CAAY7N,UAAU,OAAtB,UACI,cAAC+L,EAAA,EAAK+B,MAAN,2BACA,cAAC/B,EAAA,EAAKC,QAAN,CACE/I,KAAK,OACLyC,SAAUmG,KAAKa,6BAGrB,eAACX,EAAA,EAAK8B,MAAN,CAAY7N,UAAU,OAAtB,UACI,cAAC+L,EAAA,EAAK+B,MAAN,gCACA,cAAC/B,EAAA,EAAKC,QAAN,CACE/I,KAAK,OACLyC,SAAUmG,KAAKc,kCAGrB,cAAC,EAAD,CACE5H,MAAO8G,KAAKO,MAAMG,UAClB7G,SAAUmG,KAAKe,2BAGpBO,KAEH,cAACG,EAAA,EAAMS,OAAP,UACE,cAACjI,EAAA,EAAD,CACEuH,QAAQ,UACR1D,UAAWuD,EACX7I,QAASwH,KAAKY,kBAHhB,6B,GAjGeP,aA8GZC,O,+GChHT6B,E,4JACL,WACC,IAAIX,EAAU,GACVxB,KAAK9L,MAAMkO,UAAY,MAAKZ,EAAU,WACtCxB,KAAK9L,MAAM8K,QAAOwC,EAAU,UAEhC,IAEIF,EAFAe,EAAYrC,KAAK9L,MAAMkO,SAAW,MAAQpC,KAAK9L,MAAM8K,MAOzD,OAJIgB,KAAK9L,MAAM8K,QACdsC,EAAQ,cAACC,EAAA,EAAD,CAAOC,QAAQ,SAAf,SAAyBxB,KAAK9L,MAAM8K,SAI5C,sBAAK7K,UAAU,uBAAf,UACC,eAACmO,EAAA,EAAD,WACC,qBAAKnO,UAAU,cAAcqF,MAAO,CAAC+I,SAAS,WAAD,OAAa,IAAIvC,KAAK9L,MAAMkO,SAA5B,WAA7C,SAA6FpC,KAAK9L,MAAMoF,QACxG,qBAAKnF,UAAU,aAAf,SAA6B6L,KAAK9L,MAAMoF,QACxC,cAACgJ,EAAA,EAAD,CAAaE,SAAO,EAAChB,QAASA,EAASa,SAAUA,EAAUI,IAAKzC,KAAK9L,MAAMkO,cAE3Ed,S,GApB4BjB,aA0BlB8B,IC3BTO,E,uKACL,c,kCAIA,c,oBAGA,WACC,OACC,eAACjB,EAAA,EAAD,CAAOkB,SAAS,SAASjB,KAAM1B,KAAK9L,MAAMwN,KAA1C,UACA,cAACD,EAAA,EAAMG,OAAP,UACC,cAACH,EAAA,EAAMK,MAAP,kCAED,cAACL,EAAA,EAAMM,KAAP,UACC,sBAAK5N,UAAU,eAAf,UACC,cAAC,EAAD,CACCiO,SAAUpC,KAAK9L,MAAM0O,gBACrB5D,MAAOgB,KAAK9L,MAAM2O,aAClBvJ,MAAM,2BAEP,cAAC,EAAD,CACC8I,SAAUpC,KAAK9L,MAAM4O,qBACrB9D,MAAOgB,KAAK9L,MAAM6O,kBAClBzJ,MAAM,gCAEP,cAAC,EAAD,CACC8I,SAAUpC,KAAK9L,MAAM8O,YACrBhE,MAAOgB,KAAK9L,MAAM+O,SAClB3J,MAAM,+BAEP,cAAC,EAAD,CACC8I,SAAUpC,KAAK9L,MAAMgP,aACrBlE,MAAOgB,KAAK9L,MAAMiP,UAClB7J,MAAM,0C,GAlCiB+G,aA2CdqC,O,0CCjDfU,EAAOC,QAAU,IAA0B,2D,oBCA3CD,EAAOC,QAAU,IAA0B,iD,oBCA3CD,EAAOC,QAAU,IAA0B,kD,oBCA3CD,EAAOC,QAAU,IAA0B,kD,kBCA3CD,EAAOC,QAAU,gU,kBCAjBD,EAAOC,QAAU,swT,kBCAjBD,EAAOC,QAAU,qI,kBCAjBD,EAAOC,QAAU,8N,kBCAjBD,EAAOC,QAAU,qI,kBCAjBD,EAAOC,QAAU,6wB,kBCAjBD,EAAOC,QAAU,qI,kBCAjBD,EAAOC,QAAU,wiC,kBCAjBD,EAAOC,QAAU,qI,kBCAjBD,EAAOC,QAAU,yc,gICiBFC,MARf,WACE,OACI,qBAAKnP,UAAU,MAAf,SACE,cAACoP,EAAA,EAAD,OCAOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhI,MAAK,YAAkD,IAA/CiI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDV,kBAAmBO,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cAAcC,SAAS,uBAAuB1I,MAAK,SAAA2I,GAC3DC,QAAQC,IAAI,kBAAmBF,MAC9BG,OAAM,SAAAC,GACPH,QAAQC,IAAI,2BAA4BE,SAK9CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7H,SAAS8H,eAAe,SAM1BrB,K,6sBCxBMsB,E,sFAEL,c,2BAEA,SAAc9I,EAAOC,EAAQ8I,M,4BAG7B,SAAeC,M,6BAEf,SAAgBC,EAAUC,M,8BAE1B,SAAiBF,M,yBAEjB,SAAY9L,M,iCAEZ,SAAoBA,M,oCAEpB,SAAuBA,M,+BAEvB,SAAkBA,M,4BAElB,c,yBAEA,SAAYiM,M,8BAEZ,c,6BAEA,SAAgBjM,M,uBAEhB,SAAUA,Q,aC1BXkM,IAAeC,UAAY,IAAID,IAAc,EAAE,EAAE,G,ICK7CE,EACAzQ,EACAC,EAEAyQ,EDPEC,E,kDA8BL,WAAYD,EAAUE,GAAM,IAAD,uBAC1B,gBACKA,IAAMA,EACX,EAAKF,SAAWA,EAEhB,EAAKG,OAAS,IAAIN,IAAyB,GAAIK,EAAIE,YAAYF,EAAIG,aAAc,GAAK,KAEtF,EAAKC,SAAW,IAAIC,IAAc,EAAKJ,OAAQD,GAC/C,EAAKC,OAAOpI,SAAS5G,GAAK,GAC1B,EAAKmP,SAASE,SAEd,EAAKC,oBAAsB,IAAIZ,IAAyB,CACvDa,YAAab,IACbc,SAAU,CACTC,UAAW,CAAEjN,MAAO,EAAKwM,OAAOU,oBAChCC,KAAM,CAACnN,MAAO,EAAKwM,OAAOY,kBAC1BC,WAAY,CAAErN,MAAO,IAAIkM,IAAc,EAAG,IAC1CoB,QAAS,CAAEtN,MAAM,MACjBuN,QAAS,CAAEvN,MAAM,MACjBwN,QAAS,CAAExN,MAAM,MACjByN,QAAS,CAAEzN,MAAM,MACjB0N,QAAS,CAAE1N,MAAM,MACjB2N,QAAS,CAAE3N,MAAM,MACjB4N,QAAS,CAAE5N,MAAM,MACjB6N,QAAS,CAAE7N,MAAM,MACjB8N,QAAS,CAAE9N,MAAM,MACjB+N,QAAS,CAAE/N,MAAM,MACjB9D,WAAY,CAAE8D,MAAO,MACrBgO,SAAU,CAAEhO,MAAO,MACnBlE,IAAK,CAAEkE,MAAO,MACdiO,SAAU,CAAEjO,MAAO,IAAIkM,IAAc,EAAG,IACxCjQ,UAAW,CAAE+D,MAAO,MACpBkO,eAAgB,CAAElO,MAAO,IAAIkM,IAAc,EAAG,IAC9C1P,SAAU,CAAEwD,MAAO,MACnB7D,eAAgB,CAAE6D,OAAO,GACzBmO,oBAAqB,CAAEnO,OAAO,GAC9BoO,UAAW,CAAEpO,OAAO,GACpBqO,WAAY,CAAErO,OAAO,GACrB1D,aAAc,CAAE0D,OAAO,GACvBzD,OAAQ,CAAEyD,OAAO,IAElBsO,aAAcC,EAAQ,KACtBC,eAAgBD,EAAQ,KACxBE,KAAMvC,IACNwC,aAAa,IAGd,EAAKC,gBAAkB,IAAIzC,IAAqB,CAC/CoC,aAAcC,EAAQ,KACtBC,eAAgBD,EAAQ,KACxBvB,SAAU,CACT4B,QAAS,CAAE5O,MAAO,MAClB6O,UAAW,CAAE7O,MAAO,OAErB0O,aAAa,IAGd,EAAKI,UAAY,IAAI5C,IAGrB,EAAK6C,KAAO,IAAI7C,IAFH,GACK,IAElB,EAAK6C,KAAKC,QAAQ,GAAIC,KAAKC,IAC3B,EAAKJ,UAAUK,IAAI,EAAKJ,MAExB,EAAKA,KAAKK,eAAiB,SAAE/C,EAAUgD,EAAO7C,EAAQ8C,EAAUC,EAAUC,GACzE,IAAIC,EAAM,EAAK9C,SAAS9L,OACxB,EAAKkO,KAAK3K,SAAS7G,EAAIkS,EAAIlS,EAC3B,EAAKwR,KAAK3K,SAAS5G,EAAIiS,EAAIjS,EAC3B,EAAKuR,KAAK3K,SAASnG,EAAIwR,EAAIxR,EAC3B,EAAK8Q,KAAKW,qBAGX,IAAMJ,EAAW,IAAIpD,IACrB,EAAKyD,YAAc,IAAIzD,IACvB,EAAK0D,IAAM,IAAI1D,IAAWoD,EAAU,EAAKxC,qBACzC,EAAK6C,YAAYR,IAAI,EAAKS,KAE1B,EAAKC,aAAe,IAAI3D,IACxB,EAAK4D,cAAgB,IAAI5D,KAA4B,EAAG,EAAG,GAAK,EAAG,EAAG,GACtE,IAAI6D,EAAQ,IAAI7D,IAAqB,EAAG,GACpC8D,EAAO,IAAI9D,IAAW6D,EAAO,EAAKpB,iBAhFZ,OAiF1B,EAAKkB,aAAaV,IAAIa,GAEtB,EAAKC,mBAAqB,IAAI/D,IAAwB,EAAG,GACzD,EAAKgE,iBAAmB,IAAIhE,IAAwB,EAAG,GACvD,EAAKgE,iBAAiBC,aAAe,IAAIjE,IAGzC,EAAKY,oBAAoBE,SAASgB,SAAShO,MAAQ,EAAKkQ,iBAAiBC,aACzE,EAAKxB,gBAAgB3B,SAAS4B,QAAQ5O,MAAQ,EAAKkQ,iBAAiBpE,QACpE,EAAK6C,gBAAgB3B,SAAS6B,UAAU7O,MAAQ,EAAKiQ,mBAAmBnE,QAExE,EAAKsE,aAAc,EAEnB,EAAKzD,SAAS3B,iBAAiB,UAAU,WACxC,EAAKoF,aAAc,KAGpBrF,OAAOC,iBAAiB,UAAU,WACjC,EAAKqF,oBAEN,EAAKA,iBArGqB,E,0CAyG3B,WACC,GAAKvJ,KAAKwJ,eACLxJ,KAAKyJ,aACLzJ,KAAKsJ,YAAV,CAEA,IAAMI,EAAO1J,KAAKyF,IAAIkE,wBAEhB3N,EAAS0N,EAAKlM,MAAQkM,EAAKE,KAC3B3N,EAASyN,EAAKjM,OAASiM,EAAKG,IAC5BD,EAASF,EAAKE,KACdnM,EAASwG,OAAO6F,YAAcJ,EAAKjM,OAEzCuC,KAAKuF,SAASwE,YAAYH,EAAMnM,EAAQzB,EAAOC,GAC/C+D,KAAKuF,SAASyE,WAAWJ,EAAMnM,EAAQzB,EAAOC,GAC9C+D,KAAKuF,SAAS0E,gBAAe,GAE7BjK,KAAK6F,SAASE,SAEd,IAAImE,EAAKlK,KAAKuF,SAAS4E,aACvBnK,KAAKuF,SAAS6E,gBAAgBpK,KAAKoJ,kBACnCc,EAAGG,MAAMH,EAAGI,kBACZtK,KAAKuF,SAASZ,OAAO3E,KAAKgI,UAAWhI,KAAK0F,QAE1C1F,KAAKuF,SAAS6E,gBAAgBpK,KAAKmJ,oBACnCe,EAAGG,MAAMH,EAAGI,kBACZtK,KAAKuF,SAASZ,OAAO3E,KAAK6I,YAAa7I,KAAK0F,QAE5C1F,KAAKuF,SAAS6E,gBAAgB,MAC9BF,EAAGG,MAAMH,EAAGI,kBACZtK,KAAKuF,SAASZ,OAAO3E,KAAK+I,aAAc/I,KAAKgJ,eAE7ChJ,KAAKsJ,aAAc,K,8BAGpB,WACCtJ,KAAKsJ,aAAc,I,2BAGpB,SAActN,EAAOC,EAAQ8I,GAC5B/E,KAAK5K,WAAa,IAAIgQ,IAAcpJ,EAAOC,EAAQ8I,GACnD/E,KAAK8I,IAAIN,SAAW,IAAIpD,IAAkBpF,KAAK5K,WAAWqB,EAAGuJ,KAAK5K,WAAWsB,EAAGsJ,KAAK5K,WAAW+B,GAChG6I,KAAKgG,oBAAoBE,SAAS9Q,WAAW8D,MAAQ8G,KAAK5K,WAC1D4K,KAAKsJ,aAAc,I,4BAIpB,SAAetE,GACdhF,KAAKwJ,cAAgBxE,EAErB,IAAK,IAAIrO,EAAI,EAAGA,EAAI,IAAKA,EACxBqJ,KAAKgG,oBAAoBE,SAAS,SAAWvP,GAAGuC,MAAQ8G,KAAKwJ,cAAc7S,GAG5EqJ,KAAKsJ,aAAc,I,6BAGpB,SAAgBrE,EAAUC,EAAQqF,GACjCvK,KAAKyJ,YAAcxE,EACnBjF,KAAKwK,UAAYtF,EACjBlF,KAAKgG,oBAAoBE,SAASlR,IAAIkE,MAAQ8G,KAAKyJ,YAAY,GAC/DzJ,KAAKgG,oBAAoBE,SAASiB,SAASjO,MAAQ,IAAIkM,IAAcpF,KAAKwK,UAAU,GAAG,GAAIxK,KAAKwK,UAAU,GAAG,IAC7GxK,KAAKsJ,aAAc,I,8BAGpB,SAAiBtE,EAASyF,GACzBzK,KAAK0K,iBAAmB1F,EACxBhF,KAAKoH,eAAiBqD,EACtBzK,KAAKgG,oBAAoBE,SAAS/Q,UAAU+D,MAAQ8G,KAAK0K,iBACzD1K,KAAKgG,oBAAoBE,SAASkB,eAAelO,MAAQ,IAAIkM,IAAcpF,KAAKoH,eAAe,GAAIpH,KAAKoH,eAAe,IACvHpH,KAAKsJ,aAAc,I,yBAGpB,SAAYpQ,GACX8G,KAAKgG,oBAAoBE,SAASxQ,SAASwD,MAAQA,I,iCAIpD,SAAoBA,GACnB8G,KAAKgG,oBAAoBE,SAASlR,IAAIkE,MAAQ8G,KAAKyJ,YAAYvQ,GAC/D8G,KAAKgG,oBAAoBE,SAASiB,SAASjO,MAAQ,IAAIkM,IAAcpF,KAAKwK,UAAUtR,GAAO,GAAI8G,KAAKwK,UAAUtR,GAAO,IACrH8G,KAAKsJ,aAAc,I,oCAGpB,SAAuBpQ,GACtB8G,KAAKgG,oBAAoBE,SAASmB,oBAAoBnO,MAAQA,EAC9D8G,KAAKsJ,aAAc,I,+BAGpB,SAAkBpQ,GACjB8G,KAAKgG,oBAAoBE,SAAS7Q,eAAe6D,MAAQA,EACzD8G,KAAKsJ,aAAc,I,iCAGpB,SAAoBtE,GACnBhF,KAAKgG,oBAAoBE,SAASoB,UAAUpO,MAAQ8L,EACpDhF,KAAKsJ,aAAc,I,kCAGpB,SAAqBtE,GACpBhF,KAAKgG,oBAAoBE,SAASqB,WAAWrO,MAAQ8L,EACrDhF,KAAKsJ,aAAc,I,4BAGpB,WACCtJ,KAAKuF,SAASoF,QAAQ1G,OAAO2G,WAAY3G,OAAO6F,aAEhD,IAAMJ,EAAO1J,KAAKyF,IAAIkE,wBAEhB3N,EAAS0N,EAAKlM,MAAQkM,EAAKE,KAC3B3N,EAASyN,EAAKjM,OAASiM,EAAKG,IAIlC7J,KAAK0F,OAAOmF,OAAS7O,EAAMC,EAC3B+D,KAAK0F,OAAOoF,yBACZ9K,KAAKmJ,mBAAmBwB,QAAQ3O,EAAOC,GACvC+D,KAAKoJ,iBAAiBuB,QAAQ3O,EAAOC,GACrC+D,KAAKgG,oBAAoBE,SAASK,WAAWrN,MAAQ,IAAIkM,IAAcpJ,EAAOC,GAE9E+D,KAAKoJ,iBAAiBC,aAAe,IAAIjE,IACzCpF,KAAKgG,oBAAoBE,SAASgB,SAAShO,MAAQ8G,KAAKoJ,iBAAiBC,aAEzErJ,KAAKsJ,aAAc,I,yBAGpB,SAAYnE,GACX,IAAI4F,EAAO,IAAI3F,IAEf2F,EAAKC,aAAc,WAAY,IAAI5F,IAAuBD,EAAK,IAE/D,IAAI8F,EAAS,IAAI7F,IAAa2F,GAE9BE,EAAO3N,SAAS7G,GAAK,GAAIuJ,KAAK5K,WAAWqB,EACzCwU,EAAO3N,SAAS5G,GAAK,GAAIsJ,KAAK5K,WAAWsB,EACzCuU,EAAO3N,SAASnG,GAAK,GAAI6I,KAAK5K,WAAW+B,EAEzC6I,KAAKgI,UAAUK,IAAI4C,K,6BAGpB,SAAgB/R,GACf8G,KAAKgG,oBAAoBE,SAAS1Q,aAAa0D,MAAQA,I,uBAGxD,SAAUA,GACT8G,KAAKgG,oBAAoBE,SAASzQ,OAAOyD,MAAQA,M,GAvRf4L,GEH9BoG,E,WA0BL,WAAY3F,EAAUE,EAAK0F,EAAoBzW,EAAqBC,GAAkB,IAAD,2BACpFqL,KAAKyF,IAAMA,EACXzF,KAAKuF,SAAWA,EAEhBvF,KAAKmL,mBAAqBA,EAC1BnL,KAAKtL,oBAAsBA,EAC3BsL,KAAKrL,gBAAkBA,EAEjBqL,KAAKoL,mBAAqB,IAAIhG,IAAqB,CACxDoC,aAAcC,EAAQ,KACtBC,eAAgBD,EAAQ,KACxBvB,SAAU,CACTmF,OAAQ,CAAEnS,MAAO,MACjBlE,IAAK,CAAEkE,MAAO,MACdiO,SAAU,CAAEjO,MAAO,IAAIkM,IAAc,EAAG,IACxC1P,SAAU,CAAEwD,MAAO,OAEpB0O,aAAa,EACb0D,WAAY,CACXC,kBAAkB,KAIpBvL,KAAKwL,kBAAoB,IAAIpG,IAAqB,CACjDoC,aAAcC,EAAQ,KACtBC,eAAgBD,EAAQ,KACxBvB,SAAU,CACTmE,MAAO,CAAEnR,OAAO,GAChBuS,aAAc,CAAEvS,MAAO,IAAIkM,IAAc,EAAK,IAC9C9H,SAAU,CAAEpE,MAAO,IAAIkM,IAAc,EAAK,IAC1CsG,UAAW,CAAExS,OAAO,GACpB4B,QAAS,CAAC5B,MAAO,GACjB0B,QAAS,CAAC1B,MAAO,GACjBqN,WAAY,CAACrN,MAAO,MACpByS,QAAS,CAACzS,MAAO,MACjB0S,UAAW,CAAE1S,OAAO,IAErB0O,aAAa,IAGd5H,KAAK6L,YAAc,IAAIzG,IAAqB,CAC3CoC,aAAcC,EAAQ,KACtBC,eAAgBD,EAAQ,KACxBvB,SAAU,CACToB,UAAW,CAAEpO,MAAO,MACpBqO,WAAY,CAAErO,MAAO,OAEtB0O,aAAa,IAGd5H,KAAK8L,sBAAwB,IAAI1G,IAAwB,KAAM,MAC/DpF,KAAK+L,uBAAyB,IAAI3G,IAAwB,KAAM,KAAM,CACrE4G,UAAU5G,IACD6G,UAAU7G,IACV8G,iBAAgB,IAG1B,IAAMrB,EAASpF,EAAIE,YAAYF,EAAIG,aAEnC5F,KAAK0F,OAAS,IAAIN,KAA2ByF,EAAQA,EAAQ,GAAK,EAAG,EAAG,GACxE7K,KAAK6F,SAAW,IAAIC,IAAc9F,KAAK0F,OAAQD,GAC/CzF,KAAK0F,OAAOpI,SAASnG,EAAI,EACzB6I,KAAK6F,SAASsG,cAAe,EAC7BnM,KAAK6F,SAASE,SAGd/F,KAAKoM,iBAAmB,IAAIhH,KAA0B,EAAG,EAAG,GAAK,EAAG,EAAG,GACvEpF,KAAKqM,gBAAkB,IAAIjH,IAC3B,IAAI6D,EAAQ,IAAI7D,IAAqB,EAAG,GACpC8D,EAAO,IAAI9D,IAAW6D,EAAOjJ,KAAKoL,oBACtCpL,KAAKsM,SAAWpD,EAChBlJ,KAAKqM,gBAAgBhE,IAAIa,GAIzBlJ,KAAKuM,gBAAkB,IAAInH,KAA0B,EAAG,EAAG,GAAK,EAAG,EAAG,GACtEpF,KAAKwM,eAAiB,IAAIpH,IAC1B,IAAI6D,EAAQ,IAAI7D,IAAqB,EAAG,GACpC8D,EAAO,IAAI9D,IAAW6D,EAAOjJ,KAAKwL,mBACtCxL,KAAKwM,eAAenE,IAAIa,GAIxBlJ,KAAKyM,SAAW,IAAIrH,IACpB,IAAI6D,EAAQ,IAAI7D,IAAqB,EAAG,GACpC8D,EAAO,IAAI9D,IAAW6D,EAAOjJ,KAAK6L,aACtC7L,KAAKyM,SAASpE,IAAIa,GAClBlJ,KAAKyM,SAASpE,IAAIrI,KAAK0F,QAGvB1F,KAAK6L,YAAY3F,SAASqB,WAAWrO,MAAQ8G,KAAK+L,uBAAuB/G,QACzEhF,KAAK6L,YAAY3F,SAASoB,UAAUpO,MAAQ8G,KAAK8L,sBAAsB9G,QAEvEhF,KAAK0M,iBAAkB,EACvB1M,KAAK2M,gBAAiB,EAEtB3M,KAAKyF,IAAIvB,iBAAiB,aAAa,SAAAvK,GAAO,EAAKiT,UAAUjT,MAC7DqG,KAAKyF,IAAIvB,iBAAiB,aAAa,SAAAvK,GAAO,EAAKkT,UAAUlT,MAC7DqG,KAAKyF,IAAIvB,iBAAiB,WAAW,SAAAvK,GAAO,EAAKmT,QAAQnT,MACzDqG,KAAKyF,IAAIvB,iBAAiB,YAAY,SAAAvK,GAAO,EAAKoT,SAASpT,MAE3DsK,OAAOC,iBAAiB,UAAU,WACjC,EAAKqF,oBAENvJ,KAAKuJ,iB,oDAGN,SAAiB5P,GAChB,IAAMqT,EAAY,IAAI5H,IAChB6H,EAAQ,IAAI7H,IACZsE,EAAO1J,KAAKyF,IAAIkE,wBACtBsD,EAAMxW,GAAKkD,EAAEuT,QAAUxD,EAAKE,OAASF,EAAKlM,MAAQkM,EAAKE,MAAQ,EAAM,EACrEqD,EAAMvW,EAAI,GAAOiD,EAAEwT,QAAUzD,EAAKG,MAAQH,EAAKjM,OAASiM,EAAKG,KAAO,EACpEmD,EAAUI,cAAeH,EAAMI,QAASrN,KAAK0F,QAC7C,IAAM4H,EAAaN,EAAUO,gBAAgBvN,KAAKsM,UAElD,OAAIgB,EAAW/W,OAAS,EAChB+W,EAAW,GAAGE,GAEf,O,uBAGR,SAAU7T,GACT,GAAiB,IAAbA,EAAE8T,OAAc,CACnB,IAAMR,EAAQjN,KAAK0N,iBAAiB/T,GAChCsT,IACHjN,KAAKwL,kBAAkBtF,SAAS5I,SAASpE,MAAQ+T,EACjDjN,KAAKwL,kBAAkBtF,SAASuF,aAAavS,MAAQ8G,KAAKwL,kBAAkBtF,SAAS5I,SAASpE,MAC9F8G,KAAK2M,gBAAiB,EACtB3M,KAAKwL,kBAAkBtF,SAASwF,UAAUxS,OAAQ,M,uBAKrD,SAAUS,GACT,GAAiB,IAAbA,EAAE8T,QACDzN,KAAKwL,kBAAkBtF,SAASwF,UAAUxS,MAAO,CACpD,IAAM+T,EAAQjN,KAAK0N,iBAAiB/T,GAChCsT,IACHjN,KAAKwL,kBAAkBtF,SAASuF,aAAavS,MAAQ8G,KAAKwL,kBAAkBtF,SAAS5I,SAASpE,MAC9F8G,KAAKwL,kBAAkBtF,SAAS5I,SAASpE,MAAQ+T,EACjDjN,KAAK2M,gBAAiB,M,sBAM1B,SAAShT,GACS,IAAbA,EAAE8T,SACLzN,KAAKwL,kBAAkBtF,SAASwF,UAAUxS,OAAQ,K,qBAIpD,SAAQS,GACU,IAAbA,EAAE8T,SACLzN,KAAKwL,kBAAkBtF,SAASwF,UAAUxS,OAAQ,EAClD8G,KAAKrL,qB,8BAIP,WACCqL,KAAKuF,SAASwE,YAAY,EAAG,EAAG,KAAM,MACtC/J,KAAKuF,SAAS0E,gBAAe,GAC7BjK,KAAKuF,SAAS6E,gBAAgBpK,KAAK+L,wBACnC/L,KAAKuF,SAASZ,OAAO3E,KAAKqM,gBAAiBrM,KAAKoM,kBAChDpM,KAAKtL,sBACLsL,KAAK0M,iBAAkB,I,6BAGxB,WACC1M,KAAKuF,SAASwE,YAAY,EAAG,EAAG,KAAM,MACtC/J,KAAKuF,SAAS0E,gBAAe,GAC7BjK,KAAKuF,SAAS6E,gBAAgBpK,KAAK8L,uBACnC9L,KAAKuF,SAASZ,OAAO3E,KAAKwM,eAAgBxM,KAAKuM,iBAE3CvM,KAAKwL,kBAAkBtF,SAASmE,MAAMnR,QACzC8G,KAAKwL,kBAAkBtF,SAASmE,MAAMnR,OAAQ,EAC9C8G,KAAKrL,mBAGFqL,KAAKwL,kBAAkBtF,SAAS0F,UAAU1S,QAC7C8G,KAAKwL,kBAAkBtF,SAAS0F,UAAU1S,OAAQ,EAClD8G,KAAKrL,mBAENqL,KAAK2M,gBAAiB,I,uBAGvB,WACC,IAAMjD,EAAO1J,KAAKyF,IAAIkE,wBAEhB3N,EAAS0N,EAAKlM,MAAQkM,EAAKE,KAC3B3N,EAASyN,EAAKjM,OAASiM,EAAKG,IAC5BD,EAASF,EAAKE,KACdnM,EAASwG,OAAO6F,YAAcJ,EAAKjM,OAEzCuC,KAAKuF,SAASwE,YAAYH,EAAMnM,EAAQzB,EAAOC,GAC/C+D,KAAKuF,SAASyE,WAAWJ,EAAMnM,EAAQzB,EAAOC,GAC9C+D,KAAKuF,SAAS0E,gBAAe,GAE7BjK,KAAKuF,SAAS6E,gBAAgB,MAC9B,IAAIF,EAAKlK,KAAKuF,SAAS4E,aACvBD,EAAGG,MAAMH,EAAGI,kBACZtK,KAAKuF,SAASZ,OAAO3E,KAAKyM,SAAUzM,KAAK0F,U,oBAI1C,WACK1F,KAAK2M,gBAAgB3M,KAAK2N,kBAC1B3N,KAAK0M,iBAAiB1M,KAAK4N,mBAE/B5N,KAAK6N,c,2BAGN,SAAc7R,EAAOC,EAAQ8I,M,4BAG7B,SAAeC,GACdhF,KAAKwJ,cAAgBxE,EACrBhF,KAAKoL,mBAAmBlF,SAASmF,OAAOnS,MAAQ8G,KAAKwJ,cACrDxJ,KAAK0M,iBAAkB,I,6BAGxB,SAAgBzH,EAAUC,GACzBlF,KAAKyJ,YAAcxE,EACnBjF,KAAKwK,UAAYtF,EACjBlF,KAAKoL,mBAAmBlF,SAASlR,IAAIkE,MAAQ8G,KAAKyJ,YAAY,GAC9DzJ,KAAKoL,mBAAmBlF,SAASiB,SAASjO,MAAQ,IAAIkM,IAAcpF,KAAKwK,UAAU,GAAG,GAAIxK,KAAKwK,UAAU,GAAG,IAC5GxK,KAAK0M,iBAAkB,I,yBAGxB,SAAYxT,GACX8G,KAAKoL,mBAAmBlF,SAASxQ,SAASwD,MAAQA,EAClD8G,KAAK0M,iBAAkB,I,iCAGxB,SAAoBxT,GACnB8G,KAAKoL,mBAAmBlF,SAASlR,IAAIkE,MAAQ8G,KAAKyJ,YAAYvQ,GAC9D8G,KAAKoL,mBAAmBlF,SAASiB,SAASjO,MAAQ,IAAIkM,IAAcpF,KAAKwK,UAAUtR,GAAO,GAAI8G,KAAKwK,UAAUtR,GAAO,IACpH8G,KAAK0M,iBAAkB,I,wBAGxB,SAAWxT,GACV8G,KAAKwL,kBAAkBtF,SAAStL,QAAQ1B,MAAQA,I,wBAGjD,SAAWkC,GAET4E,KAAKwL,kBAAkBtF,SAASpL,QAAQ5B,MAD5B,SAATkC,EAC6C,EAEA,I,gCAIlD,WACC,OAAO4E,KAAK8L,sBAAsB9G,U,gCAGnC,WACC,IAAI5F,EAAS,CACZpD,MAAOgE,KAAK8L,sBAAsB9P,MAClCC,OAAQ+D,KAAK8L,sBAAsB7P,OACnCO,OAAQ,IAAI6C,WAAWW,KAAK8L,sBAAsB9P,MAAMgE,KAAK8L,sBAAsB9P,MAAM,IAG1F,OADAgE,KAAKuF,SAASuI,uBAAuB9N,KAAK8L,sBAAuB,EAAG,EAAG1M,EAAOpD,MAAOoD,EAAOnD,OAAQmD,EAAO5C,QACpG4C,I,qCAGR,SAAwB4F,GACvBhF,KAAKwL,kBAAkBtF,SAAS0F,UAAU1S,OAAQ,EAClD8G,KAAKwL,kBAAkBtF,SAASyF,QAAQzS,MAAQ8L,EAChDhF,KAAK2M,gBAAiB,I,iCAGvB,WACC,IAAIvN,EAAS,CACZpD,MAAOgE,KAAK+L,uBAAuB/P,MACnCC,OAAQ+D,KAAK+L,uBAAuB9P,OACpCO,OAAQ,IAAI6C,WAAWW,KAAK+L,uBAAuB/P,MAAMgE,KAAK+L,uBAAuB/P,MAAM,IAG5F,OADAgE,KAAKuF,SAASuI,uBAAuB9N,KAAK+L,uBAAwB,EAAG,EAAG3M,EAAOpD,MAAOoD,EAAOnD,OAAQmD,EAAO5C,QACrG4C,I,kCAGR,WACC,OAAOY,KAAK+L,uBAAuB/G,U,6BAGpC,WACChF,KAAKwL,kBAAkBtF,SAASmE,MAAMnR,OAAQ,EAC9C8G,KAAK2M,gBAAiB,I,4BAGvB,WACC3M,KAAKuF,SAASoF,QAAQ1G,OAAO2G,WAAY3G,OAAO6F,aAEhD,IAAMe,EAAS7K,KAAKyF,IAAIE,YAAY3F,KAAKyF,IAAIG,aAE7C5F,KAAK0F,OAAOkE,MAAQiB,EACpB7K,KAAK0F,OAAOlI,MAAQqN,EACpB7K,KAAK0F,OAAOoF,6B,KDnUViD,EAAQ,IAAIC,IAChBD,EAAME,UAAW,GACjBlR,SAASmR,KAAKC,YAAaJ,EAAMtI,KAQjC,IAAI2I,EAAiB,KACjBC,EAAc,KAGd3Z,EAAsB,aACtBC,EAAkB,a,SAEP2Z,E,kFAAf,WAAoBC,EAAYC,EAAcC,GAA9C,SAAAvN,EAAA,6DACCoE,EAASiJ,EACT1Z,EAAW2Z,EACX1Z,EAAU2Z,GACVlJ,EAAW,IAAIH,IAAoB,CAACE,OAAQA,EAAQoJ,uBAAuB,KAClEC,gBAAiB,EAL3B,SAMOC,IANP,OAOCC,IAPD,4C,sBAUA,SAASC,EAAuBC,GAC/Bra,EAAsBqa,EAGvB,SAASC,EAAmBD,GAC3Bpa,EAAkBoa,EAGnB,SAASE,EAAcC,GACtBd,EAAea,cAAcC,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAGrD,SAASC,EAAeC,EAAS7E,GAKhC,IAJA,IAAItF,EAAW,GACXoK,EAAI9E,EAAK,GACT+E,EAAI/E,EAAK,GACTgF,EAAIhF,EAAK,GACJ5T,EAAI,EAAGA,EAAIyY,EAAQ7Y,SAAUI,EAAG,CACxC,IAAMqO,EAAU,IAAII,IAAoBgK,EAAQzY,GAAI0Y,EAAGC,EAAGC,GAC1DvK,EAAQwK,OAASpK,IACjBJ,EAAQ5N,KAAOgO,IACfJ,EAAQyK,eAAiB,KACzBzK,EAAQiH,UAAY7G,IACpBJ,EAAQgH,UAAY5G,IACpBJ,EAAQkH,iBAAkB,EAC1BlH,EAAQ0K,gBAAkB,EAE1BL,EAAIlH,KAAKwH,KAAKN,EAAE,GAChBC,EAAInH,KAAKwH,KAAKL,EAAE,GAChBC,EAAIpH,KAAKwH,KAAKJ,EAAE,GAEhBtK,EAASrJ,KAAKoJ,GAIfoJ,EAAee,eAAelK,GAC9BoJ,EAAYc,eAAelK,EAAS,IAGrC,SAAS2K,EAAqBC,EAAQtF,GAGrC,IAFA,IAAItF,EAAW,GACXC,EAAS,GACJvO,EAAI,EAAGA,EAAIkZ,EAAOtZ,SAAUI,EAAG,CACvC,IAAMmZ,EAAM,IAAI1K,IAAoByK,EAAOlZ,GAAGX,KAAMuU,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAC3EuF,EAAIN,OAASpK,IACb0K,EAAI7D,UAAY7G,IAChB0K,EAAI9D,UAAY5G,IAChB0K,EAAIJ,gBAAkB,EAEtBzK,EAASrJ,KAAKkU,GACd5K,EAAOtJ,KAAK,CAACiU,EAAOlZ,GAAGoZ,IAAKF,EAAOlZ,GAAGqZ,MAEvC5B,EAAe6B,gBAAgBhL,EAAUC,GACzCmJ,EAAY4B,gBAAgBhL,EAAUC,GAGvC,SAASgL,EAAiB/a,EAAWoV,GACpC,IAAMuF,EAAM,IAAI1K,IAAoBjQ,EAAUa,KAAMuU,EAAK,GAAIA,EAAK,GAAIA,EAAK,IACrEE,EAAQ,CAACtV,EAAU4a,IAAK5a,EAAU6a,KACxCF,EAAIN,OAASpK,IACb0K,EAAI7D,UAAY7G,IAChB0K,EAAI9D,UAAY5G,IAChB0K,EAAIJ,gBAAkB,EAEtBtB,EAAe8B,iBAAiBJ,EAAKrF,G,SAGvBmE,I,2EAAf,sBAAA1N,EAAA,sDACCkN,EAAiB,IAAI5I,EAAsBD,EAAU1Q,GACrDwZ,EAAc,IAAInD,EAAY3F,EAAUzQ,EAASqb,EAAwBC,EAAyBC,GAElGjC,EAAekC,oBAAoBjC,EAAYkC,sBAC/CnC,EAAeoC,qBAAqBnC,EAAYoC,wBALjD,4C,sBAQA,SAAS5B,IACR6B,sBAAuB7B,GAEvBT,EAAezJ,SACf0J,EAAY1J,SAEZoJ,EAAMhI,SAGP,SAASsK,IACR1b,EAAgB0Z,EAAYsC,sBAG7B,SAASR,IACR/B,EAAewC,mBAGhB,SAASR,IACR1b,EAAoB2Z,EAAYwC,uBAGjC,SAASC,EAAY5X,GACpBkV,EAAe0C,YAAY5X,GAC3BmV,EAAYyC,YAAY5X,GAGzB,SAAS6X,EAAkB7X,GAC1BkV,EAAe2C,kBAAkB7X,GAGlC,SAAS8X,EAAsB9X,GAC9BkV,EAAe6C,uBAAuB/X,GAGvC,SAASgY,EAAoBC,GAC5B/C,EAAe8C,oBAAoBC,GACnC9C,EAAY6C,oBAAoBC,GAOjC,SAASC,IACJ/C,GACHA,EAAY+C,kBAId,SAASC,IACR,OAAOhD,EAAYsC,qBAOpB,SAASW,EAAsBlS,EAAQpD,EAAOC,GAC7C,IAAM+I,EAAU,IAAII,IAAmBhG,EAAQpD,EAAOC,EAAQmJ,KAC9DiJ,EAAYkD,wBAAwBvM,GAGrC,SAASwM,EAAgBtY,GACxBkV,EAAeoD,gBAAgBtY,GAGhC,SAASuY,EAAUvY,GAClBkV,EAAeqD,UAAUvY,GAG1B,SAAS6B,EAAWK,GACfiT,GACHA,EAAYtT,WAAWK,GAIzB,SAASP,EAAW3B,GACfmV,GACHA,EAAYxT,WAAW3B,K,0IEtLnBwY,E,WACF,aAAe,oBACX1R,KAAKxD,OAAS,KACdwD,KAAKZ,OAAS,IAAIC,WAClBW,KAAKhE,MAAQ,EACbgE,KAAK/D,OAAS,EACd+D,KAAK+E,MAAQ,EACb/E,KAAK2R,KAAO,E,+EAGhB,WAAWzT,GAAX,uBAAAgD,EAAA,sEAEe,IAAI9C,SAAQ,SAASC,EAASC,GACjC,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,kBAAkBP,GAEzBK,EAAOG,OAAS,SAAAC,GACZN,EAAQM,EAAY5E,OAAO6E,SAG/BL,EAAOO,QAAU,SAAAC,GACbT,EAAOC,EAAOS,QAGlBT,EAAOU,QAAU,SAAAF,GACbT,EAAO,+BAfvB,UACQ9B,EADR,OAoBQoV,EAAMC,SAAYrV,GACa,IAA/BY,OAAO0U,KAAKF,EAAI,IAAIrb,OArB5B,sBAsBc,IAAIwb,MAAM,+BAtBxB,UAyBsB,EAA8DH,EAAI,GAEzD,KAFvBI,EAA+C,CAAEC,KAAnC,EAAGA,KAAsCC,KAAzC,EAASA,KAAsCC,KAA/C,EAAeA,KAAsCC,KAArD,EAAqBA,OAExBA,KAAK,GA3BxB,sBA4Bc,IAAIL,MAAM,wCA5BxB,UA+B+B,IAAvBC,EAAWG,KAAK,GA/BxB,uBAgCc,IAAIJ,MAAM,+CAhCxB,QAmCapb,EAAI,EAnCjB,aAmCoBA,EAAIib,EAAIrb,QAnC5B,oBAoC+B,EAA8Dqb,EAAIjb,GAArF0b,EAAoD,CAAEJ,KAAnC,EAAGA,KAAsCC,KAAzC,EAASA,KAAsCC,KAA/C,EAAeA,KAAsCC,KAArD,EAAqBA,MAExCE,KAAKC,UAAUP,KAAgBM,KAAKC,UAAUF,GAtC1D,uBAuCkB,IAAIN,MAAM,SAAWpb,EAAI,6CAvC3C,UAmCsCA,EAnCtC,wBA2CIqJ,KAAKxD,OAASA,EACdwD,KAAKhE,MAAQgW,EAAWC,KAAK,GAC7BjS,KAAK/D,OAAS+V,EAAWE,KAAK,GAC9BlS,KAAK+E,MAAQ6M,EAAIrb,OACjByJ,KAAK2R,KAAOK,EAAWG,KAAK,GA/ChC,kCAoC+B,MAXT,IAzBtB,Y,kHAkDA,WAAaK,EAASC,GAAtB,iBAAAvR,EAAA,6DACUwR,EAAS,IAAIC,OAAO,EAA4B,CAClD3a,KAAM,cACNZ,UAAKA,IAEHwb,EAAmBC,IAAaH,GAL1C,SAMwBE,EAAiB5S,KAAKxD,OAAQqW,IAAcL,GAAUK,IAAcJ,IAN5F,OAMIzS,KAAKZ,OANT,OAOIsT,EAAOI,YAPX,gD,ySCnDEvP,E,kDACL,WAAYrP,GAAQ,IAAD,8BAClB,cAAMA,IAEDqM,MAAQ,CACZwS,YAAY,EACZC,aAAa,EACbC,YAAY,EACZvS,UAAW,CAAC,EAAG,EAAG,GAClBzL,WAAY,CAAC,EAAG,EAAG,GACnBD,IAAK,GACLE,QAAS,GACTC,UAAW,GACXP,OAAO,EACPW,iBAAkB,EAClBD,qBAAqB,EACrBD,gBAAgB,EAChBK,SAAU,EACVY,QAAS,GACTQ,SAAU,GACVF,SAAU,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,IACvBqB,qBAAsB,GACtBjB,aAAc,GACdE,cAAe,GACf1B,cAAc,EACdC,QAAQ,EACRZ,SAAU,GACVC,QAAS,GAEToe,iBAAkB,GAClBnV,gBAAiB,IAGlB,EAAKoV,iBAAmB,EAAKA,iBAAiBtT,KAAtB,gBACxB,EAAKuT,uBAAyB,EAAKA,uBAAuBvT,KAA5B,gBAC9B,EAAKwT,oBAAsB,EAAKA,oBAAoBxT,KAAzB,gBAC3B,EAAKyT,kBAAoB,EAAKA,kBAAkBzT,KAAvB,gBACzB,EAAK0T,qBAAuB,EAAKA,qBAAqB1T,KAA1B,gBAC5B,EAAK2T,2BAA6B,EAAKA,2BAA2B3T,KAAhC,gBAClC,EAAK4T,0BAA4B,EAAKA,0BAA0B5T,KAA/B,gBACjC,EAAK6T,qBAAuB,EAAKA,qBAAqB7T,KAA1B,gBAC5B,EAAK8T,mBAAqB,EAAKA,mBAAmB9T,KAAxB,gBAC1B,EAAK+T,aAAe,EAAKA,aAAa/T,KAAlB,gBACpB,EAAKgU,eAAiB,EAAKA,eAAehU,KAApB,gBACtB,EAAKiU,eAAiB,EAAKA,eAAejU,KAApB,gBACtB,EAAKkU,cAAgB,EAAKA,cAAclU,KAAnB,gBACrB,EAAKuQ,wBAA0B,EAAKA,wBAAwBvQ,KAA7B,gBAC/B,EAAKwQ,oBAAsB,EAAKA,oBAAoBxQ,KAAzB,gBAE3B,EAAKmU,sBAAwB,EAAKA,sBAAsBnU,KAA3B,gBAhDX,E,oDAmDnB,WACCG,KAAKiB,SAAS,CACbgS,YAAY,M,+BAId,WACCjT,KAAKiB,SAAS,CACbgS,YAAY,M,2BAId,SAAcxN,GACbzF,KAAKiB,SAAS,CACbnM,QAAS2Q,M,4BAIX,SAAeA,GACdzF,KAAKiB,SAAS,CACbpM,SAAU4Q,M,kCAIZ,SAAqBzQ,EAAKif,EAAgBC,EAAMC,EAAYzT,EAAWpK,EAASQ,EAAUsd,GACzFpU,KAAKiB,SAAS,CACbjM,IAAKA,EACLE,QAAS+e,EACThf,WAAYkf,EACZhf,UAAW+e,EACXxT,UAAWA,EACXuS,YAAY,EACZre,OAAO,EACP0B,QAASA,EACTQ,SAAUA,EACVF,SAAU,CAAC,CAAC5B,EAAI,GAAG+a,IAAK/a,EAAI,GAAGgb,KAAM,CAACkE,EAAKnE,IAAKmE,EAAKlE,MACrD/X,qBAAsBmc,M,oCAIxB,WACC,GAAKpU,KAAKO,MAAMwS,WAUXhW,SAASsX,eACZtX,SAASsX,iBACCtX,SAASuX,qBACnBvX,SAASuX,uBACCvX,SAASwX,kBACnBxX,SAASwX,uBAfiB,CAC3B,IAAIC,EAAOzX,SAAS0X,gBAChBD,EAAKE,kBACRF,EAAKE,oBACKF,EAAKG,wBACfH,EAAKG,0BACKH,EAAKI,qBACfJ,EAAKI,sBAYP5U,KAAKiB,SAAS,CACb8R,YAAa/S,KAAKO,MAAMwS,e,iCAI1B,WACC/S,KAAKiB,SAAS,CACb+R,aAAchT,KAAKO,MAAMyS,gB,wCAI3B,SAA2B7B,GAC1BnR,KAAKiB,SAAS,CACb1L,iBAAkB4b,M,uCAIpB,SAA0BjY,GACzB8G,KAAKiB,SAAS,CACb3L,oBAAqB4D,M,kCAIvB,SAAqBA,GACpB8G,KAAKiB,SAAS,CACb5L,eAAgB6D,M,gCAIlB,SAAmBA,GAClB8G,KAAKiB,SAAS,CACbzL,aAAc0D,M,0BAIhB,SAAaA,GACZ8G,KAAKiB,SAAS,CACbxL,OAAQyD,M,4BAIV,SAAeA,GACd,IAAIxD,EAAWwD,EAAQ,KAAS8G,KAAKO,MAAMvL,IAAI,GAAGgb,IAAMhQ,KAAKO,MAAMvL,IAAI,GAAG+a,KAAO/P,KAAKO,MAAMvL,IAAI,GAAG+a,IACnG/P,KAAKiB,SAAS,CACbvL,SAAUA,M,0EAIZ,WAA4BqI,EAAiBmV,GAA7C,2BAAAhS,EAAA,0DACKnD,EAAgBvB,SAAU0W,EAAiB1W,OADhD,wBAEQkW,EAAS,IAAIC,OAAO,EAAsC,CAC/D3a,KAAM,uBACNZ,UAAKA,IAEAyd,EAAUhC,IAAaH,GAN/B,SAOkBmC,EAAQ7U,KAAKO,MAAMvL,IAAI,GAAGgB,KAAMgK,KAAKO,MAAMpL,UAAUa,KAAMgK,KAAKO,MAAMrL,QAAQ,GAAI8K,KAAKO,MAAMtL,WAAY8I,EAAiBmV,GAP5I,OAYE,IALI4B,EAPN,OAQEpC,EAAOI,YAEDiC,EAAY3e,MAAMC,KAAKye,EAAIE,MAAM,EAAG,QACpCld,EAAQ,GACRid,EAAUxe,QAAQuB,EAAM8D,KAAKmZ,EAAUE,OAAO,EAAG,MAIvD,IAFMC,EAAW9e,MAAMC,KAAKye,EAAIE,MAAM,QAChCnd,EAAO,GACPqd,EAAS3e,QAAQsB,EAAK+D,KAAKsZ,EAASD,OAAO,EAAG,MAEpDjV,KAAKiB,SAAS,CACbjK,aAAcc,EACdZ,cAAeW,IApBlB,iD,8FAyBA,SAAwBqb,GACvBlT,KAAKiB,SAAS,CACbiS,iBAAkBA,M,iCAIpB,SAAoBnV,GACnBiC,KAAKiB,SAAS,CACblD,gBAAiBA,IAElBiC,KAAKgU,sBAAsBjW,EAAiBiC,KAAKO,MAAM2S,oB,oBAGxD,WACC,IAAI9d,EAAa,CAChB4K,KAAKO,MAAMtL,WAAW,GAAK+K,KAAKO,MAAMG,UAAU,GAChDV,KAAKO,MAAMtL,WAAW,GAAK+K,KAAKO,MAAMG,UAAU,GAChDV,KAAKO,MAAMtL,WAAW,GAAK+K,KAAKO,MAAMG,UAAU,IAGjD,OACC,qCACC,qBAAKvM,UAAU,eACf,cAAC,IAAD,CACCuN,KAAM1B,KAAKO,MAAM0S,WACjBkC,QAASnV,KAAKsT,kBACd8B,WAAYpV,KAAKuT,wBAEhBvT,KAAKO,MAAM3L,OACT,qBAAKT,UAAU,mDAAmDqF,MAAO,CAAC8D,SAAU,WAAYrB,OAAQ,OAAQD,MAAO,QAAvH,SACF,eAAC,IAAD,CACCwF,QAAQ,UACR0N,KAAK,KACL1W,QAASwH,KAAKmT,iBAHf,UAKC,mBAAGhf,UAAU,mBALd,2BASA6L,KAAKO,MAAM3L,OACb,qCACA,cAAC,IAAD,CACCC,SAAUmL,KAAKO,MAAM1L,SACrBC,QAASkL,KAAKO,MAAMzL,QACpBG,WAAY+K,KAAKO,MAAMtL,WACvBD,IAAKgL,KAAKO,MAAMvL,IAChBE,QAAS8K,KAAKO,MAAMrL,QACpBC,UAAW6K,KAAKO,MAAMpL,UACtBC,WAAYA,EACZC,eAAgB2K,KAAKO,MAAMlL,eAC3BC,oBAAqB0K,KAAKO,MAAMjL,oBAChCC,iBAAkByK,KAAKO,MAAMhL,iBAC7BX,MAAOoL,KAAKO,MAAM3L,MAClBY,aAAcwK,KAAKO,MAAM/K,aACzBC,OAAQuK,KAAKO,MAAM9K,OACnBC,SAAUsK,KAAKO,MAAM7K,SACrBhB,oBAAqBsL,KAAKoQ,wBAC1Bzb,gBAAiBqL,KAAKqQ,sBAEvB,eAAC,IAAD,WACC,cAAC,IAAD,CACC0C,WAAY/S,KAAKO,MAAMwS,WACvBsC,aAAcrV,KAAKmT,iBACnBmC,mBAAoBtV,KAAKoT,uBACzBmC,gBAAiBvV,KAAKqT,sBAEvB,cAAC,IAAD,CACCmC,KAAMxV,KAAKO,MAAMyS,YACjByC,gBAAiBzV,KAAKO,MAAMvL,IAAIuB,OAChCmf,uBAAwB1V,KAAKwT,2BAC7BlM,UAAWtH,KAAKO,MAAMhL,iBACtBogB,sBAAuB3V,KAAKyT,0BAC5BmC,iBAAkB5V,KAAK0T,qBACvBmC,eAAgB7V,KAAK2T,mBACrBmC,SAAU9V,KAAK4T,aACfmC,WAAY/V,KAAK6T,eACjBxe,eAAgB2K,KAAKO,MAAMlL,eAC3BC,oBAAqB0K,KAAKO,MAAMjL,yBAGlC,cAAC,IAAD,CACCsB,SAAUoJ,KAAKO,MAAM3J,SACrBN,QAASF,MAAMC,KAAK2J,KAAKO,MAAMjK,SAC/BQ,SAAUV,MAAMC,KAAK2J,KAAKO,MAAMzJ,UAChCmB,qBAAsB+H,KAAKO,MAAMtI,qBACjCjB,aAAcZ,MAAMC,KAAK2J,KAAKO,MAAMvJ,cACpCE,cAAed,MAAMC,KAAK2J,KAAKO,MAAMrJ,eACrCuI,WAAYO,KAAK8T,eACjBpU,UAAWM,KAAK+T,0B,GAjRF1T,aA0RJkD,Q,mLC9RTyS,E,kDACF,WAAY9hB,GAAQ,IAAD,8BACf,cAAMA,IAEDqM,MAAQ,CACT0V,YAAa,GACbC,iBAAkB,GAClBxV,UAAW,GACXkC,gBAAiB,EACjBE,qBAAsB,EACtBE,YAAa,EACbE,aAAc,EACdL,aAAc,GACdE,kBAAmB,GACnBE,SAAU,GACVE,UAAW,GACXgT,KAAM,SACNC,eAAgB,IAGpB,EAAKC,aAAe,EAAKA,aAAaxW,KAAlB,gBACpB,EAAKmB,YAAc,EAAKA,YAAYnB,KAAjB,gBACnB,EAAKyW,kBAAoB,EAAKA,kBAAkBzW,KAAvB,gBACzB,EAAK0W,uBAAyB,EAAKA,uBAAuB1W,KAA5B,gBAC9B,EAAK2W,eAAiB,EAAKA,eAAe3W,KAApB,gBACtB,EAAK4W,oBAAsB,EAAKA,oBAAoB5W,KAAzB,gBAC3B,EAAK6W,cAAgB,EAAKA,cAAc7W,KAAnB,gBACrB,EAAK8W,WAAa,EAAKA,WAAW9W,KAAhB,gBA1BH,E,qDA6BnB,SAAkBuC,GACdpC,KAAKiB,SAAS,CACV2B,gBAAiBR,M,oCAIzB,SAAuBA,GACnBpC,KAAKiB,SAAS,CACV6B,qBAAsBV,M,4BAI9B,SAAepD,GACXgB,KAAKiB,SAAS,CACV4B,aAAc7D,M,iCAItB,SAAoBA,GAChBgB,KAAKiB,SAAS,CACV8B,kBAAmB/D,M,2BAI3B,SAAcoD,GACVpC,KAAKiB,SAAS,CACV+B,YAAaZ,M,wBAIrB,SAAWpD,GACPgB,KAAKiB,SAAS,CACVgC,SAAUjE,M,4BAIlB,SAAeoD,GACXpC,KAAKiB,SAAS,CACViC,aAAcd,M,yBAItB,SAAYpD,GACRgB,KAAKiB,SAAS,CACVkC,UAAWnE,M,iEAInB,WAAmBwB,EAAaC,EAAkBC,GAAlD,sGAAAQ,EAAA,6DACQ+U,EAAc,IAAIvE,IAClBwE,EAAmB,IAAIxE,IAF/B,kBAKYuE,EAAYT,KAAKhV,GAL7B,uBAMY0V,EAAiBV,KAAK/U,GANlC,8DAQMT,KAAKiB,SAAS,CACZmV,eAAgB,KAAEQ,UAT1B,8BAcQX,EAAYja,QAAUka,EAAiBla,OAASia,EAAYha,SAAWia,EAAiBja,QAAUga,EAAYlR,QAAUmR,EAAiBnR,MAdjJ,wBAeM/E,KAAKiB,SAAS,CACZmV,eAAgB,qFAhBxB,kCAqBIpW,KAAKiB,SAAS,CACVkV,KAAM,SACNzV,UAAWA,EACXuV,YAAaA,EACbC,iBAAkBA,EAClBpT,qBAAsB,EACtBF,gBAAiB,EACjBI,YAAa,EACbD,kBAAmB,GACnBF,aAAc,GACdI,SAAU,KA/BlB,UAmCUgT,EAAYY,OAAO7W,KAAKwW,eAAgBxW,KAAKsW,mBAnCvD,yBAoCUJ,EAAiBW,OAAO7W,KAAKyW,oBAAqBzW,KAAKuW,wBApCjE,QA4CI,IAPMO,EAAU,SAACC,EAAaC,GAAd,OAA+B7O,KAAK6H,IAAI+G,EAAaC,IACjEvB,EAAkBS,EAAiB9W,OAAO6X,OAAOH,GAEjDI,EAAW,GACXC,EAAU,GACV/U,EAAW,IAAIhM,MAAMqf,EAAgB,GA1C7C,WA4Ca9e,GACL,IAAMoD,EAASpD,EACT8b,EAAa,SAAC2E,GAChBhV,EAASrI,GAAc,IAAJqd,EACnB,EAAKV,cAActU,EAAS6U,QAAO,SAAC/V,EAAGmW,GAAJ,OAAUnW,EAAImW,IAAG,IAAM5B,EAAkB,KAEhFyB,EAAStb,KAAK,IAAIwC,SAAQ,SAASC,EAASC,GACxC,IAAMoU,EAAS,IAAIC,OAAO,EAA4B,CAClD3a,KAAM,aACNZ,UAAKA,IAET+f,EAAQvb,KAAK8W,GAGbrU,EAFYwU,IAAaH,EACZ1d,CAAIkhB,EAAkBxV,EAAW3G,EAAQ8Y,IAAcJ,UAbnE9b,EAAI,EAAGA,EAAI8e,EAAgB,IAAK9e,EAAI,EAApCA,GAmBL3B,EAAM,GACD2B,EAAI,EAhEjB,aAgEoBA,EAAIugB,EAAS3gB,QAhEjC,6BAiEQvB,EAjER,UAiEuBkiB,EAASvgB,GAjEhC,yBAiEYiF,KAjEZ,0BAgE2CjF,EAhE3C,wBAmEI,IAASA,EAAI,EAAGA,EAAIwgB,EAAQ5gB,SAAUI,EAClCwgB,EAAQxgB,GAAGmc,YApEnB,OAsEI9S,KAAK0W,cAAc,KAEbhE,EAAS,IAAIC,OAAO,EAA6B,CACnD3a,KAAM,cACNZ,UAAKA,IAEHjC,EAAY0d,IAAaH,GACzBD,EAAa,SAAC2E,GAChB,EAAKE,eAAmB,IAAJF,IA9E5B,UAgFqBjiB,EAAUH,EAAI,GAAI,CAACihB,EAAYja,MAAOia,EAAYha,OAAQga,EAAYlR,OAAQrE,EAAWmS,IAAcJ,IAhF5H,QAyFI,IATIyB,EAhFR,OAmFQ9E,EAAU,GACVC,EAAI4G,EAAYja,MAChBsT,EAAI2G,EAAYha,OAChBsT,EAAI0G,EAAYlR,MAEhBwS,EAAS,IAAIlY,WAAWgQ,EAAEC,EAAEC,GACvB5Y,EAAI,EAAGA,EAAI0Y,IAAK1Y,EACrB,IAASE,EAAI,EAAGA,EAAIyY,IAAKzY,EACrB,IAAS2gB,EAAI,EAAGA,EAAIjI,IAAKiI,EACrBD,EAAOC,EAAEnI,EAAEC,EAAEzY,EAAEwY,EAAE1Y,GAAKsf,EAAY7W,OAAOoY,EAAEnI,EAAEC,EAAEzY,EAAEwY,EAAE1Y,GAI/DyY,EAAQxT,KAAK2b,GAhGjB,QA4GQ,IATIE,EAAKpI,EACLqI,EAAKpI,EACLqI,EAAKpI,EACTF,EAAIlH,KAAKwH,KAAKN,EAAI,GAClBC,EAAInH,KAAKwH,KAAKL,EAAI,GAClBC,EAAIpH,KAAKwH,KAAKJ,EAAI,GAEdqI,EAASxI,EAAQA,EAAQ7Y,OAAS,GAClCshB,EAAQ,IAAIxY,WAAWgQ,EAAEC,EAAEC,GACtBuI,EAAK,EAAGA,EAAKL,IAAMK,EACxB,IAASC,EAAK,EAAGA,EAAKL,IAAMK,EACxB,IAASC,EAAK,EAAGA,EAAKL,IAAMK,EACpBrhB,EAAIwR,KAAK8P,MAAMH,EAAG,GAClBjhB,EAAIsR,KAAK8P,MAAMF,EAAG,GAClBP,EAAIrP,KAAK8P,MAAMD,EAAG,GACtBH,EAAML,EAAEnI,EAAEC,EAAEzY,EAAEwY,EAAE1Y,GAAKwR,KAAK6H,IAAI6H,EAAML,EAAEnI,EAAEC,EAAEzY,EAAEwY,EAAE1Y,GAAIihB,EAAOI,EAAGP,EAAGC,EAAGK,EAAGN,EAAGK,IAlH5F,GAsHQ1I,EAAQxT,KAAKic,KAETxI,GAAK,GAAKC,GAAK,GAAKC,GAAK,GAxHrC,6EAmII,IAPiB,EAEX2I,EAAS9hB,MAAMC,KAAKD,MAAM,KAAD,IAAC,EAFf,IAE4BI,KAAK,IAAI,kBAAM,IAAIJ,MAAJ,SAAU,EAFrD,IAEkEI,KAAK,MAClFqB,EAAOzB,MAAMC,KAAKD,MAAM,KAAD,IAAC,EAHb,IAG0BI,KAAK,IAAI,kBAAM,IAAIJ,MAAJ,SAAU,EAHnD,IAGgEI,KAAK,MAEhF4d,EAAkBhe,MAAMqf,GAAiBjf,KAAK,GAC9C2hB,EAAkB/hB,MAAMqf,GAAiBjf,KAAK,GAC3CG,EAAI,EAAGA,EAAI3B,EAAI,GAAGgB,KAAKO,SAAUI,EACtCuhB,EAAOhE,EAAKle,KAAKW,IAAI3B,EAAI,GAAGgB,KAAKW,KAAOsf,EAAY7W,OAAOzI,GAC3DkB,EAAKqc,EAAKle,KAAKW,IAAI3B,EAAI,GAAGgB,KAAKW,KAAO,EAClCuf,EAAiB9W,OAAOzI,GAAK,IAC7Byd,EAAgB8B,EAAiB9W,OAAOzI,GAAG,IAAMsf,EAAY7W,OAAOzI,GACpEwhB,EAAgBjC,EAAiB9W,OAAOzI,GAAG,IAAM,GAIzD,IAASA,EAAI,EAAGA,EAAI8e,IAAmB9e,EACnCyd,EAAgBzd,IAAMwhB,EAAgBxhB,GAG1CqJ,KAAKiB,SAAS,CACVkV,KAAM,WAGVnW,KAAK9L,MAAMkhB,WAAWpgB,EAAKoa,EAAS8E,EAAM,CAAC+B,EAAYja,MAAOia,EAAYha,OAAQga,EAAYlR,OACxE,CAACqT,WAAW1X,EAAUjK,GAAI2hB,WAAW1X,EAAUhK,GAAI0hB,WAAW1X,EAAUvJ,IAAK+gB,EAAQrgB,EAAMuc,GArJrH,yD,oFAwJA,WACIpU,KAAK9L,MAAMihB,Y,oBAGf,WACI,OACI,qCACI,cAAC,IAAD,CACIzT,KAA0B,WAApB1B,KAAKO,MAAM4V,MAAqBnW,KAAK9L,MAAMwN,KACjD1C,MAAOgB,KAAKO,MAAM6V,eAClBjV,SAAUnB,KAAKqW,aACfjV,QAASpB,KAAKgB,cAElB,cAAC,IAAD,CACIU,KAA0B,WAApB1B,KAAKO,MAAM4V,MAAqBnW,KAAK9L,MAAMwN,KACjDkB,gBAAiB5C,KAAKO,MAAMqC,gBAC5BE,qBAAsB9C,KAAKO,MAAMuC,qBACjCE,YAAahD,KAAKO,MAAMyC,YACxBE,aAAclD,KAAKO,MAAM2C,aACzBL,aAAc7C,KAAKO,MAAMsC,aACzBE,kBAAmB/C,KAAKO,MAAMwC,kBAC9BE,SAAUjD,KAAKO,MAAM0C,SACrBE,UAAWnD,KAAKO,MAAM4C,mB,GA5PrB9C,aAmQN2V,Q,gICtQTqC,E,4JACL,WACC,IAAIC,EAGJ,OAF2BA,EAAvBtY,KAAK9L,MAAM6e,WAA6B,qBACtB,uBAErB,eAAC,IAAD,CACCvZ,MAAO,CAACC,WAAY,QADrB,UAGA,eAAC,IAAD,CACCtF,UAAU,OADX,UAGC,cAAC,IAAD,CACCqE,QAASwH,KAAK9L,MAAMqhB,gBADrB,SAEC,mBAAGphB,UAAU,eACd,cAAC,IAAD,CACCqE,QAASwH,KAAK9L,MAAMmhB,aADrB,4BAID,cAAC,IAAD,CACClhB,UAAU,OADX,SAGC,cAAC,IAAD,CACCqE,QAASwH,KAAK9L,MAAMohB,mBADrB,SAEC,mBAAGnhB,UAAWmkB,e,GAxBGjY,aA+BPgY,O,gCCrCf,kEAkHeE,IAzGC,SAAArkB,GA8BZ,IA5BA,IAAMskB,EAAyB,SAACrH,GAC5Bjd,EAAMwhB,uBAAuBvE,IAuB7BsH,EAAgB,CACpB,cAAC,IAASlgB,KAAV,CACIC,QAAS,kBAAMggB,EAAuB,IAD1C,+BA3BqB,aA+BjB,IAAIrH,EAAQxa,EACZ8hB,EAAc7c,KACd,eAAC,IAASrD,KAAV,CACIC,QAAS,kBAAMggB,EAAuBrH,EAAM,IADhD,yBAEcA,EAAM,OALfxa,EAAI,EAAGA,EAAIzC,EAAMuhB,gBAAgB,IAAK9e,EAAI,IAQnD,IAAI+hB,EAAe,GAInB,OAHiCA,EAAH,IAA1BxkB,EAAMuhB,gBAAsC,sBACnB,IAApBvhB,EAAMoT,UAAgC,mBAC3B,eAAiBpT,EAAMoT,UAEvC,cAAC,IAAD,CACIqR,GAAI,EACJxkB,UAAU,sBAFd,SAII,cAAC,IAAD,UACI,cAAC,IAAD,CAAUykB,GAAI1kB,EAAMshB,KAApB,SACI,cAAC,IAAD,UACI,cAAC,IAAKzT,KAAN,UACI,eAAC,IAAD,WACI,eAAC,IAAK8W,MAAN,CAAY1kB,UAAU,cAAtB,UACI,cAAC,IAAK0kB,MAAMC,MAAZ,CACIC,QAAS7kB,EAAMmB,eACfyI,SAAkC,IAAxB5J,EAAMuhB,gBAChB5b,SA9CD,SAACF,GAChCzF,EAAM0hB,iBAAiBjc,EAAEI,OAAOgf,YA+CJ,cAAC,IAAKF,MAAM5W,MAAZ,iCAEJ,eAAC,IAAK4W,MAAN,CAAY1kB,UAAU,cAAtB,UACI,cAAC,IAAK0kB,MAAMC,MAAZ,CACIC,QAAS7kB,EAAMoB,oBACfwI,SAAkC,IAAxB5J,EAAMuhB,gBAChB5b,SA1DI,SAACF,GACrCzF,EAAMyhB,sBAAsBhc,EAAEI,OAAOgf,YA2DT,cAAC,IAAKF,MAAM5W,MAAZ,sCAEJ,cAAC,IAAK+W,MAAN,CACIlb,SAAkC,IAAxB5J,EAAMuhB,gBAChB5b,SAhDH,SAACF,GAC1BzF,EAAM6hB,WAAWpc,EAAEI,OAAOb,UAiDF,eAAC,IAAD,WACI,cAAC,IAASb,OAAV,CAAiByF,SAAkC,IAAxB5J,EAAMuhB,gBAAjC,SACKiD,IAGL,cAAC,IAASpgB,KAAV,UACKmgB,OA3Bb,gBA+BI,eAAC,IAAKI,MAAN,CAAY1kB,UAAU,cAAtB,UACI,cAAC,IAAK0kB,MAAMC,MAAZ,CACIC,QAAS7kB,EAAMsB,aACfqE,SAvEH,SAACF,GAC9BzF,EAAM2hB,eAAelc,EAAEI,OAAOgf,YAwEF,cAAC,IAAKF,MAAM5W,MAAZ,yCAEJ,eAAC,IAAK4W,MAAN,CAAY1kB,UAAU,cAAtB,UACI,cAAC,IAAK0kB,MAAMC,MAAZ,CACIC,QAAS7kB,EAAMuB,OACfoE,SA1ET,SAACF,GACxBzF,EAAM4hB,SAASnc,EAAEI,OAAOgf,YA2EI,cAAC,IAAKF,MAAM5W,MAAZ,yC","file":"static/js/main.91b64545.chunk.js","sourcesContent":["const Overlay = (props) => {\n    return <div className=\"overlay fill-screen d-grid gap-3\">\n        {props.children}\n    </div>\n}\n\nexport default Overlay","import React, { useRef, useEffect } from 'react'\n\nimport * as Renderer from '../renderers/renderer.js'\n\nconst Canvas = props => {\n\tconst canvasRef = useRef(null)\n\n\tuseEffect(() => {\n\t\tRenderer.setOnProjectionUpdated(props.onProjectionUpdated);\n\t}, [props.onProjectionUpdated])\n\n\tuseEffect(() => {\n\t\tRenderer.setOnSelectionDone(props.onSelectionDone);\n\t}, [props.onSelectionDone])\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.main(canvasRef.current, props.mainView, props.mapView);\n\t\t}\n\t}, [props.mainView, props.mapView, props.ready])\n\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDistanceFieldData(props.sdf, props.volumeDims);\n\t\t}\n\t}, [props.sdf, props.mainView, props.mapView, props.ready, props.volumeDims])\n\t\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setProteinData(props.protein, props.volumeDims);\n\t\t}\n\t}, [props.protein, props.mainView, props.mapView, props.ready, props.volumeDims])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setCurvatureData(props.curvature, props.volumeDims);\n\t\t}\n\t}, [props.curvature, props.mainView, props.mapView, props.ready, props.volumeDims])\n\n\t\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setVolumeSize(props.volumeSize);\n\t\t}\n\t}, [props.volumeSize, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDisplayProtein(props.displayProtein);\n\t\t}\n\t}, [props.displayProtein, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDisplayCompartment(props.displaySegmentation);\n\t\t}\n\t}, [props.displaySegmentation, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setCompartmentIndex(props.compartmentIndex);\n\t\t}\n\t}, [props.compartmentIndex, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setDebugSamples(props.debugSamples);\n\t\t}\t\n\t}, [props.debugSamples, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setUseLod(props.useLod);\n\t\t}\n\t}, [props.useLod, props.mainView, props.mapView, props.ready])\n\n\tuseEffect(() => {\n\t\tif (props.ready && props.mainView && props.mapView) {\n\t\t\tRenderer.setIsovalue(props.isovalue);\n\t\t}\n\t}, [props.isovalue, props.mainView, props.mapView, props.ready])\n\n\treturn (\n\t\t<canvas className=\"renderer\" ref={canvasRef}/>\n\t);\n}\n\nexport default Canvas","import React, { useState } from 'react';\nimport Plot from 'react-plotly.js';\n\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nconst Plots = props => {\n    const [page, setPage] = useState(\"heatmap\");\n    \n    let data = {};\n    let layout = {};\n\n    let dropdownToggleString = \"\";\n    if (page === \"heatmap\") {\n        dropdownToggleString = \"Heatmap\"\n\n        const heat = Array.from(Array(props.heatmap.length).fill(0), () => new Array(props.heatmap.length).fill(0));\n        const x = new Array(props.heatmap.length);\n        const y = new Array(props.heatmap[0].length);\n        for (let i = 0; i < heat.length; ++i) {\n            x[i] = i / 255.0 * (props.heataxes[0][1] - props.heataxes[0][0]) + props.heataxes[0][0];\n            y[i] = i / 255.0 * (props.heataxes[1][1] - props.heataxes[1][0]) + props.heataxes[1][0];\n            for (let j = 0; j < heat.length; ++j) {\n                if (props.heatarea[i][j] === 0) heat[i][j] = 0.0;\n                else heat[i][j] = props.heatmap[i][j] / props.heatarea[i][j];\n            }\n        }\n\n        const localHeat = Array.from(Array(props.localHeatmap.length).fill(0), () => new Array(props.localHeatmap.length).fill(0));\n\n        let localData;\n        let totalArea = 0.0;\n        for (let i = 0; i < localHeat.length; ++i) {\n            for (let j = 0; j < localHeat.length; ++j) {\n                totalArea += props.localHeatarea[i][j];\n                if (props.localHeatarea[i][j] === 0) localHeat[i][j] = 0.0;\n                else localHeat[i][j] = props.localHeatmap[i][j] / props.localHeatarea[i][j];\n            }\n        }\n\n        if (totalArea > 0) {\n            localData = {\n                x: x,\n                y: y,\n                z: localHeat,\n                type: 'heatmap',\n                colorscale: [ // Modified magma from https://github.com/plotly/plotly.py/blob/master/packages/python/plotly/_plotly_utils/colors/sequential.py\n                    [0.0, \"#26828e00\"],\n                    [0.0001, \"#26828eff\"],\n                    [0.2, \"#1f9e89ff\"],\n                    [0.4, \"#35b779ff\"],\n                    [0.6, \"#6ece58ff\"],\n                    [0.8, \"#b5de2bff\"],\n                    [1.0, \"#fde725ff\"]\n                ],\n                colorbar: {\n                    title: \"Local Protein count/voxel\",\n                    titleside: 'right',\n                    x: \"1.2\"\n                }\n            }\n        } else {\n            localData = {}\n        }\n\n        data = [\n            {\n                x: x,\n                y: y,\n                z: heat,\n                type: 'heatmap',\n                colorscale: 'Hot',\n                colorbar: {\n                    title: \"Protein count/voxel\",\n                    titleside: 'right'\n                }\n            },\n            localData\n        ];\n\n        layout = {\n            title: 'Protein Heatmap',\n            xaxis: {\n                title: {\n                    text: 'Distance',\n                },\n            },\n            yaxis: {\n                title: {\n                    text: 'Mean Curvature'\n                }\n            }\n        };\n        \n    } else if (page === \"distance\") {\n        dropdownToggleString = \"Distance Histogram\"\n\n        const global = new Array(256);\n        \n        for (let i = 0; i < 256; ++i) {\n            let area = 0.0;\n            let count = 0.0;\n            for (let j = 0; j < 256; ++j) {\n                count += props.heatmap[j][i];\n                area += props.heatarea[j][i];\n            }\n            global[i] = count/area;\n        }\n        \n        const local = new Array(256);\n        if (props.localHeatmap.length !== 0) {\n            for (let i = 0; i < 256; ++i) {\n                let area = 0.0;\n                let count = 0.0;\n                for (let j = 0; j < 256; ++j) {\n                    count += props.localHeatmap[j][i];\n                    area += props.localHeatarea[j][i];\n                }\n                local[i] = count/area;\n            }\n        }\n\n        const x = new Array(props.heatmap.length);\n        for (let i = 0; i < props.heatmap.length; ++i) {\n            x[i] = i / 255.0 * (props.heataxes[0][1] - props.heataxes[0][0]) + props.heataxes[0][0];\n        }\n\n        data = [\n            {\n                x: x,\n                y: global,\n                type: 'bar',\n                name: 'Global'\n            },\n            {\n                x: x,\n                y: local,\n                type: 'bar',\n                name: 'Selection'\n            }\n        ];\n\n        layout = {\n            title: 'Distance Histogram',\n            xaxis: {\n                title: {\n                    text: 'Distance',\n                },\n            },\n            yaxis: {\n                title: {\n                    text: 'Protein count/voxel'\n                }\n            }\n        };\n    } else if (page === \"curvature\") {\n        dropdownToggleString = \"Curvature Histogram\"\n\n        const global = new Array(256);\n        \n        for (let i = 0; i < 256; ++i) {\n            let area = 0.0;\n            let count = 0.0;\n            for (let j = 0; j < 256; ++j) {\n                count += props.heatmap[i][j];\n                area += props.heatarea[i][j];\n            }\n            global[i] = count/area;\n        }\n        \n        const local = new Array(256);\n        if (props.localHeatmap.length !== 0) {\n            for (let i = 0; i < 256; ++i) {\n                let area = 0.0;\n                let count = 0.0;\n                for (let j = 0; j < 256; ++j) {\n                    count += props.localHeatmap[i][j];\n                    area += props.localHeatarea[i][j];\n                }\n                local[i] = count/area;\n            }\n        }\n\n        const x = new Array(props.heatmap.length);\n        for (let i = 0; i < props.heatmap.length; ++i) {\n            x[i] = i / 255.0 * (props.heataxes[1][1] - props.heataxes[1][0]) + props.heataxes[1][0];\n        }\n\n        data = [\n            {\n                x: x,\n                y: global,\n                type: 'bar',\n                name: 'Global'\n            },\n            {\n                x: x,\n                y: local,\n                type: 'bar',\n                name: 'Selection'\n            }\n        ];\n\n        layout = {\n            title: 'Mean Curvature Histogram',\n            xaxis: {\n                title: {\n                    text: 'Mean Curvature',\n                },\n            },\n            yaxis: {\n                title: {\n                    text: 'Protein count/voxel'\n                }\n            }\n        };\n    } else if (page === \"compartments\") {\n        dropdownToggleString = \"Compartments\"\n\n        const x = Array(props.compartmentHistogram.length);\n        for (let i = 0; i < x.length; ++i) {\n            x[i] = \"Compartment \" + (i+1);\n        }\n\n        data = [\n            {\n                x: x,\n                y: props.compartmentHistogram,\n                type: 'bar',\n                name: 'Global'\n            }\n        ];\n\n        layout = {\n            title: 'Protein Density per Compartment',\n            xaxis: {\n                title: {\n                    text: 'Compartment',\n                },\n            },\n            yaxis: {\n                title: {\n                    text: 'Protein count/voxel'\n                }\n            }\n        };\n    }\n\n    return (\n        <>\n            <Plot\n                data={data}\n                layout={layout}\n                config={{ responsive: true }}\n            />\n            <div className=\"stack overlay\">\n                <Dropdown\n                    className=\"pointer-events\"\n                >\n                    <Dropdown.Toggle>\n                        {dropdownToggleString}\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu>\n                        <Dropdown.Item\n                            onClick={() => { setPage(\"heatmap\") }}\n                        >\n                            Distance/Curvature Heatmap\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            onClick={() => { setPage(\"distance\") }}\n                        >\n                            Distance Histogram\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            onClick={() => { setPage(\"curvature\") }}\n                        >\n                            Curvature Histogram\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            onClick={() => { setPage(\"compartments\") }}\n                        >\n                            Compartments\n                        </Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </div>\n        </>\n    )\n};\n\nexport default Plots;","import React, { useEffect, useRef, useState } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nconst MapTools = props => {\n    const labelRef = useRef();\n\n    const [edit, setEdit] = useState(false);\n    const [editText, setEditText] = useState(\"\");\n    const [blockBlur, setBlockBlur] = useState(false); // Block onBlur when mouse is over the label button.\n\n    useEffect(() => {\n        if (labelRef.current && edit) {\n            labelRef.current.focus();\n            labelRef.current.value = editText;\n        }\n    }, [edit, editText, labelRef])\n\n    const handleBlur = () => {\n        if (!blockBlur) {\n            handleEdit(false);\n        }\n    }\n\n    const handleClickEdit = () => {\n        handleEdit(!edit);\n    }\n\n    const handleEdit = (doEdit) => {;\n        setEdit(doEdit);\n        setEditText(props.label);\n    }\n\n    const handleChange = (e) => {\n        props.onLabel(e.target.value);\n    }\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleEdit(false);\n        }\n    }\n\n    let buttonOrForm;\n    if (edit === true) {\n        buttonOrForm = <FormControl\n            style={{marginLeft: \"auto\"}}\n            onKeyPress={handleKeyPress}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            ref={labelRef}\n        />\n    } else {\n        buttonOrForm = <Button\n                            style={{marginLeft: \"auto\"}}\n                            onClick={props.onClick}\n                        >{props.label}</Button>\n    }\n\n    return(\n        <InputGroup\n            className=\"pointer-events\"\n        >\n        {buttonOrForm}\n        <Button\n            onClick={handleClickEdit}\n            onMouseEnter={() => setBlockBlur(true)} // This is needed to re-enable the button\n            onMouseLeave={() => setBlockBlur(false)}\n        ><i className=\"bi-tag-fill\"></i></Button>\n        <Button\n            onClick={props.onExport}\n        ><i className=\"bi-download\"></i></Button>\n        <Button\n            onClick={props.onDelete}\n        ><i className=\"bi-trash-fill\"></i></Button>\n        </InputGroup>\n    );\n}\n\nexport default MapTools","import React, { useState, useEffect } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nimport StoreItem from './StoreItem';\n\nimport * as Renderer from '../renderers/renderer.js'\nimport localforage from 'localforage';\n\nimport * as UPNG from 'upng-js';\n\nimport { v4 as uuid } from 'uuid';\n\nconst dbName = 'selectionStore';\n\n// Create table 2 in databaseName\nvar storeData = localforage.createInstance({\n    name        : dbName,\n    storeName   : 'storeData',\n    description : '...'\n});\n\nconst MapTools = props => {\n\n    const [penSize, setPenSize] = useState(20);\n    const [penMode, setPenMode] = useState(\"draw\");\n    const [uuids, setUuids] = useState([]);\n\n    useEffect(() => {\n        reloadStore();\n    }, []);\n\n    const handleDelete = () => {\n        Renderer.deleteSelection();\n    };\n\n    const handlePenMode = (mode) => {\n        setPenMode(mode);\n        Renderer.setPenMode(mode);\n    }\n\n    const handlePenSize = (pt) => {\n        setPenSize(pt);\n        Renderer.setPenSize(pt);\n    };\n\n    const reloadStore = () => {\n        let list = {};\n        storeData.iterate(function(value, key, iterationNumber) {\n            list[key] = value.name;\n        }).then(() => {setUuids(list)})\n    }\n\n    const handleLoad = (uuid) => {\n        storeData.getItem(uuid).then((value) => {\n            Renderer.setMapSelectionPixels(value.data, value.width, value.height);\n        })\n    }\n\n    const handleDeleteStore = (uuid) => {\n        storeData.removeItem(uuid).then(reloadStore);\n    }\n\n    const handleSave = () => {\n        const selectionPixels = Renderer.getMapSelectionPixels();\n        storeData.setItem(uuid(), {name: \"New Selection\", \n                                   width: selectionPixels.width,\n                                   height: selectionPixels.height,\n                                   data: selectionPixels.buffer}).then(reloadStore);\n    }\n\n    const handleImport = () => {\n        let input = document.createElement('input');\n        input.type = 'file';\n\n        input.onchange = e => { \n            var file = e.target.files[0]; \n            new Promise(function(resolve, reject) {\n                var reader = new FileReader();\n                reader.readAsArrayBuffer(file)\n            \n                reader.onload = readerEvent => {\n                    resolve([readerEvent.target.result, file.name.replace('.png','')]);\n                }\n        \n                reader.onerror = _readerEvent => {\n                    reject(reader.error);\n                }\n        \n                reader.onabort = _readerEvent => {\n                    reject(\"FileReader was aborted!\");\n                }\n            }).then(([buffer, filename]) => {\n                let img = UPNG.decode(buffer);\n                let pixels = new Uint8Array(UPNG.toRGBA8(img)[0]);\n                storeData.setItem(uuid(), {name: filename, \n                    width: img.width,\n                    height: img.height,\n                    data: pixels}).then(reloadStore);\n            })\n        }\n\n        input.click();\n    }\n\n    const handleLabelStore = (uuid, label) => {\n        storeData.getItem(uuid).then((item) => {\n            item.name = label;\n            storeData.setItem(uuid, item).then(reloadStore);\n        })\n    }\n\n    const handleExportStore = (uuid) => {\n        storeData.getItem(uuid).then((item) => {\n            let png = UPNG.encode([item.data.buffer], item.width, item.height, 0)\n            let blob = new Blob([png], {type: \"image/png\"});\n            let url = URL.createObjectURL(blob); \n            let fileLink = document.createElement('a');\n            fileLink.href = url;\n            fileLink.download = item.name;\n            fileLink.click();\n        })\n    }\n    \n    let storeList = []\n    for (const [key, value] of Object.entries(uuids)) {\n        storeList.push(\n            <StoreItem\n                label={value}\n                onClick={() => handleLoad(key)}\n                onDelete={()=> handleDeleteStore(key)}\n                onLabel={(label) => handleLabelStore(key, label)}\n                onExport={() => handleExportStore(key)}\n            />\n        )\n    }\n\n    return(\n        <div className=\"stack no-pointer-events\" style={{position: \"relative\"}}>\n            <div className=\"overlay d-flex flex-column-reverse\" style={{overflowY: \"overlay\", height: \"80%\", right: 0, bottom: 0}}>\n                <div className=\"align-self-end d-grid gap-2\">\n                {storeList}\n                </div>\n            </div>\n            <div  className=\"overlay\">\n            <ButtonToolbar style={{flexDirection: \"column\", width: \"20pt\"}}>\n            <ButtonGroup vertical>\n                <Button\n                    onClick={handleDelete}\n                ><i className=\"bi-trash-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                <Button\n                    disabled={penMode===\"draw\"}\n                    onClick={() => {handlePenMode(\"draw\")}}\n                ><i className=\"bi-pencil-fill\"></i></Button>\n                <Button\n                    disabled={penMode===\"erase\"}\n                    onClick={() => {handlePenMode(\"erase\")}}\n                ><i className=\"bi-eraser-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                <Button\n                    disabled={penSize===40}\n                    onClick={() => {handlePenSize(40)}}\n                ><i style={{\"fontSize\": \"8pt\"}} className=\"bi-circle-fill\"></i></Button>\n                <Button\n                    disabled={penSize===20}\n                    onClick={() => {handlePenSize(20)}}\n                ><i style={{\"fontSize\": \"6pt\"}} className=\"bi-circle-fill\"></i></Button>\n                <Button\n                    disabled={penSize===10}\n                    onClick={() => {handlePenSize(10)}}\n                ><i style={{\"fontSize\": \"4pt\"}} className=\"bi-circle-fill\"></i></Button>\n            </ButtonGroup>\n            <br />\n            <ButtonGroup vertical>\n                    <Button\n                        onClick={handleSave}\n                    ><i className=\"fas fa-save\"></i></Button>\n                    <Button\n                        onClick={handleImport}\n                    ><i className=\"bi-upload\"></i></Button>\n            </ButtonGroup>\n            </ButtonToolbar>\n            </div>\n        </div>\n    );\n}\n\nexport default MapTools","import React, { useRef, useEffect } from 'react'\n\nimport Plots from './Plots'\nimport MapTools from './MapTools'\n\nconst Views = props => {\n    const mainRef = useRef(null);\n    const mapRef = useRef(null);\n\n    const onMainView = props.onMainView;\n    const onMapView = props.onMapView;\n\n    useEffect(() => {\n        onMainView(mainRef.current);\n        onMapView(mapRef.current);\n    }, [onMainView, onMapView]);\n\n    return(\n        <>\n        <div className=\"views d-flex flex-col\">\n            <div className=\"flex-fill d-flex flex-row\">\n                <div className=\"flex-fill stack-base\">\n                    <div className=\"stack\" ref={mapRef}></div>\n                    <MapTools />\n                </div>\n                <div className=\"v-divider\"></div>\n                <div className=\"flex-fill d-flex flex-column\">\n                    <div className=\"flex-fill stack-base\">\n                        <div className=\"stack\"ref={mainRef}></div>\n                    </div>\n                    <div className=\"h-divider\"></div>\n                    <div className=\"flex-fill stack-base\">\n                        <Plots\n                            heataxes={props.heataxes}\n                            heatmap={props.heatmap}\n                            heatarea={props.heatarea}\n                            compartmentHistogram={props.compartmentHistogram}\n                            localHeatmap={props.localHeatmap}\n                            localHeatarea={props.localHeatarea}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n        </>\n    );\n}\n\nexport default Views","import React, {Component} from 'react'\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nclass InputVector extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t\n        this.handleChangeX = this.handleChangeX.bind(this);\n        this.handleChangeY = this.handleChangeY.bind(this);\n        this.handleChangeZ = this.handleChangeZ.bind(this);\n\t}\n\n    handleChangeX(e) {\n        this.props.onChange({\n            x: e.target.value,\n            y: this.props.value.y,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeY(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: e.target.value,\n            z: this.props.value.z\n        });\n    }\n\n    handleChangeZ(e) {\n        this.props.onChange({\n            x: this.props.value.x,\n            y: this.props.value.y,\n            z: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Text>Voxel Size</InputGroup.Text>\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"x\"\n                    value={this.props.value.x}\n                    onChange={this.handleChangeX}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"y\"\n                    value={this.props.value.y}\n                    onChange={this.handleChangeY}\n                />\n                <Form.Control\n                    type=\"number\"\n                    placeholder=\"z\"\n                    value={this.props.value.z}\n                    onChange={this.handleChangeZ}\n                />\n            </InputGroup>\n        )\n    }\n}\n\nexport default InputVector","import React, {Component} from 'react'\n\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\nimport InputVector from './InputVector'\n\nclass ImportDialog extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\n    this.state = {\n      fileProtein: \"\",\n      fileSegmentation: \"\",\n      voxelSize: {x: \"\", y: \"\", z: \"\"},\n      working: false\n    }\n\n    this.handleClickImport = this.handleClickImport.bind(this);\n\n    this.handleChangeFileProtein = this.handleChangeFileProtein.bind(this);\n    this.handleChangeFileSegmentation = this.handleChangeFileSegmentation.bind(this);\n    this.handleChangeVoxelSize = this.handleChangeVoxelSize.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\t}\n\n  handleChangeFileProtein(e) {\n    this.setState({\n      fileProtein: e.target.files[0]\n    })\n  }\n\n  handleChangeFileSegmentation(e) {\n    this.setState({\n      fileSegmentation: e.target.files[0]\n    })\n  }\n\n  handleChangeVoxelSize(value) {\n    this.setState({\n      voxelSize: value\n    })\n  }\n\n  async handleClickImport(e) {\n    this.setState({\n      working: true\n    })\n\n    this.props.onImport(this.state.fileProtein, this.state.fileSegmentation, this.state.voxelSize);\n\n    this.setState({\n      working: false\n    })\n  }\n\n  handleClose(e) {\n    this.props.onClose();\n  }\n\n  render() {\n    let formValid;\n    if (this.state.fileProtein\n        && this.state.fileSegmentation\n        && this.state.voxelSize.x\n        && this.state.voxelSize.y\n        && this.state.voxelSize.z\n        && !this.state.working) formValid = true;\n    else formValid = false;\n\n    let alert;\n    if (this.props.error) {\n      alert = <Alert variant=\"danger\">{this.props.error}</Alert>\n    }\n\n    return (\n        <Modal show={this.props.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Import Data</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Protein Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileProtein}\n                    />\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Segmentation Data</Form.Label>\n                    <Form.Control\n                      type=\"file\"\n                      onChange={this.handleChangeFileSegmentation}\n                    />\n                </Form.Group>\n                <InputVector\n                  value={this.state.voxelSize}\n                  onChange={this.handleChangeVoxelSize}\n                />\n            </Form>\n            {alert}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              disabled={!formValid}\n              onClick={this.handleClickImport}\n            >\n              Import\n            </Button>\n          </Modal.Footer>\n        </Modal>\n    )\n  }\n}\n\nexport default ImportDialog","import React, {Component} from 'react';\n\nimport \"../App.css\";\n\nimport Alert from 'react-bootstrap/Alert';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nclass LabeledProgressBar extends Component {\n\trender() {\n\t\tlet variant = \"\"\n\t\tif (this.props.progress >= 100) variant = \"success\";\n\t\tif (this.props.error) variant = \"danger\";\n\n\t\tlet animated = (this.props.progress < 100 && !this.props.error);\n\n\t\tlet alert;\n\t\tif (this.props.error) {\n\t\t\talert = <Alert variant=\"danger\">{this.props.error}</Alert>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"labeled-progress-bar\">\n\t\t\t\t<ProgressBar>\n\t\t\t\t\t<div className=\"label-front\" style={{clipPath: `inset(0 ${100-this.props.progress}% 0 0)`}}>{this.props.label}</div>\n\t\t\t\t\t<div className=\"label-back\">{this.props.label}</div>\n\t\t\t\t\t<ProgressBar striped variant={variant} animated={animated} now={this.props.progress} />\n\t\t\t\t</ProgressBar>\n\t\t\t\t{alert}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default LabeledProgressBar;","import React, {Component} from 'react'\n\nimport Modal from 'react-bootstrap/Modal';\n\nimport LabeledProgressBar from './LabeledProgressBar';\n\nclass ImportProgress extends Component {\n\tcomponentDidMount() {\n\n\t}\n  \n\tcomponentWillUnmount() {\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal backdrop=\"static\" show={this.props.show}>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>Importing Data...</Modal.Title>\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Body>\n\t\t\t\t<div className=\"d-grid gap-3\">\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.proteinProgress}\n\t\t\t\t\t\terror={this.props.proteinError}\n\t\t\t\t\t\tlabel=\"Decode Protein TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.segmentationProgress}\n\t\t\t\t\t\terror={this.props.segmentationError}\n\t\t\t\t\t\tlabel=\"Decode Segmentation TIFF...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.sdfProgress}\n\t\t\t\t\t\terror={this.props.sdfError}\n\t\t\t\t\t\tlabel=\"Compute Distance Fields...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LabeledProgressBar \n\t\t\t\t\t\tprogress={this.props.curvProgress}\n\t\t\t\t\t\terror={this.props.curvError}\n\t\t\t\t\t\tlabel=\"Compute Mean Curvature...\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Modal.Body>\n\t\t\t</Modal>\n\t\t)\n\t}\n}\n\nexport default ImportProgress","module.exports = __webpack_public_path__ + \"static/js/local-heatmap-worker.03975bfe.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/sdf-worker.26e3c1b5.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/curv-worker.e7456c99.chunk.worker.js\"","module.exports = __webpack_public_path__ + \"static/js/tiff-worker.a6adfe81.chunk.worker.js\"","module.exports = \"in vec4 position;\\nuniform mat4 modelview;\\nuniform mat4 proj;\\nuniform vec3 cameraPos;\\nout vec3 vOrigin;\\nout vec3 vDirection;\\n\\nvoid main() {\\n    vOrigin = vec3( inverse( modelview ) * vec4( 0.0, 0.0, 0.0, 1.0 ) ).xyz;\\n    vDirection = position.xyz - vOrigin;\\n    gl_Position = proj * modelview * position;\\n}\"","module.exports = \"precision highp float;\\nprecision highp sampler3D;\\n\\nout vec4 FragColor;\\n\\nuniform sampler3D volume0;\\nuniform sampler3D volume1;\\nuniform sampler3D volume2;\\nuniform sampler3D volume3;\\nuniform sampler3D volume4;\\nuniform sampler3D volume5;\\nuniform sampler3D volume6;\\nuniform sampler3D volume7;\\nuniform sampler3D volume8;\\nuniform sampler3D volume9;\\n\\nuniform sampler3D sdf;\\nuniform vec2 sdfRange;\\n\\nuniform sampler3D curvature;\\nuniform vec2 curvatureRange;\\n\\nuniform sampler2D texDepth;\\n\\nuniform sampler2D selection;\\nuniform sampler2D projection;\\n\\nuniform mat4 modelview;\\nuniform mat4 proj;\\n\\nuniform vec3 volumeSize;\\nuniform vec2 resolution;\\n\\nuniform float isovalue;\\n\\nuniform bool displayProtein;\\nuniform bool displayCompartments;\\nuniform bool useLod;\\n\\nuniform bool debugSamples;\\n\\nin vec3 vOrigin;\\nin vec3 vDirection;\\n\\nvec2 rayBoxDst(vec3 bmin, vec3 bmax, vec3 p, vec3 d) {\\n    vec3 t0 = (bmin - p) / d;\\n    vec3 t1 = (bmax - p) / d;\\n    vec3 tmin = min(t0, t1);\\n    vec3 tmax = max(t0, t1);\\n\\n    float dstA = max(max(tmin.x, tmin.y), tmin.z);\\n    float dstB = min(tmax.x, min(tmax.y, tmax.z));\\n\\n    float dstToBox = max(0.0, dstA);\\n    float dstInsideBox = max(0.0, dstB - dstToBox);\\n    return vec2(dstToBox, dstInsideBox);\\n}\\n\\n// https://github.com/kbinani/colormap-shaders/blob/master/shaders/glsl/MATLAB_summer.frag\\nvec3 colormap(float x) {\\n    return vec3(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4);\\n}\\n\\nvec3 matlab_spring(float x) {\\n    return vec3(1.0, clamp(x, 0.0, 1.0), clamp(1.0 - x, 0.0, 1.0));\\n}\\n\\nfloat colormap_red(float x) {\\n\\tif (x < 0.09771832105856419) {\\n\\t\\treturn 7.60263247863246E+02 * x + 1.02931623931624E+02;\\n\\t} else if (x < 0.3017162107441106) {\\n\\t\\treturn (-2.54380938558548E+02 * x + 4.29911571188803E+02) * x + 1.37642085716717E+02;\\n\\t} else if (x < 0.4014205790737471) {\\n\\t\\treturn 8.67103448276151E+01 * x + 2.18034482758611E+02;\\n\\t} else if (x < 0.5019932233215039) {\\n\\t\\treturn -6.15461538461498E+01 * x + 2.77547692307680E+02;\\n\\t} else if (x < 0.5969483882550937) {\\n\\t\\treturn -3.77588522588624E+02 * x + 4.36198819698878E+02;\\n\\t} else if (x < 0.8046060096654594) {\\n\\t\\treturn (-6.51345897546620E+02 * x + 2.09780968434337E+02) * x + 3.17674951640855E+02;\\n\\t} else {\\n\\t\\treturn -3.08431855203590E+02 * x + 3.12956742081421E+02;\\n\\t}\\n}\\n\\nfloat colormap_green(float x) {\\n\\tif (x < 0.09881640500975222) {\\n\\t\\treturn 2.41408547008547E+02 * x + 3.50427350427364E-01;\\n\\t} else if (x < 0.5000816285610199) {\\n\\t\\treturn ((((1.98531871433258E+04 * x - 2.64108262469187E+04) * x + 1.10991785969817E+04) * x - 1.92958444776211E+03) * x + 8.39569642882186E+02) * x - 4.82944517518776E+01;\\n\\t} else if (x < 0.8922355473041534) {\\n\\t\\treturn (((6.16712686949223E+03 * x - 1.59084026055125E+04) * x + 1.45172137257997E+04) * x - 5.80944127411621E+03) * x + 1.12477959061948E+03;\\n\\t} else {\\n\\t\\treturn -5.28313797313699E+02 * x + 5.78459299959206E+02;\\n\\t}\\n}\\n\\nfloat colormap_blue(float x) {\\n\\tif (x < 0.1033699568661857) {\\n\\t\\treturn 1.30256410256410E+02 * x + 3.08518518518519E+01;\\n\\t} else if (x < 0.2037526071071625) {\\n\\t\\treturn 3.38458128078815E+02 * x + 9.33004926108412E+00;\\n\\t} else if (x < 0.2973267734050751) {\\n\\t\\treturn (-1.06345054944861E+02 * x + 5.93327252747168E+02) * x - 3.81852747252658E+01;\\n\\t} else if (x < 0.4029109179973602) {\\n\\t\\treturn 6.68959706959723E+02 * x - 7.00740740740798E+01;\\n\\t} else if (x < 0.5006715489526758) {\\n\\t\\treturn 4.87348695652202E+02 * x + 3.09898550724286E+00;\\n\\t} else if (x < 0.6004396902588283) {\\n\\t\\treturn -6.85799999999829E+01 * x + 2.81436666666663E+02;\\n\\t} else if (x < 0.702576607465744) {\\n\\t\\treturn -1.81331701891043E+02 * x + 3.49137263626287E+02;\\n\\t} else if (x < 0.9010407030582428) {\\n\\t\\treturn (2.06124143164576E+02 * x - 5.78166906665595E+02) * x + 5.26198653917172E+02;\\n\\t} else {\\n\\t\\treturn -7.36990769230737E+02 * x + 8.36652307692262E+02;\\n\\t}\\n}\\n\\nvec3 colormap_RdBu(float x) {\\n    x = clamp(x, 0.0, 1.0);\\n\\tfloat r = clamp(colormap_red(x) / 255.0, 0.0, 1.0);\\n\\tfloat g = clamp(colormap_green(x) / 255.0, 0.0, 1.0);\\n\\tfloat b = clamp(colormap_blue(x) / 255.0, 0.0, 1.0);\\n\\treturn vec3(r, g, b);\\n}\\n\\n// Sample the protein channel, local coordinates.\\nvec2 sampleProtein(vec3 p, int lod) {\\n    if (lod == 0) {\\n        return texture(volume0, p/volumeSize + 0.5).rg;\\n    } else if (lod == 1) {\\n        return texture(volume1, p/volumeSize + 0.5).rg;\\n    } else if (lod == 2) {\\n        return texture(volume2, p/volumeSize + 0.5).rg;\\n    } else if (lod == 3) {\\n        return texture(volume3, p/volumeSize + 0.5).rg;\\n    } else if (lod == 4) {\\n        return texture(volume4, p/volumeSize + 0.5).rg;\\n    } else if (lod == 5) {\\n        return texture(volume5, p/volumeSize + 0.5).rg;\\n    } else if (lod == 6) {\\n        return texture(volume6, p/volumeSize + 0.5).rg;\\n    } else if (lod == 7) {\\n        return texture(volume7, p/volumeSize + 0.5).rg;\\n    } else if (lod == 8) {\\n        return texture(volume8, p/volumeSize + 0.5).rg;\\n    } else {\\n        return texture(volume9, p/volumeSize + 0.5).rg;\\n    }\\n}\\n\\nfloat sampleSdf(vec3 p) {\\n    return texture(sdf, p/volumeSize + 0.5).r * (sdfRange.y - sdfRange.x) + sdfRange.x;\\n}\\n\\nfloat sampleCurvature(vec3 p) {\\n    return texture(curvature, p/volumeSize + 0.5).r * (curvatureRange.y - curvatureRange.x) + curvatureRange.x;\\n}\\n\\nfloat sampleProjection(vec3 p) {\\n    vec2 uv = (p/volumeSize + 0.5).xy;\\n    float r = texture(projection, uv, 2.0).g;\\n    return r;\\n}\\n\\nvoid calcNormalAndCurv(vec3 p, out vec3 normal, out float curv) {\\n    // Calculates the normal as well as the *mean* curvature at point p.\\n    float h = 0.01; \\n    vec2 k = h * vec2(1., 0.);\\n\\n    float t1 = sampleSdf(p + volumeSize*k.xyy); float t2 = sampleSdf(p - volumeSize*k.xyy);\\n    float t3 = sampleSdf(p + volumeSize*k.yxy); float t4 = sampleSdf(p - volumeSize*k.yxy);\\n    float t5 = sampleSdf(p + volumeSize*k.yxx); float t6 = sampleSdf(p - volumeSize*k.yxx);\\n    float t = sampleSdf(p);\\n\\n    curv = (t1+t2+t3+t4+t5+t6-6.0*t)/(h*h); // mean curvature is just the Jacobian of the SDF\\n    //curv = (abs(t1+t2-t)+abs(t3+t4-t)+abs(t5+t6-t))/(h*h);\\n    normal = normalize(k.xyy * (t1-t2) + k.yxy * (t3-t4) + k.yyx * (t5-t6));\\n}\\n\\nvoid main()\\n{\\n    float normalizedDepth = texture(texDepth, gl_FragCoord.xy / resolution).r;\\n    vec4 ndc = vec4(gl_FragCoord.xy / resolution * 2.0 - 1.0,\\n                    normalizedDepth * 2.0 - 1.0, 1.0f);\\n\\n    vec4 vcoords = inverse(proj) * ndc;\\n    vcoords /= vcoords.w;\\n    float depth = -vcoords.z;\\n\\n    vec3 rayDir = normalize( vDirection );\\n    vec2 boxDst = rayBoxDst(-0.5 * volumeSize, 0.5 * volumeSize, vOrigin, rayDir);\\n\\n    // Render render isosurface\\n    vec4 surfaceColor = vec4(0.0f);\\n    vec4 proteinColor = vec4(0.0f);\\n    vec4 selectionColor = vec4(0.0f);\\n    \\n    if (displayCompartments) {\\n        vec3 rayPos = vOrigin + boxDst.x * rayDir;\\n        float dist = 0.0;\\n        while (dist < boxDst.y) {\\n            if (dist + boxDst.x > depth) break;\\n            // Simple sphere tracer.            \\n            float sdfVal = sampleSdf(rayPos);\\n            \\n            if (sdfVal <= 0.01) {\\n                float curv;\\n                vec3 normal;\\n                calcNormalAndCurv(rayPos, normal, curv);\\n                curv = sampleCurvature(rayPos);\\n                float normalized_curv = curv + 0.5;\\n                float ldn = dot(normal, vec3(1.0, 0.0, 0.0));\\n                surfaceColor = mix(vec4(0.5*colormap_RdBu(normalized_curv), 1.0), vec4(colormap_RdBu(normalized_curv), 1.0), 0.5 + 0.5 * ldn);\\n                break;\\n            }\\n\\n            dist += sdfVal;\\n            rayPos += sdfVal * rayDir;\\n        }\\n        depth = min(depth, boxDst.x + dist);\\n    }\\n\\n    // Render volume.\\n    float steps = 0.0;\\n    vec3 rayPos = vOrigin + boxDst.x * rayDir;\\n\\n    float baseStepSize = 0.25;\\n    float dist = 0.0;\\n\\n    // This works better than an if statement for some reason (at least on Intel GPUs)\\n    float dstToMarch = float(displayProtein)*boxDst.y;\\n\\n    while (dist < dstToMarch) {\\n        float sdfVal = sampleSdf(rayPos);\\n\\n        float stepSize = baseStepSize;\\n        if (sdfVal <= isovalue + 0.00001) {\\n            int lod = 0;\\n            \\n            if (useLod) {\\n                if (dist + boxDst.x < 40.0) {\\n                    lod = 0;\\n                    stepSize = baseStepSize;\\n                } else if (dist + boxDst.x < 80.0) {\\n                    lod = 1;\\n                    stepSize = baseStepSize * 2.0;\\n                } else if (dist + boxDst.x < 160.0) {\\n                    lod = 2;\\n                    stepSize = baseStepSize * 4.0;\\n                } else {\\n                    lod = 3;\\n                    stepSize = baseStepSize * 8.0;\\n                }\\n            }\\n\\n            float density = 0.75 * sampleProtein(rayPos, lod).r;\\n            vec3 color = colormap(density);\\n\\n            vec3 uvw = rayPos / volumeSize + 0.5;\\n            float selectionMask = texture(selection, uvw.xy).r;\\n\\n            color = mix(color, 3.0 * matlab_spring(density), selectionMask);\\n\\n            proteinColor.rgb += density * (1.0 - proteinColor.a) * color;\\n            proteinColor.a += density * (1.0 - proteinColor.a);\\n        }\\n\\n        dist += stepSize;\\n        rayPos += stepSize * rayDir;\\n\\n        steps += 1.0;\\n\\n        //if (proteinColor.a > 0.99f) break;\\n        if (dist + boxDst.x > depth) break;\\n    }\\n\\n    if (debugSamples) {\\n        FragColor.rgb = matlab_spring(steps / 500.0);\\n        FragColor.a = 1.0;\\n    } else {\\n        FragColor.rgb = mix(surfaceColor.rgb, proteinColor.rgb, proteinColor.a);\\n        FragColor.a = max(surfaceColor.a, proteinColor.a);\\n\\n        FragColor.rgb = mix(FragColor.rgb, selectionColor.rgb, selectionColor.a);\\n        FragColor.a = max(FragColor.a, selectionColor.a);\\n    }\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"\\nvarying vec2 vUv;\\n\\nuniform sampler2D texGrid;\\nuniform sampler2D texVolume;\\n\\nvoid main() {\\n    gl_FragColor = vec4(mix(texture(texGrid, vUv).rgb, texture(texVolume, vUv).rgb, texture(texVolume, vUv).a), 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform highp sampler3D volume;\\nuniform highp sampler3D sdf;\\nuniform vec2 sdfRange;\\nuniform float isovalue;\\n\\nvoid main() {\\n    vec3 uv = vec3(vUv, 0.0);\\n    int col = textureSize(volume, 0).z;\\n\\n    // Maximum projection.\\n    float maxDensity = 0.0;\\n    float maxPos = 0.0;\\n    for (float i = 0.0; i < float(col); i += 1.0) {\\n        uv.z = i / float(col);\\n        float sdfVal = texture(sdf, uv).r * (sdfRange.y - sdfRange.x) + sdfRange.x - isovalue;\\n        if (sdfVal <= 0.00001) {\\n            float density = texture(volume, uv).r;\\n            if (density > maxDensity) {\\n                maxDensity = density;\\n                maxPos = uv.z;\\n            }\\n        }\\n    }\\n\\n    gl_FragColor = vec4(maxDensity, maxPos, 0.0, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform bool clear;\\nuniform vec2 lastPosition;\\nuniform vec2 position;\\nuniform bool depressed;\\nuniform float resolution;\\nuniform int penMode;\\nuniform float penSize;\\nuniform sampler2D restore;\\nuniform bool doRestore;\\n\\n// https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\\n{\\n    vec2 pa = p-a, ba = b-a;\\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\\n    return length( pa - ba*h );\\n}\\n\\nvoid drawPixel() {\\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\n}\\n\\nvoid erasePixel() {\\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n\\nvoid main()\\n{\\n    if (clear) {\\n        erasePixel();\\n        return;\\n    }\\n\\n    if (doRestore) {\\n        gl_FragColor = texture(restore, vUv);\\n        return;\\n    }\\n\\n    if (sdSegment(vUv, position, lastPosition) < penSize/resolution && depressed) {\\n        if (penMode == 0) {\\n            drawPixel();\\n        } else {\\n            erasePixel();\\n        }\\n    } else {\\n        discard;\\n    }\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","module.exports = \"varying vec2 vUv;\\n\\nuniform highp sampler2D projection;\\nuniform highp sampler2D selection;\\n\\n// https://github.com/kbinani/colormap-shaders/blob/master/shaders/glsl/MATLAB_summer.frag\\nvec4 colormap(float x) {\\n    return vec4(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4, 1.0);\\n}\\n\\nvoid main() {\\n    vec4 c1 = colormap(texture(projection, vUv).r);\\n    vec4 c2 = texture(selection, vUv);\\n\\n    gl_FragColor = mix(0.8*c1, c1, c2.r);\\n}\"","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nimport Main from './components/Main';\n\nfunction App() {\n  return(\n      <div className=\"App\">\n        <Main />\n     </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('./service-worker.js').then(registration => {\n      console.log('SW registered: ', registration);\n    }).catch(registrationError => {\n      console.log('SW registration failed: ', registrationError);\n    });\n  });\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// \"Abstract\" class for the volume renderer.\n\nclass VolumeRenderer {\n\t// Renders the volume.\n\trender() { };\n\n\tsetVolumeSize(width, height, depth) { };\n\n\t// Set the protein data.\n\tsetProteinData(texture) { };\n\n\tsetDistanceData(textures, ranges) { };\n\n\tsetCurvatureData(texture) { };\n\n\tsetIsovalue(value) { };\n\n\tsetCompartmentIndex(value) { };\n\t\n\tsetDisplayCompartments(value) { };\n\n\tsetDisplayProtein(value) { };\n\n\tresizeCallback() { };\n\t\n\tsetSkeleton(vec) { };\n\n\tselectionUpdated() { };\n\n\tsetDebugSamples(value) { };\n\n\tsetUseLod(value) { };\n}\n\nexport { VolumeRenderer };","import { VolumeRenderer } from '../volume_renderer.js'\n\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3(0,0,1);\n\nclass VolumeRendererDefault extends VolumeRenderer {\n\tvolumeTexture;\n\tsdfTextures;\n\tsdfRanges;\n\n\tdom;\n\trenderer;\n\n\tvolumeSize;\n\n\trenderTargetGrid;\n\trenderTargetVolume;\n\n\tcamera;\n\tcontrols;\n\n\tcameraCompose;\n\n\tbox;\n\tgrid;\n\n\tmaterialMarchVolume;\n\tmaterialCompose;\n\n\tsceneGrid;\n\tsceneVolume;\n\tsceneCompose;\n\n\tvolumeDirty;\n\n\tconstructor(renderer, dom) {\n\t\tsuper();\n\t\tthis.dom = dom;\n\t\tthis.renderer = renderer;\n\n\t\tthis.camera = new THREE.PerspectiveCamera( 75, dom.clientWidth/dom.clientHeight, 0.1, 5000 );\n\t\t\n\t\tthis.controls = new OrbitControls(this.camera, dom);\n\t\tthis.camera.position.y = -85;\n\t\tthis.controls.update();\n\n\t\tthis.materialMarchVolume = new THREE.RawShaderMaterial( {\n\t\t\tglslVersion: THREE.GLSL3,\n\t\t\tuniforms: {\n\t\t\t\tmodelview: { value: this.camera.matrixWorldInverse },\n\t\t\t\tproj: {value: this.camera.projectionMatrix },\n\t\t\t\tresolution: { value: new THREE.Vector2(0, 0) },\n\t\t\t\tvolume0: { value:null },\n\t\t\t\tvolume1: { value:null },\n\t\t\t\tvolume2: { value:null },\n\t\t\t\tvolume3: { value:null },\n\t\t\t\tvolume4: { value:null },\n\t\t\t\tvolume5: { value:null },\n\t\t\t\tvolume6: { value:null },\n\t\t\t\tvolume7: { value:null },\n\t\t\t\tvolume8: { value:null },\n\t\t\t\tvolume9: { value:null },\n\t\t\t\tvolumeSize: { value: null },\n\t\t\t\ttexDepth: { value: null },\n\t\t\t\tsdf: { value: null },\n\t\t\t\tsdfRange: { value: new THREE.Vector2(0, 0) },\n\t\t\t\tcurvature: { value: null },\n\t\t\t\tcurvatureRange: { value: new THREE.Vector2(0, 0) },\n\t\t\t\tisovalue: { value: null },\n\t\t\t\tdisplayProtein: { value: false },\n\t\t\t\tdisplayCompartments: { value: false },\n\t\t\t\tselection: { value: false },\n\t\t\t\tprojection: { value: false },\n\t\t\t\tdebugSamples: { value: false },\n\t\t\t\tuseLod: { value: true }\n\t\t\t},\n\t\t\tvertexShader: require('./shaders/volume_renderer_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/volume_renderer_frag.glsl'),\n\t\t\tside: THREE.BackSide,\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialCompose = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/post_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/post_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\ttexGrid: { value: null },\n\t\t\t\ttexVolume: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.sceneGrid = new THREE.Scene();\n\t\tconst size = 10;\n\t\tconst divisions = 10;\n\t\tthis.grid = new THREE.GridHelper( size, divisions );\n\t\tthis.grid.rotateX(0.5*Math.PI);\n\t\tthis.sceneGrid.add(this.grid);\n\t\t\n\t\tthis.grid.onBeforeRender = ( renderer, scene, camera, geometry, material, group ) => {\n\t\t\tvar pos = this.controls.target;\n\t\t\tthis.grid.position.x = pos.x;\n\t\t\tthis.grid.position.y = pos.y;\n\t\t\tthis.grid.position.z = pos.z;\n\t\t\tthis.grid.updateMatrixWorld();\n\t\t};\n\n\t\tconst geometry = new THREE.BoxGeometry();\n\t\tthis.sceneVolume = new THREE.Scene();\n\t\tthis.box = new THREE.Mesh(geometry, this.materialMarchVolume)\n\t\tthis.sceneVolume.add(this.box);\n\n\t\tthis.sceneCompose = new THREE.Scene();\n\t\tthis.cameraCompose = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialCompose);\n\t\tthis.sceneCompose.add(quad);\n\n\t\tthis.renderTargetVolume = new THREE.WebGLRenderTarget(0, 0);\n\t\tthis.renderTargetGrid = new THREE.WebGLRenderTarget(0, 0);\n\t\tthis.renderTargetGrid.depthTexture = new THREE.DepthTexture();\n\n\t\t\n\t\tthis.materialMarchVolume.uniforms.texDepth.value = this.renderTargetGrid.depthTexture;\n\t\tthis.materialCompose.uniforms.texGrid.value = this.renderTargetGrid.texture;\n\t\tthis.materialCompose.uniforms.texVolume.value = this.renderTargetVolume.texture;\n\n\t\tthis.volumeDirty = true;\n\n\t\tthis.controls.addEventListener('change', () => {\n\t\t\tthis.volumeDirty = true;\n\t\t} );\n\t\t\n\t\twindow.addEventListener('resize', () => {\n\t\t\tthis.resizeCallback();\n\t\t});\n\t\tthis.resizeCallback();\n\t};\n\n\t// Renders the volume.\n\trender() {\n\t\tif (!this.volumeTexture) return;\n\t\tif (!this.sdfTextures) return;\n\t\tif (!this.volumeDirty) return;\n\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\tconst left   = rect.left;\n\t\tconst bottom = window.innerHeight - rect.bottom;\n\n\t\tthis.renderer.setViewport(left, bottom, width, height);\n\t\tthis.renderer.setScissor(left, bottom, width, height);\n\t\tthis.renderer.setScissorTest(true);\n\t\t\n\t\tthis.controls.update();\n\n\t\tlet gl = this.renderer.getContext();\n\t\tthis.renderer.setRenderTarget(this.renderTargetGrid);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneGrid, this.camera);\n\n\t\tthis.renderer.setRenderTarget(this.renderTargetVolume);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneVolume, this.camera);\n\n\t\tthis.renderer.setRenderTarget(null);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneCompose, this.cameraCompose);\n\n\t\tthis.volumeDirty = false;\n\t};\n\n\tselectionUpdated() {\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetVolumeSize(width, height, depth) { \n\t\tthis.volumeSize = new THREE.Vector3(width, height, depth);\n\t\tthis.box.geometry = new THREE.BoxGeometry(this.volumeSize.x, this.volumeSize.y, this.volumeSize.z);\n\t\tthis.materialMarchVolume.uniforms.volumeSize.value = this.volumeSize;\n\t\tthis.volumeDirty = true;\n\t };\n\n\t// Set the protein data.\n\tsetProteinData(texture) {\n\t\tthis.volumeTexture = texture;\n\t\t\n\t\tfor (let i = 0; i < 9; ++i) {\n\t\t\tthis.materialMarchVolume.uniforms[\"volume\" + i].value = this.volumeTexture[i];\n\t\t}\n\t\t\n\t\tthis.volumeDirty = true;\n\t};\n\t\n\tsetDistanceData(textures, ranges, dims) {\n\t\tthis.sdfTextures = textures;\n\t\tthis.sdfRanges = ranges;\n\t\tthis.materialMarchVolume.uniforms.sdf.value = this.sdfTextures[0];\n\t\tthis.materialMarchVolume.uniforms.sdfRange.value = new THREE.Vector2(this.sdfRanges[0][0], this.sdfRanges[0][1])\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetCurvatureData(texture, range) {\n\t\tthis.curvatureTexture = texture;\n\t\tthis.curvatureRange = range;\n\t\tthis.materialMarchVolume.uniforms.curvature.value = this.curvatureTexture;\n\t\tthis.materialMarchVolume.uniforms.curvatureRange.value = new THREE.Vector2(this.curvatureRange[0], this.curvatureRange[1])\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetIsovalue(value) {\n\t\tthis.materialMarchVolume.uniforms.isovalue.value = value;\n\t\t//this.volumeDirty = true;\n\t}\n\n\tsetCompartmentIndex(value) {\n\t\tthis.materialMarchVolume.uniforms.sdf.value = this.sdfTextures[value];\n\t\tthis.materialMarchVolume.uniforms.sdfRange.value = new THREE.Vector2(this.sdfRanges[value][0], this.sdfRanges[value][1]);\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDisplayCompartments(value) {\n\t\tthis.materialMarchVolume.uniforms.displayCompartments.value = value;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetDisplayProtein(value) {\n\t\tthis.materialMarchVolume.uniforms.displayProtein.value = value;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetSelectionTexture(texture) {\n\t\tthis.materialMarchVolume.uniforms.selection.value = texture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tsetProjectionTexture(texture) {\n\t\tthis.materialMarchVolume.uniforms.projection.value = texture;\n\t\tthis.volumeDirty = true;\n\t};\n\n\tresizeCallback() {\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\t//const left   = rect.left;\n\t\t//const bottom = window.innerHeight - rect.bottom;\n\t\t\n\t\tthis.camera.aspect = width/height;\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderTargetVolume.setSize(width, height);\n\t\tthis.renderTargetGrid.setSize(width, height);\n\t\tthis.materialMarchVolume.uniforms.resolution.value = new THREE.Vector2(width, height);\n\n\t\tthis.renderTargetGrid.depthTexture = new THREE.DepthTexture();\n\t\tthis.materialMarchVolume.uniforms.texDepth.value = this.renderTargetGrid.depthTexture;\n\n\t\tthis.volumeDirty = true;\n\t}\n\n\tsetSkeleton(vec) {\n\t\tvar geom = new THREE.BufferGeometry();\n\n\t\tgeom.setAttribute( 'position', new THREE.BufferAttribute( vec, 3 ) );\n\n\t\tvar points = new THREE.Points(geom);\n\n\t\tpoints.position.x = -0.5*this.volumeSize.x;\n\t\tpoints.position.y = -0.5*this.volumeSize.y;\n\t\tpoints.position.z = -0.5*this.volumeSize.z;\n\n\t\tthis.sceneGrid.add(points);\n\t}\n\n\tsetDebugSamples(value) {\n\t\tthis.materialMarchVolume.uniforms.debugSamples.value = value;\n\t}\n\n\tsetUseLod(value) {\n\t\tthis.materialMarchVolume.uniforms.useLod.value = value;\n\t}\n}\n\nexport { VolumeRendererDefault };","import * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n//import { VolumeRendererReprojected } from './volume/reprojected/volume_renderer_reprojected.js'\nimport { VolumeRendererDefault} from './volume/default/volume_renderer_default.js'\nimport { MapRenderer } from \"./map/map_renderer.js\"\n\nvar stats = new Stats();\nstats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\ndocument.body.appendChild( stats.dom );\n\nvar canvas;\nvar mainView;\nvar mapView;\n\nvar renderer;\n\nvar volumeRenderer = null;\nvar mapRenderer = null;\n// Configure coordinate system to use Z as up.\n\nvar onProjectionUpdated = () => {};\nvar onSelectionDone = () => {};\n\nasync function main(initCanvas, initMainView, initMapView) {\n\tcanvas = initCanvas;\n\tmainView = initMainView;\n\tmapView = initMapView;\n\trenderer = new THREE.WebGLRenderer({canvas: canvas, preserveDrawingBuffer: true});\n\trenderer.autoClearColor = false;\n\tawait init();\n\tanimate();\n}\n\nfunction setOnProjectionUpdated(callback) {\n\tonProjectionUpdated = callback;\n}\n\nfunction setOnSelectionDone(callback) {\n\tonSelectionDone = callback;\n}\n\nfunction setVolumeSize(size) {\n\tvolumeRenderer.setVolumeSize(size[0], size[1], size[2]);\n}\n\nfunction setProteinData(pyramid, dims) {\n\tlet textures = []\n\tlet w = dims[0];\n\tlet h = dims[1];\n\tlet d = dims[2];\n\tfor (let i = 0; i < pyramid.length; ++i) {\n\t\tconst texture = new THREE.DataTexture3D(pyramid[i], w, h, d);\n\t\ttexture.format = THREE.RedFormat;\n\t\ttexture.type = THREE.UnsignedByteType;\n\t\ttexture.internalFormat = 'R8';\n\t\ttexture.minFilter = THREE.LinearFilter;\n\t\ttexture.magFilter = THREE.LinearFilter;\n\t\ttexture.generateMipmaps = false;\n\t\ttexture.unpackAlignment = 1;\n\n\t\tw = Math.ceil(w/2.0);\n\t\th = Math.ceil(h/2.0);\n\t\td = Math.ceil(d/2.0);\n\n\t\ttextures.push(texture);\n\t}\n\n\t\n\tvolumeRenderer.setProteinData(textures);\n\tmapRenderer.setProteinData(textures[0]);\n}\n\nfunction setDistanceFieldData(arrays, dims) {\n\tlet textures = [];\n\tlet ranges = [];\n\tfor (var i = 0; i < arrays.length; ++i) {\n\t\tconst tex = new THREE.DataTexture3D(arrays[i].data, dims[0], dims[1], dims[2]);\n\t\ttex.format = THREE.RedFormat;\n\t\ttex.minFilter = THREE.LinearFilter;\n\t\ttex.magFilter = THREE.LinearFilter;\n\t\ttex.unpackAlignment = 1;\n\n\t\ttextures.push(tex);\n\t\tranges.push([arrays[i].min, arrays[i].max])\n\t}\n\tvolumeRenderer.setDistanceData(textures, ranges);\n\tmapRenderer.setDistanceData(textures, ranges);\n}\n\nfunction setCurvatureData(curvature, dims) {\n\tconst tex = new THREE.DataTexture3D(curvature.data, dims[0], dims[1], dims[2]);\n\tconst range = [curvature.min, curvature.max];\n\ttex.format = THREE.RedFormat;\n\ttex.minFilter = THREE.LinearFilter;\n\ttex.magFilter = THREE.LinearFilter;\n\ttex.unpackAlignment = 1;\n\n\tvolumeRenderer.setCurvatureData(tex, range);\n}\n\nasync function init() {\n\tvolumeRenderer = new VolumeRendererDefault(renderer, mainView);\n\tmapRenderer = new MapRenderer(renderer, mapView, handleSelectionUpdated, handleProjectionUpdated, handleSelectionDone);\n\n\tvolumeRenderer.setSelectionTexture(mapRenderer.getSeletionTexture());\n\tvolumeRenderer.setProjectionTexture(mapRenderer.getProjectionTexture());\n}\n\nfunction animate() {\n\trequestAnimationFrame( animate );\n\t\n\tvolumeRenderer.render();\n\tmapRenderer.render();\n\n\tstats.update();\n}\n\nfunction handleSelectionDone() {\n\tonSelectionDone(mapRenderer.getSelectionPixels());\n}\n\nfunction handleSelectionUpdated() {\n\tvolumeRenderer.selectionUpdated();\n}\n\nfunction handleProjectionUpdated() {\n\tonProjectionUpdated(mapRenderer.getProjectionPixels());\n}\n\nfunction setIsovalue(value) {\n\tvolumeRenderer.setIsovalue(value);\n\tmapRenderer.setIsovalue(value);\n}\n\nfunction setDisplayProtein(value) {\n\tvolumeRenderer.setDisplayProtein(value);\n}\n\nfunction setDisplayCompartment(value) {\n\tvolumeRenderer.setDisplayCompartments(value);\n}\n\nfunction setCompartmentIndex(index) {\n\tvolumeRenderer.setCompartmentIndex(index);\n\tmapRenderer.setCompartmentIndex(index);\n}\n\nfunction setSkeleton(vec) {\n\tvolumeRenderer.setSkeleton(vec);\n}\n\nfunction deleteSelection() {\n\tif (mapRenderer) {\n\t\tmapRenderer.deleteSelection();\n\t}\n}\n\nfunction getMapSelectionPixels() {\n\treturn mapRenderer.getSelectionPixels();\n}\n\nfunction getMapProjectionPixels() {\n\treturn mapRenderer.getProjectionPixels();\n}\n\nfunction setMapSelectionPixels(pixels, width, height) {\n\tconst texture = new THREE.DataTexture( pixels, width, height, THREE.RGBAFormat );\n\tmapRenderer.setSelectionFromTexture(texture);\n}\n\nfunction setDebugSamples(value) {\n\tvolumeRenderer.setDebugSamples(value);\n}\n\nfunction setUseLod(value) {\n\tvolumeRenderer.setUseLod(value);\n}\n\nfunction setPenMode(mode) {\n\tif (mapRenderer) {\n\t\tmapRenderer.setPenMode(mode);\n\t}\n}\n\nfunction setPenSize(value) {\n\tif (mapRenderer) {\n\t\tmapRenderer.setPenSize(value);\n\t}\n}\n\nexport { main, setOnProjectionUpdated, setOnSelectionDone, setDistanceFieldData, setProteinData, setCurvatureData, setIsovalue, setDisplayProtein, setDisplayCompartment, setCompartmentIndex, setVolumeSize, deleteSelection, setSkeleton, setMapSelectionPixels, getMapSelectionPixels, getMapProjectionPixels, setDebugSamples, setUseLod, setPenMode, setPenSize};","import * as THREE from 'three';\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nclass MapRenderer {\n    dom;\n    renderer;\n\n    camera;\n\n    sceneSelection;\n    materialSelection;\n\n\tsceneProjection;\n\tmaterialProjection;\n\n\tsceneMap;\n\tmaterialMap;\n\n\tplaneMap;\n\n\tvolumeTexture;\n\tsdfTextures;\n\n\trenderTargetSelection;\n\trenderTargetProjection;\n\n\tprojectionDirty;\n\tselectionDirty;\n\n\tconstructor(renderer, dom, onSelectionUpdated, onProjectionUpdated, onSelectionDone) {\n\t\tthis.dom = dom;\n\t\tthis.renderer = renderer;\n\n\t\tthis.onSelectionUpdated = onSelectionUpdated;\n\t\tthis.onProjectionUpdated = onProjectionUpdated;\n\t\tthis.onSelectionDone = onSelectionDone;\n\n        this.materialProjection = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/mip_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/mip_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tvolume: { value: null },\n\t\t\t\tsdf: { value: null },\n\t\t\t\tsdfRange: { value: new THREE.Vector2(0, 0) },\n\t\t\t\tisovalue: { value: null }\n\t\t\t},\n\t\t\ttransparent: true,\n\t\t\textensions: {\n\t\t\t\tshaderTextureLOD: true // set to use shader texture LOD\n\t\t\t}\n\t\t});\n\n\t\tthis.materialSelection = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/selection_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/selection_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tclear: { value: true },\n\t\t\t\tlastPosition: { value: new THREE.Vector2(0.0, 0.0) },\n\t\t\t\tposition: { value: new THREE.Vector2(0.0, 0.0) },\n\t\t\t\tdepressed: { value: false },\n\t\t\t\tpenMode: {value: 0 },\n\t\t\t\tpenSize: {value: 8.0 },\n\t\t\t\tresolution: {value: 1024},\n\t\t\t\trestore: {value: null },\n\t\t\t\tdoRestore: { value: false }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.materialMap = new THREE.ShaderMaterial({\n\t\t\tvertexShader: require('./shaders/map_vert.glsl'),\n\t\t\tfragmentShader: require('./shaders/map_frag.glsl'),\n\t\t\tuniforms: {\n\t\t\t\tselection: { value: null },\n\t\t\t\tprojection: { value: null }\n\t\t\t},\n\t\t\ttransparent: true\n\t\t});\n\n\t\tthis.renderTargetSelection = new THREE.WebGLRenderTarget(1024, 1024);\n\t\tthis.renderTargetProjection = new THREE.WebGLRenderTarget(1024, 1024, {\n\t\t\tmagFilter:THREE.NearestFilter,\n            minFilter:THREE.LinearMipMapLinearFilter,\n            generateMipmaps:true\n\t\t});\n\n\t\tconst aspect = dom.clientWidth/dom.clientHeight\n\n\t\tthis.camera = new THREE.OrthographicCamera( -aspect, aspect, 1, - 1, 0, 2 );\n\t\tthis.controls = new OrbitControls(this.camera, dom);\n\t\tthis.camera.position.z = 1.0;\n\t\tthis.controls.enableRotate = false;\n\t\tthis.controls.update();\n\n\t\t{\n\t\tthis.cameraProjection = new THREE.OrthographicCamera(-1, 1, 1, - 1, 0, 2 );\n\t\tthis.sceneProjection = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialProjection);\n\t\tthis.planeMap = quad;\n\t\tthis.sceneProjection.add(quad);\n\t\t}\n\n\t\t{\n\t\tthis.cameraSelection = new THREE.OrthographicCamera(-1, 1, 1, - 1, 0, 2 );\n\t\tthis.sceneSelection = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialSelection);\n\t\tthis.sceneSelection.add(quad);\n\t\t}\n\n\t\t{\n\t\tthis.sceneMap = new THREE.Scene();\n\t\tlet plane = new THREE.PlaneGeometry( 2, 2 );\n\t\tlet quad = new THREE.Mesh(plane, this.materialMap);\n\t\tthis.sceneMap.add(quad);\n\t\tthis.sceneMap.add(this.camera);\n\t\t}\n\n\t\tthis.materialMap.uniforms.projection.value = this.renderTargetProjection.texture;\n\t\tthis.materialMap.uniforms.selection.value = this.renderTargetSelection.texture;\n\n\t\tthis.projectionDirty = false;\n\t\tthis.selectionDirty = false;\n\n\t\tthis.dom.addEventListener('mousemove', e => { this.mouseMove(e); });\n\t\tthis.dom.addEventListener('mousedown', e => { this.mouseDown(e);});\n\t\tthis.dom.addEventListener('mouseup', e => { this.mouseUp(e);});\n\t\tthis.dom.addEventListener('mouseout', e => { this.mouseOut(e);});\n\t\t\t\n\t\twindow.addEventListener('resize', () => {\n\t\t\tthis.resizeCallback();\n\t\t});\n\t\tthis.resizeCallback();\n    };\n\n\tgetMousePosition(e) {\n\t\tconst raycaster = new THREE.Raycaster();\n\t\tconst mouse = new THREE.Vector2();\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\tmouse.x = (e.clientX - rect.left) / (rect.right - rect.left) * 2.0 - 1.0; //x position within the element.\n\t\tmouse.y = 1.0 - (e.clientY - rect.top) / (rect.bottom - rect.top) * 2.0; //y position within the element.\n\t\traycaster.setFromCamera( mouse.clone(), this.camera );\n\t\tconst intersects = raycaster.intersectObject(this.planeMap);\n\n\t\tif (intersects.length > 0) {\n\t\t\treturn intersects[0].uv;\n\t\t}\n\t\treturn null;\n\t}\n\n\tmouseDown(e) {\n\t\tif (e.button === 0) {\n\t\t\tconst mouse = this.getMousePosition(e);\n\t\t\tif (mouse) {\n\t\t\t\tthis.materialSelection.uniforms.position.value = mouse;\n\t\t\t\tthis.materialSelection.uniforms.lastPosition.value = this.materialSelection.uniforms.position.value;\n\t\t\t\tthis.selectionDirty = true;\n\t\t\t\tthis.materialSelection.uniforms.depressed.value = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tmouseMove(e) {\n\t\tif (e.button === 0) {\n\t\t\tif (this.materialSelection.uniforms.depressed.value) {\n\t\t\t\tconst mouse = this.getMousePosition(e);\n\t\t\t\tif (mouse) {\n\t\t\t\t\tthis.materialSelection.uniforms.lastPosition.value = this.materialSelection.uniforms.position.value;\n\t\t\t\t\tthis.materialSelection.uniforms.position.value = mouse;\n\t\t\t\t\tthis.selectionDirty = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tmouseOut(e) {\n\t\tif (e.button === 0) {\n\t\t\tthis.materialSelection.uniforms.depressed.value = false;\n\t\t}\n\t}\n\n\tmouseUp(e) {\n\t\tif (e.button === 0) {\n\t\t\tthis.materialSelection.uniforms.depressed.value = false;\n\t\t\tthis.onSelectionDone();\n\t\t}\n\t}\n\n\trenderProjection() {\n\t\tthis.renderer.setViewport(0, 0, 1024, 1024);\n\t\tthis.renderer.setScissorTest(false);\n\t\tthis.renderer.setRenderTarget(this.renderTargetProjection);\n\t\tthis.renderer.render(this.sceneProjection, this.cameraProjection);\n\t\tthis.onProjectionUpdated();\n\t\tthis.projectionDirty = false;\n\t}\n\n\trenderSelection() {\n\t\tthis.renderer.setViewport(0, 0, 1024, 1024);\n\t\tthis.renderer.setScissorTest(false);\n\t\tthis.renderer.setRenderTarget(this.renderTargetSelection);\n\t\tthis.renderer.render(this.sceneSelection, this.cameraSelection);\n\t\t//this.onSelectionUpdated();\n\t\tif (this.materialSelection.uniforms.clear.value) {\n\t\t\tthis.materialSelection.uniforms.clear.value = false;\n\t\t\tthis.onSelectionDone();\n\t\t}\n\n\t\tif (this.materialSelection.uniforms.doRestore.value) {\n\t\t\tthis.materialSelection.uniforms.doRestore.value = false;\n\t\t\tthis.onSelectionDone();\n\t\t}\n\t\tthis.selectionDirty = false;\n\t}\n\n\trenderMap() {\n\t\tconst rect = this.dom.getBoundingClientRect();\n\t\t\t\n\t\tconst width  = rect.right - rect.left;\n\t\tconst height = rect.bottom - rect.top;\n\t\tconst left   = rect.left;\n\t\tconst bottom = window.innerHeight - rect.bottom;\n\t\t\n\t\tthis.renderer.setViewport(left, bottom, width, height);\n\t\tthis.renderer.setScissor(left, bottom, width, height);\n\t\tthis.renderer.setScissorTest(true);\n\n\t\tthis.renderer.setRenderTarget(null);\n\t\tlet gl = this.renderer.getContext();\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tthis.renderer.render(this.sceneMap, this.camera);\n\t}\n\n\t// Renders the volume.\n\trender() {\n\t\tif (this.selectionDirty) this.renderSelection();\n\t\tif (this.projectionDirty) this.renderProjection();\n\n\t\tthis.renderMap();\n\t};\n\n\tsetVolumeSize(width, height, depth) { };\n\n\t// Set the protein data.\n\tsetProteinData(texture) {\n\t\tthis.volumeTexture = texture;\n\t\tthis.materialProjection.uniforms.volume.value = this.volumeTexture;\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetDistanceData(textures, ranges) {\n\t\tthis.sdfTextures = textures;\n\t\tthis.sdfRanges = ranges;\n\t\tthis.materialProjection.uniforms.sdf.value = this.sdfTextures[0];\n\t\tthis.materialProjection.uniforms.sdfRange.value = new THREE.Vector3(this.sdfRanges[0][0], this.sdfRanges[0][1]);\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetIsovalue(value) {\n\t\tthis.materialProjection.uniforms.isovalue.value = value;\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetCompartmentIndex(value) {\n\t\tthis.materialProjection.uniforms.sdf.value = this.sdfTextures[value];\n\t\tthis.materialProjection.uniforms.sdfRange.value = new THREE.Vector3(this.sdfRanges[value][0], this.sdfRanges[value][1]);\n\t\tthis.projectionDirty = true;\n\t};\n\n\tsetPenSize(value) {\n\t\tthis.materialSelection.uniforms.penSize.value = value;\n\t};\n\n\tsetPenMode(mode) {\n\t\tif (mode === \"draw\") {\n\t\t\tthis.materialSelection.uniforms.penMode.value = 0;\n\t\t} else {\n\t\t\tthis.materialSelection.uniforms.penMode.value = 1;\n\t\t}\n\t}\n\n\tgetSeletionTexture() {\n\t\treturn this.renderTargetSelection.texture;\n\t};\n\n\tgetSelectionPixels() {\n\t\tvar pixels = {\n\t\t\twidth: this.renderTargetSelection.width,\n\t\t\theight: this.renderTargetSelection.height,\n\t\t\tbuffer: new Uint8Array(this.renderTargetSelection.width*this.renderTargetSelection.width*4)\n\t\t}\n\t\tthis.renderer.readRenderTargetPixels(this.renderTargetSelection, 0, 0, pixels.width, pixels.height, pixels.buffer);\n\t\treturn pixels;\n\t};\n\n\tsetSelectionFromTexture(texture) {\n\t\tthis.materialSelection.uniforms.doRestore.value = true;\n\t\tthis.materialSelection.uniforms.restore.value = texture;\n\t\tthis.selectionDirty = true;\n\t}\n\n\tgetProjectionPixels() {\n\t\tvar pixels = {\n\t\t\twidth: this.renderTargetProjection.width,\n\t\t\theight: this.renderTargetProjection.height,\n\t\t\tbuffer: new Uint8Array(this.renderTargetProjection.width*this.renderTargetProjection.width*4)\n\t\t}\n\t\tthis.renderer.readRenderTargetPixels(this.renderTargetProjection, 0, 0, pixels.width, pixels.height, pixels.buffer);\n\t\treturn pixels;\n\t}\n\n\tgetProjectionTexture() {\n\t\treturn this.renderTargetProjection.texture;\n\t}\n\n\tdeleteSelection() {\n\t\tthis.materialSelection.uniforms.clear.value = true;\n\t\tthis.selectionDirty = true;\n\t}\n\n\tresizeCallback() {\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t\t\n\t\tconst aspect = this.dom.clientWidth/this.dom.clientHeight\n\t\t\n\t\tthis.camera.left = -aspect;\n\t\tthis.camera.right = aspect;\n\t\tthis.camera.updateProjectionMatrix();\n\t};\n}\n\nexport { MapRenderer };","import * as UTIF from 'utif';\n\nimport * as Comlink from 'comlink';\n\nclass Tiff {\n    constructor() {\n        this.buffer = null;\n        this.pixels = new Uint8Array();\n        this.width = 0;\n        this.height = 0;\n        this.depth = 0;\n        this.bits = 0;\n    }\n\n    async open(file) {\n        let buffer = await (() => {\n            return new Promise(function(resolve, reject) {\n                var reader = new FileReader();\n                reader.readAsArrayBuffer(file)\n            \n                reader.onload = readerEvent => {\n                    resolve(readerEvent.target.result);\n                }\n        \n                reader.onerror = _readerEvent => {\n                    reject(reader.error);\n                }\n        \n                reader.onabort = _readerEvent => {\n                    reject(\"FileReader was aborted!\");\n                }\n            });\n        })();\n\n        let ifd = UTIF.decode(buffer);\n        if (Object.keys(ifd[0]).length === 0) {\n            throw new Error(\"Could not decode TIFF file!\");\n        }\n\n        let properties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[0]);\n\n        if (properties.t277[0] !== 1) {\n            throw new Error(\"Only grayscale images are supported.\");\n        }\n    \n        if (properties.t258[0] !== 8) {\n            throw new Error(\"Only images with bit depth 8 are supported.\");\n        }\n    \n        for (var i = 0; i < ifd.length; ++i) {\n            let sliceProperties = (({ t256, t257, t258, t277 }) => ({ t256, t257, t258, t277 }))(ifd[i]);\n    \n            if (JSON.stringify(properties) !== JSON.stringify(sliceProperties)) {\n                throw new Error(\"Slice \" + i + \" has incorrect dimensions or pixel depth.\");\n            }\n        }\n\n        this.buffer = buffer;\n        this.width = properties.t256[0];\n        this.height = properties.t257[0];\n        this.depth = ifd.length;\n        this.bits = properties.t258[0];\n    };\n\n    async decode(onError, onProgress) {\n        const worker = new Worker('./workers/tiff-worker.js', {\n            name: 'tiff-worker',\n            type: 'module'\n          });\n        const decodeTiffBuffer = Comlink.wrap(worker);\n        this.pixels = await decodeTiffBuffer(this.buffer, Comlink.proxy(onError), Comlink.proxy(onProgress));\n        worker.terminate();\n    };\n}\n\nexport { Tiff };","import React, { Component } from 'react'\n\nimport Import from './Import'\nimport Toolbar from './Toolbar';\nimport Sidebar from './Sidebar';\nimport Overlay from './Overlay';\nimport Views from './Views';\nimport Canvas from './Canvas'\n\nimport Button from 'react-bootstrap/Button';\n\nimport * as Comlink from 'comlink';\n\nclass Main extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tfullscreen: false,\n\t\t\tshowSidebar: false,\n\t\t\tshowImport: false,\n\t\t\tvoxelSize: [0, 0, 0],\n\t\t\tvolumeDims: [0, 0, 0],\n\t\t\tsdf: [],\n\t\t\tprotein: \"\",\n\t\t\tcurvature: \"\",\n\t\t\tready: false,\n\t\t\tcompartmentIndex: 0,\n\t\t\tdisplaySegmentation: true,\n\t\t\tdisplayProtein: true,\n\t\t\tisovalue: 0,\n\t\t\theatmap: [],\n\t\t\theatarea: [],\n\t\t\theataxes: [[0, 0], [0, 0]],\n\t\t\tcompartmentHistogram: [],\n\t\t\tlocalHeatmap: [],\n\t\t\tlocalHeatarea: [],\n\t\t\tdebugSamples: false,\n\t\t\tuseLod: true,\n\t\t\tmainView: \"\",\n\t\t\tmapView: \"\",\n\n\t\t\tprojectionPixels: [],\n\t\t\tselectionPixels: []\n\t\t}\n\t\t\n\t\tthis.handleShowImport = this.handleShowImport.bind(this);\n\t\tthis.handleToggleFullscreen = this.handleToggleFullscreen.bind(this);\n\t\tthis.handleToggleSidebar = this.handleToggleSidebar.bind(this);\n\t\tthis.handleAbortImport = this.handleAbortImport.bind(this);\n\t\tthis.handleCompleteImport = this.handleCompleteImport.bind(this);\n\t\tthis.handleCompartmentSelection = this.handleCompartmentSelection.bind(this);\n\t\tthis.handleDisplaySegmentation = this.handleDisplaySegmentation.bind(this);\n\t\tthis.handleDisplayProtein = this.handleDisplayProtein.bind(this);\n\t\tthis.handleDebugSamples = this.handleDebugSamples.bind(this);\n\t\tthis.handleUseLod = this.handleUseLod.bind(this);\n\t\tthis.handleIsovalue = this.handleIsovalue.bind(this);\n\t\tthis.handleMainView = this.handleMainView.bind(this);\n\t\tthis.handleMapView = this.handleMapView.bind(this);\n\t\tthis.handleProjectionUpdated = this.handleProjectionUpdated.bind(this);\n\t\tthis.handleSelectionDone = this.handleSelectionDone.bind(this);\n\n\t\tthis.computeLocalHistogram = this.computeLocalHistogram.bind(this);\n\t}\n\n\thandleShowImport() {\n\t\tthis.setState({\n\t\t\tshowImport: true\n\t\t});\n\t}\n\n\thandleAbortImport() {\n\t\tthis.setState({\n\t\t\tshowImport: false\n\t\t});\n\t}\n\n\thandleMapView(dom) {\n\t\tthis.setState({\n\t\t\tmapView: dom\n\t\t})\n\t}\n\n\thandleMainView(dom) {\n\t\tthis.setState({\n\t\t\tmainView: dom\n\t\t})\n\t}\n\n\thandleCompleteImport(sdf, proteinBuffers, curv, bufferDims, voxelSize, heatmap, heatarea, compartmentHist) {\n\t\tthis.setState({\n\t\t\tsdf: sdf,\n\t\t\tprotein: proteinBuffers,\n\t\t\tvolumeDims: bufferDims,\n\t\t\tcurvature: curv,\n\t\t\tvoxelSize: voxelSize,\n\t\t\tshowImport: false,\n\t\t\tready: true,\n\t\t\theatmap: heatmap,\n\t\t\theatarea: heatarea,\n\t\t\theataxes: [[sdf[0].min, sdf[0].max], [curv.min, curv.max]],\n\t\t\tcompartmentHistogram: compartmentHist\n\t\t})\n\t}\n\n\thandleToggleFullscreen() {\n\t\tif (!this.state.fullscreen) {\n\t\t\tlet elem = document.documentElement;\n\t\t\tif (elem.requestFullscreen) {\n\t\t\t\telem.requestFullscreen();\n\t\t\t} else if (elem.webkitRequestFullscreen) {\n\t\t\t\telem.webkitRequestFullscreen();\n\t\t\t} else if (elem.msRequestFullscreen) {\n\t\t\t\telem.msRequestFullscreen();\n\t\t\t}\n\t\t} else {\n\t\t\tif (document.exitFullscreen) {\n\t\t\t\tdocument.exitFullscreen();\n\t\t\t} else if (document.webkitExitFullscreen) {\n\t\t\t\tdocument.webkitExitFullscreen();\n\t\t\t} else if (document.msExitFullscreen) {\n\t\t\t\tdocument.msExitFullscreen();\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tfullscreen: !this.state.fullscreen\n\t\t})\n\t}\n\n\thandleToggleSidebar() {\n\t\tthis.setState({\n\t\t\tshowSidebar: !this.state.showSidebar\n\t\t})\n\t}\n\n\thandleCompartmentSelection(index) {\n\t\tthis.setState({\n\t\t\tcompartmentIndex: index\n\t\t})\n\t}\n\n\thandleDisplaySegmentation(value) {\n\t\tthis.setState({\n\t\t\tdisplaySegmentation: value\n\t\t})\n\t}\n\n\thandleDisplayProtein(value) {\n\t\tthis.setState({\n\t\t\tdisplayProtein: value\n\t\t})\n\t}\n\n\thandleDebugSamples(value) {\n\t\tthis.setState({\n\t\t\tdebugSamples: value\n\t\t})\n\t}\n\n\thandleUseLod(value) {\n\t\tthis.setState({\n\t\t\tuseLod: value\n\t\t})\n\t}\n\n\thandleIsovalue(value) {\n\t\tlet isovalue = value / 100.0 * (this.state.sdf[0].max - this.state.sdf[0].min) + this.state.sdf[0].min;\n\t\tthis.setState({\n\t\t\tisovalue: isovalue\n\t\t})\n\t}\n\n\tasync computeLocalHistogram(selectionPixels, projectionPixels) {\n\t\tif (selectionPixels.buffer && projectionPixels.buffer) {\n\t\t\tconst worker = new Worker('../workers/local-heatmap-worker.js', {\n\t\t\t\tname: 'local-heatmap-worker',\n\t\t\t\ttype: 'module'\n\t\t\t  });\n\t\t\tconst compute = Comlink.wrap(worker);\n\t\t\tlet res = await compute(this.state.sdf[0].data, this.state.curvature.data, this.state.protein[0], this.state.volumeDims, selectionPixels, projectionPixels);\n\t\t\tworker.terminate();\n\n\t\t\tconst countFlat = Array.from(res.slice(0, 256*256));\n\t\t\tconst count = [];\n\t\t\twhile(countFlat.length) count.push(countFlat.splice(0, 256));\n\n\t\t\tconst areaFlat = Array.from(res.slice(256*256));\n\t\t\tconst area = [];\n\t\t\twhile(areaFlat.length) area.push(areaFlat.splice(0, 256));\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tlocalHeatmap: count,\n\t\t\t\tlocalHeatarea: area\n\t\t\t})\n\t\t}\n\t}\n\n\thandleProjectionUpdated(projectionPixels) {\n\t\tthis.setState({\n\t\t\tprojectionPixels: projectionPixels\n\t\t})\n\t}\n\n\thandleSelectionDone(selectionPixels) {\n\t\tthis.setState({\n\t\t\tselectionPixels: selectionPixels\n\t\t})\n\t\tthis.computeLocalHistogram(selectionPixels, this.state.projectionPixels);\n\t}\n\n\trender() {\n\t\tlet volumeSize = [\n\t\t\tthis.state.volumeDims[0] * this.state.voxelSize[0],\n\t\t\tthis.state.volumeDims[1] * this.state.voxelSize[1],\n\t\t\tthis.state.volumeDims[2] * this.state.voxelSize[2]\n\t\t]\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"background\"></div>\n\t\t\t\t<Import\n\t\t\t\t\tshow={this.state.showImport}\n\t\t\t\t\tonAbort={this.handleAbortImport}\n\t\t\t\t\tonComplete={this.handleCompleteImport}\n\t\t\t\t/>\n\t\t\t\t{!this.state.ready && \n\t\t\t\t    <div className=\"d-flex justify-content-center align-items-center\" style={{position: \"absolute\", height: \"100%\", width: \"100%\"}}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\t\tonClick={this.handleShowImport}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<i className=\"bi-plus-square\"></i>&nbsp;&nbsp;Import Data\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{ this.state.ready &&\n\t\t\t\t<>\n\t\t\t\t<Canvas\n\t\t\t\t\tmainView={this.state.mainView}\n\t\t\t\t\tmapView={this.state.mapView}\n\t\t\t\t\tvolumeDims={this.state.volumeDims}\n\t\t\t\t\tsdf={this.state.sdf}\n\t\t\t\t\tprotein={this.state.protein}\n\t\t\t\t\tcurvature={this.state.curvature}\n\t\t\t\t\tvolumeSize={volumeSize}\n\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\tcompartmentIndex={this.state.compartmentIndex}\n\t\t\t\t\tready={this.state.ready}\n\t\t\t\t\tdebugSamples={this.state.debugSamples}\n\t\t\t\t\tuseLod={this.state.useLod}\n\t\t\t\t\tisovalue={this.state.isovalue}\n\t\t\t\t\tonProjectionUpdated={this.handleProjectionUpdated}\n\t\t\t\t\tonSelectionDone={this.handleSelectionDone}\n\t\t\t\t/>\n\t\t\t\t<Overlay>\n\t\t\t\t\t<Toolbar\n\t\t\t\t\t\tfullscreen={this.state.fullscreen}\n\t\t\t\t\t\tonImportData={this.handleShowImport}\n\t\t\t\t\t\tonToggleFullscreen={this.handleToggleFullscreen}\n\t\t\t\t\t\tonToggleSidebar={this.handleToggleSidebar}\n\t\t\t\t\t/>\n\t\t\t\t\t<Sidebar\n\t\t\t\t\t\topen={this.state.showSidebar}\n\t\t\t\t\t\tnumCompartments={this.state.sdf.length}\n\t\t\t\t\t\tonCompartmentSelection={this.handleCompartmentSelection}\n\t\t\t\t\t\tselection={this.state.compartmentIndex}\n\t\t\t\t\t\tonDisplaySegmentation={this.handleDisplaySegmentation}\n\t\t\t\t\t\tonDisplayProtein={this.handleDisplayProtein}\n\t\t\t\t\t\tonDebugSamples={this.handleDebugSamples}\n\t\t\t\t\t\tonUseLod={this.handleUseLod}\n\t\t\t\t\t\tonIsovalue={this.handleIsovalue}\n\t\t\t\t\t\tdisplayProtein={this.state.displayProtein}\n\t\t\t\t\t\tdisplaySegmentation={this.state.displaySegmentation}\n\t\t\t\t\t/>\n\t\t\t\t</Overlay>\n\t\t\t\t<Views\n\t\t\t\t\theataxes={this.state.heataxes}\n\t\t\t\t\theatmap={Array.from(this.state.heatmap)}\n\t\t\t\t\theatarea={Array.from(this.state.heatarea)}\n\t\t\t\t\tcompartmentHistogram={this.state.compartmentHistogram}\n\t\t\t\t\tlocalHeatmap={Array.from(this.state.localHeatmap)}\n\t\t\t\t\tlocalHeatarea={Array.from(this.state.localHeatarea)}\n\t\t\t\t\tonMainView={this.handleMainView}\n\t\t\t\t\tonMapView={this.handleMapView}\n\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t\t}\n\t\t\t</>\n\t\t)\n\t}\n}\n\nexport default Main","import React, { Component } from 'react'\n\nimport ImportDialog from './ImportDialog';\nimport ImportProgress from './ImportProgress';\n\nimport * as Comlink from 'comlink';\n\nimport { Tiff } from '../tiff';\n\nclass Import extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tiffProtein: \"\",\n            tiffSegmentation: \"\",\n            voxelSize: \"\",\n            proteinProgress: 0,\n            segmentationProgress: 0,\n            sdfProgress: 0,\n            curvProgress: 0,\n            proteinError: \"\",\n            segmentationError: \"\",\n            sdfError: \"\",\n            curvError: \"\",\n            step: \"dialog\",\n            preImportError: \"\"\n        }\n\n        this.handleImport = this.handleImport.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.onProteinProgress = this.onProteinProgress.bind(this);\n        this.onSegmentationProgress = this.onSegmentationProgress.bind(this);\n        this.onProteinError = this.onProteinError.bind(this);\n        this.onSegmentationError = this.onSegmentationError.bind(this);\n        this.onSdfProgress = this.onSdfProgress.bind(this);\n        this.onSdfError = this.onSdfError.bind(this);\n    }\n\n    onProteinProgress(progress) {\n        this.setState({\n            proteinProgress: progress\n        })\n    }\n\n    onSegmentationProgress(progress) {\n        this.setState({\n            segmentationProgress: progress\n        })\n    }\n\n    onProteinError(error) {\n        this.setState({\n            proteinError: error\n        })\n    }\n\n    onSegmentationError(error) {\n        this.setState({\n            segmentationError: error\n        })\n    }\n\n    onSdfProgress(progress) {\n        this.setState({\n            sdfProgress: progress\n        })\n    }\n\n    onSdfError(error) {\n        this.setState({\n            sdfError: error\n        })\n    }\n\n    onCurvProgress(progress) {\n        this.setState({\n            curvProgress: progress\n        })\n    }\n    \n    onCurvError(error) {\n        this.setState({\n            curvError: error\n        })\n    }\n\n    async handleImport(fileProtein, fileSegmentation, voxelSize) {\n        let tiffProtein = new Tiff();\n        let tiffSegmentation = new Tiff();\n    \n        try {\n          await tiffProtein.open(fileProtein);\n          await tiffSegmentation.open(fileSegmentation);\n        } catch (e) {\n          this.setState({\n            preImportError: e.message\n          });\n          return;\n        }\n    \n        if (tiffProtein.width !== tiffSegmentation.width || tiffProtein.height !== tiffSegmentation.height || tiffProtein.depth !== tiffSegmentation.depth) {\n          this.setState({\n            preImportError: \"Please make sure the protein and the segmentation data have the same dimensions.\"\n          });\n          return;\n        }\n\n        this.setState({\n            step: \"import\",\n            voxelSize: voxelSize,\n            tiffProtein: tiffProtein,\n            tiffSegmentation: tiffSegmentation,\n            segmentationProgress: 0,\n            proteinProgress: 0,\n            sdfProgress: 0,\n            segmentationError: \"\",\n            proteinError: \"\",\n            sdfError: \"\"\n        });\n        \n        // We can decode the TIFFs in parallel.\n        await tiffProtein.decode(this.onProteinError, this.onProteinProgress);\n        await tiffSegmentation.decode(this.onSegmentationError, this.onSegmentationProgress);\n        const reducer = (accumulator, currentValue) => Math.max(accumulator, currentValue);\n        var numCompartments = tiffSegmentation.pixels.reduce(reducer);\n\n        let promises = [];\n        let workers = [];\n        let progress = new Array(numCompartments+1);\n\n        for (let i = 0; i < numCompartments+1; ++i) {\n            const target = i;\n            const onProgress = (p) => {\n                progress[target] = p * 100;\n                this.onSdfProgress(progress.reduce((a, b) => a + b, 0) / (numCompartments + 1));\n            }\n            promises.push(new Promise(function(resolve, reject) {\n                const worker = new Worker('../workers/sdf-worker.js', {\n                    name: 'sdf-worker',\n                    type: 'module'\n                });\n                workers.push(worker);\n                const sdf = Comlink.wrap(worker);\n                let result = sdf(tiffSegmentation, voxelSize, target, Comlink.proxy(onProgress));\n                resolve(result);\n            }));\n        }\n\n        //const sdfBuffers = await Promise.all(promises); // This needs too much memory for some reason?\n        let sdf = [];\n        for (let i = 0; i < promises.length; ++i) {\n            sdf.push(await promises[i]);\n        }\n        for (let i = 0; i < workers.length; ++i) {\n            workers[i].terminate();\n        }\n        this.onSdfProgress(100);\n\n        const worker = new Worker('../workers/curv-worker.js', {\n            name: 'curv-worker',\n            type: 'module'\n        });\n        const curvature = Comlink.wrap(worker);\n        const onProgress = (p) => {\n            this.onCurvProgress(p * 100)\n        }\n        let curv = await curvature(sdf[0], [tiffProtein.width, tiffProtein.height, tiffProtein.depth], voxelSize, Comlink.proxy(onProgress));\n\n        // Compute pyramid.\n        let pyramid = [];\n        let w = tiffProtein.width;\n        let h = tiffProtein.height;\n        let d = tiffProtein.depth;\n\n        let level0 = new Uint8Array(w*h*d);\n        for (let i = 0; i < w; ++i) {\n            for (let j = 0; j < h; ++j) {\n                for (let k = 0; k < d; ++k) {\n                    level0[k*w*h+j*w+i] = tiffProtein.pixels[k*w*h+j*w+i];\n                }\n            }\n        }\n        pyramid.push(level0);\n\n        while (true) {\n            let pw = w;\n            let ph = h;\n            let pd = d;\n            w = Math.ceil(w / 2.0);\n            h = Math.ceil(h / 2.0);\n            d = Math.ceil(d / 2.0);\n\n            let plevel = pyramid[pyramid.length - 1];\n            let level = new Uint8Array(w*h*d);\n            for (let pi = 0; pi < pw; ++pi) {\n                for (let pj = 0; pj < ph; ++pj) {\n                    for (let pk = 0; pk < pd; ++pk) {\n                        let i = Math.floor(pi/2.0);\n                        let j = Math.floor(pj/2.0);\n                        let k = Math.floor(pk/2.0);\n                        level[k*w*h+j*w+i] = Math.max(level[k*w*h+j*w+i], plevel[pk*pw*ph+pj*pw+pi]);\n                    }\n                }\n            }\n            pyramid.push(level);\n\n            if (w <= 1 || h <= 1 || d <= 1) break;\n        }\n\n        // Compute global histogram.\n        const bitDepth = 8;\n\n        const counts = Array.from(Array(2**bitDepth).fill(0), () => new Array(2**bitDepth).fill(0));\n        const area = Array.from(Array(2**bitDepth).fill(0), () => new Array(2**bitDepth).fill(0));\n\n        const compartmentHist = Array(numCompartments).fill(0);\n        const compartmentArea = Array(numCompartments).fill(0);\n        for (let i = 0; i < sdf[0].data.length; ++i) {\n            counts[curv.data[i]][sdf[0].data[i]] += tiffProtein.pixels[i];\n            area[curv.data[i]][sdf[0].data[i]] += 1.0;\n            if (tiffSegmentation.pixels[i] > 0) {\n                compartmentHist[tiffSegmentation.pixels[i]-1] += tiffProtein.pixels[i];\n                compartmentArea[tiffSegmentation.pixels[i]-1] += 1.0;\n            }\n        }\n\n        for (let i = 0; i < numCompartments; ++i) {\n            compartmentHist[i] /= compartmentArea[i];\n        }\n\n        this.setState({\n            step: \"dialog\"\n        });\n\n        this.props.onComplete(sdf, pyramid, curv, [tiffProtein.width, tiffProtein.height, tiffProtein.depth],\n                              [parseFloat(voxelSize.x), parseFloat(voxelSize.y), parseFloat(voxelSize.z)], counts, area, compartmentHist);\n    }\n\n    handleClose() {\n        this.props.onAbort();\n    }\n\n    render() {\n        return (\n            <>\n                <ImportDialog\n                    show={this.state.step === \"dialog\" && this.props.show}\n                    error={this.state.preImportError}\n                    onImport={this.handleImport}\n                    onClose={this.handleClose}\n                />\n                <ImportProgress\n                    show={this.state.step === \"import\" && this.props.show}\n                    proteinProgress={this.state.proteinProgress}\n                    segmentationProgress={this.state.segmentationProgress}\n                    sdfProgress={this.state.sdfProgress}\n                    curvProgress={this.state.curvProgress}\n                    proteinError={this.state.proteinError}\n                    segmentationError={this.state.segmentationError}\n                    sdfError={this.state.sdfError}\n                    curvError={this.state.curvError}\n                />\n            </>\n        )\n    }\n}\n\nexport default Import","import React, { Component } from 'react'\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nclass Toolbar extends Component {\n\trender() {\n\t\tlet fullscreenIcon;\n\t\tif (this.props.fullscreen) fullscreenIcon = \"bi-fullscreen-exit\";\n\t\telse fullscreenIcon = \"bi-arrows-fullscreen\";\n\t\treturn (\n\t\t\t<ButtonToolbar\n\t\t\t\tstyle={{marginLeft: \"auto\"}}\n\t\t\t>\n\t\t\t<ButtonGroup\n\t\t\t\tclassName=\"me-2\"\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleSidebar}\n\t\t\t\t><i className=\"bi-tools\"></i></Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onImportData}\n\t\t\t\t>Import Data</Button>\n\t\t\t</ButtonGroup>\n\t\t\t<ButtonGroup\n\t\t\t\tclassName=\"me-2\"\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={this.props.onToggleFullscreen}\n\t\t\t\t><i className={fullscreenIcon}></i></Button>\n\t\t\t</ButtonGroup>\n\t\t\t</ButtonToolbar>\n\t\t)\n\t}\n}\n\nexport default Toolbar","import React from 'react'\n\nimport Col from 'react-bootstrap/Col';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Card from 'react-bootstrap/Card';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\n\nconst Sidebar = props => {\n\n    const handleSelectCompartmet = (index) => {\n        props.onCompartmentSelection(index);\n    }\n\n    const handleChangeDisplaySegmentation = (e) => {\n        props.onDisplaySegmentation(e.target.checked);\n    }\n\n    const handleChangeDisplayProtein = (e) => {\n        props.onDisplayProtein(e.target.checked);\n    }\n\n    const handleChangeDebugSamples = (e) => {\n        props.onDebugSamples(e.target.checked);\n    }\n\n    const handleChangeUseLod = (e) => {\n        props.onUseLod(e.target.checked);\n    }\n\n    const handleChangeIsovalue = (e) => {\n        props.onIsovalue(e.target.value);\n    }\n\n    let dropdownItems = [\n    <Dropdown.Item\n        onClick={() => handleSelectCompartmet(0)}\n    >All Compartments</Dropdown.Item>]\n    for (var i = 0; i < props.numCompartments-1; ++i) {\n        let index = i;\n        dropdownItems.push(\n        <Dropdown.Item\n            onClick={() => handleSelectCompartmet(index+1)}\n        >Compartment {index+1}</Dropdown.Item>);\n    }\n\n    let dropdownText = \"\";\n    if (props.numCompartments === 0) dropdownText = \"No Compartment Data\"\n    else if (props.selection === 0) dropdownText = \"All Compartments\";\n    else dropdownText = \"Compartment \" + props.selection;\n    return (\n        <Row\n            md={3}\n            className=\"justify-content-end\"\n        >\n            <Col>\n                <Collapse in={props.open}>\n                    <Card>\n                        <Card.Body>\n                            <Form>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.displayProtein}\n                                        disabled={props.numCompartments===0}\n                                        onChange={handleChangeDisplayProtein}\n                                    />\n                                    <Form.Check.Label>Display Protein</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.displaySegmentation}\n                                        disabled={props.numCompartments===0}\n                                        onChange={handleChangeDisplaySegmentation}\n                                    />\n                                    <Form.Check.Label>Display Segmentation</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Range\n                                    disabled={props.numCompartments===0}\n                                    onChange={handleChangeIsovalue}\n                                />\n                                <Dropdown>\n                                    <Dropdown.Toggle disabled={props.numCompartments===0}>\n                                        {dropdownText}\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        {dropdownItems}\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                                Debug Options\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.debugSamples}\n                                        onChange={handleChangeDebugSamples}\n                                    />\n                                    <Form.Check.Label>Display Texture Samples</Form.Check.Label>\n                                </Form.Check>\n                                <Form.Check className=\"form-switch\">\n                                    <Form.Check.Input\n                                        checked={props.useLod}\n                                        onChange={handleChangeUseLod}\n                                    />\n                                    <Form.Check.Label>Use LoD</Form.Check.Label>\n                                </Form.Check>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </Collapse>\n            </Col>\n        </Row>\n    );\n}\n\nexport default Sidebar;"],"sourceRoot":""}